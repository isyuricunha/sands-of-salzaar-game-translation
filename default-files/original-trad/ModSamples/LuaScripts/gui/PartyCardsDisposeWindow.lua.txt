require("gui/WindowUtils")
require("GameUtils")

local GameCoreHelper = CS.GameCoreHelper

--页面访问控件
local contentPane

local btnClose;

local txtTitle;
local lvParty;
local lvMatList;
local ctlAllMatList;
local btnRestoreAll;
local allMatList;

local curDisplayedSlots;

local playerTeam;

local StringFormat = GameCoreHelper.StringFormat;

--窗体初始化时
function onInit()
	contentPane = self.contentPane

	playerTeam = GameCoreHelper.GetPlayerTeam();

	txtTitle = contentPane:GetChild("title").asTextField;

	lvParty = contentPane:GetChild("party_list").asList;

	local groupRightBar = contentPane:GetChild("g_rightbar").asGroup;
	lvMatList = contentPane:GetChildInGroup(groupRightBar, "mat_list").asList;
	ctlAllMatList = CreateStandardResBoxByList(lvMatList, false);
	btnRestoreAll = contentPane:GetChildInGroup(groupRightBar, "btn_restoreall").asButton;

	btnClose = contentPane:GetChild("btn_close").asButton;

	--绑定按钮事件
	btnClose.onClick:Add(onClickBackBtn);

	btnRestoreAll.onClick:Add(onClickBackRestoreAll);

	self:SetBackkeyButton(btnClose);

	RefreshPartyList();

	if IsMobileMode then
		CreateQuickCloseBg(contentPane, onClickBackBtn)
	end
end

function SetWindowParams(args)
	txtTitle.text = args[0];
end

--窗体开始显示并播放显示动画时
function onDoShowAnimation()
	CommonShowWindowAnim(self, onShown)
end

--窗体播放完显示动画时
function onShown()
	--增加计时器事件
	--CS.FairyGUI.Timers.inst:Add(timerTickInterval, 0, onTimerTickUpdate);
end

--窗体开始播放关闭动画时
function onDoHideAnimation()
	CommonHideWindowAnim(self, onHideAnimationDone)
end

function onHideAnimationDone()
	self:HideImmediately();
end

--窗体隐藏时
function onHide()
	--移除计时器事件
	--CS.FairyGUI.Timers.inst:Remove(onTimerTickUpdate);
end

--按下完成按钮时
function onClickBackBtn()
	PlayButtonSound();

	self:Hide();
end

function RefreshPartyList()
	lvParty.numItems = 0;
	curDisplayedSlots = {};

	allMatList = GameCoreHelper.GetEmptyGameItemList();

	local curSoldierList = playerTeam.soldierCardsInTeam;
	local tagCard;
	local tagSlot;
	for index=0,curSoldierList.Count-1 do
		tagCard = curSoldierList[index];
		tagSlot = AddSoldierCardDisposeBox(tagCard);
		table.insert(curDisplayedSlots, tagSlot);
	end

	ctlAllMatList:UpdateValsByItemList(allMatList, true);
	if allMatList ~= nil and allMatList.Count > 0 then
		btnRestoreAll.enabled = true;
	else
		btnRestoreAll.enabled = false;
	end
end

constrUnitNumInfoStr = GetGameString("lua_script_str_263");
function AddSoldierCardDisposeBox(_tagCard)
	local tagListObj = lvParty:AddItemFromPool().asCom;
	local _subList = tagListObj:GetChild("item_list").asList;
	local mainBox = _subList:GetChildAt(0).asCom;
	local unitBtn = mainBox:GetChild("unit_box").asButton;
	local tagSlotInfo = CreateSoldierSlotInfoByCardPUI(unitBtn, 0, nil);
    SetSoldierSlotBindInfoPUI(tagSlotInfo, _tagCard);
	UpdateSoldierSlotPUI(tagSlotInfo, false, true);

	if tagSlotInfo.isInitedDisposeUI ~= true then
		tagSlotInfo.isWideBar = true;
		tagSlotInfo.txtNumInfo = tagSlotInfo.bindBtn:GetChild("team_num").asTextField;

		tagSlotInfo.dismissBox = _subList:GetChildAt(1).asCom;
		tagSlotInfo.lvDismissMats = tagSlotInfo.dismissBox:GetChild("mat_list").asList;
		tagSlotInfo.btnDismiss = tagSlotInfo.dismissBox:GetChild("btn_op").asButton;
		tagSlotInfo.ctlDismissMats = CreateStandardResBoxByList(tagSlotInfo.lvDismissMats, false);

		tagSlotInfo.restoreBox = _subList:GetChildAt(2).asCom;
		tagSlotInfo.lvRestoreMats = tagSlotInfo.restoreBox:GetChild("mat_list").asList;
		tagSlotInfo.btnRestore = tagSlotInfo.restoreBox:GetChild("btn_op").asButton;
		tagSlotInfo.ctlRestoreMats = CreateStandardResBoxByList(tagSlotInfo.lvRestoreMats, false);

		tagSlotInfo.btnDismiss.onClick:Add(function()
			OnClickDismissCard(tagSlotInfo);
		end);
		tagSlotInfo.btnRestore.onClick:Add(function()
			OnClickRestoreCard(tagSlotInfo);
		end);

		tagSlotInfo.isInitedDisposeUI = true;
	end

	local sNumInfo = StringFormat(constrUnitNumInfoStr, _tagCard.CurAvailable, _tagCard.MaxDurability);
	tagSlotInfo.txtNumInfo.text = sNumInfo;

	if _tagCard:IsEnableDismiss() then
		tagSlotInfo.dismissMats = _tagCard:GetDismissRes(playerTeam);
		tagSlotInfo.ctlDismissMats:UpdateValsByItemList(tagSlotInfo.dismissMats, false);
		tagSlotInfo.dismissBox.visible = true;
	else
		tagSlotInfo.dismissMats = nil;
		tagSlotInfo.dismissBox.visible = false;
	end

	if _tagCard.CurAvailable < _tagCard.MaxDurability then
		tagSlotInfo.restoreMats = _tagCard:GetRestoreRes(playerTeam);
		tagSlotInfo.ctlRestoreMats:UpdateValsByItemList(tagSlotInfo.restoreMats, true);
		tagSlotInfo.restoreBox.visible = true;

		CS.GameTools.MergeItemListNoRepeat(allMatList, tagSlotInfo.restoreMats);
	else
		tagSlotInfo.restoreMats = nil;
		tagSlotInfo.restoreBox.visible = false;
	end

	_subList:ResizeToFit();
	return tagSlotInfo;
end

function OnClickDismissCard(_tagSlot)
	if _tagSlot == nil then
		return;
	end
	if _tagSlot.dismissMats == nil or _tagSlot.dismissMats.Count <= 0 then
		return;
	end
	PlayButtonSound();

	local _alertInfo = GetGameString("lua_script_str_264");
	local _matInfo = CS.GameTools.GetItemsDesc(_tagSlot.dismissMats);
	local _confirmInfo = StringFormat(_alertInfo, _matInfo);
	ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
		if ret == 1 then
			DoDismissTagCard(_tagSlot)
		end
	end)
end

function DoDismissTagCard(_tagSlot)
	if _tagSlot.dismissMats ~= nil and _tagSlot.dismissMats.Count > 0 then
		--返还材料
		local tagResItem;
		for index=0,_tagSlot.dismissMats.Count-1 do
			tagResItem = _tagSlot.dismissMats[index];
			GameCoreHelper.AddItemToPlayerInv(tagResItem, false, true);
		end
		playerTeam:RemoveSoldierCardsInTeam(_tagSlot.cardInfo);
		playerTeam.isTeamNumUpdated = true;
		RefreshPartyList();
	end
end

function OnClickRestoreCard(_tagSlot)
	PlayButtonSound();

	if _tagSlot.restoreMats ~= nil and _tagSlot.restoreMats.Count > 0 then
		if not GameCoreHelper.CheckInventoryForItems(_tagSlot.restoreMats) then
			ShowToastInfo(GetGameString("lua_script_str_265"), 3);
			return;
		end
		--返还材料
		local tagResItem;
		for index=0,_tagSlot.restoreMats.Count-1 do
			tagResItem = _tagSlot.restoreMats[index];
			GameCoreHelper.RemoveItemsFormPlayerInv(tagResItem.itemID, tagResItem.itemCount, false);
		end
		_tagSlot.cardInfo.CurLosses = 0;
		playerTeam:UpdateTeamState();
		RefreshPartyList();
	end
end

function onClickBackRestoreAll()
	PlayButtonSound();

	if allMatList ~= nil and allMatList.Count > 0 then
		if not GameCoreHelper.CheckInventoryForItems(allMatList) then
			ShowToastInfo(GetGameString("lua_script_str_266"), 3);
			return;
		end
		for k,v in pairs(curDisplayedSlots) do
			if v ~= nil then
				v.cardInfo.CurLosses = 0;
			end
		end
		--扣除材料
		local tagResItem;
		for index=0,allMatList.Count-1 do
			tagResItem = allMatList[index];
			GameCoreHelper.RemoveItemsFormPlayerInv(tagResItem.itemID, tagResItem.itemCount, false);
		end
		playerTeam:UpdateTeamState();
		RefreshPartyList();
	end
end