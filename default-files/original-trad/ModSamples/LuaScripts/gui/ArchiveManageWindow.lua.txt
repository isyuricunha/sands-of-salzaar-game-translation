require("gui/WindowUtils")

--页面访问控件
local contentPane

local txtWinTitle;

local lvItems;
local groupNoItems;
local groupPreview;
local imgPreviewHolder;
local lvDetails;

local btnClose;

local groupBtns;
local btnConfirm;
local btnDelete;

local btnToggleAutoSave = nil;
local autosaveGroup = nil;

local GameCoreHelper = CS.GameCoreHelper;
local GameTools = CS.GameTools;
local ArchiveData = CS.HanFramework.ArchiveData

local curSeledArchiveInfo = nil;
local curSeledSlot = nil;
local curFocusSlot = nil;
local lastArchiveInfo = nil;

local controlNoPreview = nil;

--当前操作类型  0：保存游戏  1：载入游戏
local curOpMode = 0;
--是否处于游戏过程中
local isInGame = false;

local curDlgState = 0;

local archiveDics = nil;

local isShowSaveIndex = false;

local isSaveSlotFull = false;

local constPackageName = "NewUI";

local colorNormal = CS.GUIHelper.GetColor("000000");
local colorPass = CS.GUIHelper.GetColor("000000");
if IsMobileMode then
	colorNormal = CS.GUIHelper.GetColor("251303");
	colorPass = CS.GUIHelper.GetColor("251303");
end
local colorError = CS.GUIHelper.GetColor("842024");

--手柄操作相关
local navCtl = nil;
local listNavCtl = nil;
local lastNavObj = nil;
local thisNavObj = nil;

--窗体初始化时
function onInit()
	contentPane = self.contentPane

	txtWinTitle = contentPane:GetChild("title").asTextField;

	lvItems = contentPane:GetChild("save_list").asList;
	groupNoItems = contentPane:GetChild("g_noitems").asGroup;
	groupNoItems.visible = false;

	groupPreview = contentPane:GetChild("g_preview").asGroup;
	imgPreviewHolder = contentPane:GetChildInGroup(groupPreview, "preview_holder").asImage;
	groupPreview.visible = false;
	lvDetails = contentPane:GetChild("detail_list").asList;

	btnClose = contentPane:GetChild("btn_close").asButton;
	btnClose.onClick:Add(onClickBtnClose);

	groupBtns = contentPane:GetChild("g_btns").asGroup;

	btnConfirm = contentPane:GetChildInGroup(groupBtns, "btn_confirm").asButton;
	btnConfirm.onClick:Add(onClickBtnConfirm);

	btnDelete = contentPane:GetChildInGroup(groupBtns, "btn_delete").asButton;
	btnDelete.onClick:Add(onClickBtnDelete);

	controlNoPreview = contentPane:GetController("nopreview");
	controlNoPreview.selectedIndex = 1;

	--设置默认值
	self:SetCloseButton(btnClose);

	curDlgState = 0;

	isShowSaveIndex = GameCoreHelper.IsDebugFileExsit("ShowSaveId.txt");

	--初始化变量
	curOpMode = 0;
	local strOpType = self:GetWindowArgVal("op_type");
	if not IsEmptyOrNil(strOpType) then
		curOpMode = math.floor(tonumber(strOpType));
	end

	local inGameArg = 0;
	isInGame = false;
	local strInGameArg = self:GetWindowArgVal("is_ingame");
	if not IsEmptyOrNil(strInGameArg) then
		inGameArg = math.floor(tonumber(strInGameArg));
		if inGameArg == 1 then
			isInGame = true;
		end
	end

	if curOpMode == 1 then
		txtWinTitle.text = GetGameString("lua_script_str_138");
	else
		txtWinTitle.text = GetGameString("lua_script_str_139");
	end

	--创建按键导航空间
	navCtl = self:GetOrCreateNavCtl();
	local listNavObj = navCtl:AddNavObjSubSpace();
	local btnDeleteNavObj = navCtl:AddNavObjByGButton(btnDelete);
	btnDeleteNavObj:SetNavLeft(listNavObj);
	local btnConfirmNavObj = navCtl:AddNavObjByGButton(btnConfirm);
	btnConfirmNavObj:SetNavLeft(btnDeleteNavObj);
	listNavCtl = listNavObj.subNavSpace;

	self:RegJoystickQuickButton(btnDelete, JoystickButton.ButtonX, true);
	self:RegJoystickQuickButton(btnConfirm, JoystickButton.ButtonA, true);

	btnConfirm.enabled = true;

	SetDetailInfoVisible(false);
	RefreshArchiveList();

	navCtl:SetDefaultFocus(listNavObj);

	if IsMobileMode then
		CreateQuickCloseBg(contentPane, onClickBtnClose)
	end
end

--窗体开始显示并播放显示动画时
function onDoShowAnimation()
	CommonShowWindowAnim(self, onShown)
end

--窗体播放完显示动画时
function onShown()
	--增加计时器事件
	--CS.FairyGUI.Timers.inst:Add(timerTickInterval, 0, onTimerTickUpdate);
	--CS.FairyGUI.GRoot.inst:AddEventListener("GetAllDLCByArchiveSummary_Complete",RefreshArchiveList);
	curDlgState = 1;
	--GameCoreHelper.TryUpdateArchiveSummaryByUI();
end

--窗体开始播放关闭动画时
function onDoHideAnimation()
	curDlgState = -1;
	CommonHideWindowAnim(self, onHideAnimationDone)
end

function onHideAnimationDone()
	self:HideImmediately();
end

--窗体隐藏时
function onHide()
	curDlgState = -1;
	--移除计时器事件
	--CS.FairyGUI.Timers.inst:Remove(onTimerTickUpdate);
	--CS.FairyGUI.GRoot.inst:RemoveEventListener("GetAllDLCByArchiveSummary_Complete",RefreshArchiveList);
end

function GetArchiveSaveKey(_summaryInfo)
	local expertStr = "";
	if _summaryInfo.is_expert then
		expertStr = "Expert";
	end
	local classStr = "";
	if not IsEmptyOrNil(_summaryInfo.player_class) then
		classStr = _summaryInfo.player_class;
	end
	return _summaryInfo.game_mode .. "#" .. classStr .. "#" .. _summaryInfo.char_name .. "#" .. expertStr;
end

--UI逻辑
function RefreshArchiveList()
	if self == nil then
		return;
	end
	lastArchiveInfo = nil;
	curFocusSlot = nil;
	SetCurSeledArchive(nil, false);

	--读取所有存档
	local useableID = -1;
    local curFileCount = 0;
	local startIndex = 0;
	if curOpMode == 0 then
		startIndex = 1;
	end

	local curArchiveKey = nil;
	local newArchive = nil;

	local maxArchiveCount = GameCoreHelper.GetMaxArchiveCount();
	local allArchiveList = GameCoreHelper.GetEmptyArchiveList();
	local realArchiveCount = 0;
	for index=startIndex,maxArchiveCount + 1 do
		local saveSummary = GameCoreHelper.LoadArchiveSummaryInfo(index);
		if saveSummary ~= nil then
			saveSummary.curArchiveIndex = index;
			saveSummary.isNewSave = false;
			allArchiveList:Add(saveSummary);
			curFileCount = curFileCount + 1;
			if index > 0 then
				realArchiveCount = realArchiveCount + 1;
			end
		else
			if useableID < 0 then
				useableID = index;
			end
		end
    end

	if useableID < 0 then
		useableID = allArchiveList.Count + 1;
	end

	isSaveSlotFull = false;
	if curOpMode == 0 then
		newArchive = GameCoreHelper.CreateCurGameSummaryInfo();
		if newArchive ~= nil then
			curArchiveKey = GetArchiveSaveKey(newArchive);
			newArchive.curArchiveIndex = useableID;
			newArchive.isNewSave = true;
			allArchiveList:Add(newArchive);
		end

		if curFileCount >= maxArchiveCount then
			isSaveSlotFull = true;
		end
	end

	if allArchiveList.Count > 0 then
		GameCoreHelper.SortArchiveListByTime(allArchiveList);
	end

	local isEnableAutosave = not GameCoreHelper.IsDisableAutoSave();
	local lastOpSlot = nil;
	local recentSlot = nil;
	local recentMySlot = nil
	local newSlot = nil;
	local lastOpIndex = GameCoreHelper.GetLastArchiveIndex();
	if allArchiveList.Count > 0 then
		local tagArchive;
		--分类排序
		local groupDics = {};
		local groupArry = {};
		local saveKey = nil;
		local tagSaveGroup = nil;
		local autoSaveGroup = {};
		autoSaveGroup.itemsCount = 0;
		autoSaveGroup.itemsList = {};
		groupDics["autosave"] = autoSaveGroup;
		groupArry[0] = autoSaveGroup;
		local groupCount = 1;

		for index=0,allArchiveList.Count - 1 do
			tagArchive = allArchiveList[index];
			if tagArchive.curArchiveIndex == 0 then
				--处理自动存档
				saveKey = "autosave";
				tagSaveGroup = autoSaveGroup;
			else
				--处理所有非自动存档
				saveKey = GetArchiveSaveKey(tagArchive);
				tagSaveGroup = groupDics[saveKey];
				if (tagSaveGroup == nil) then
					tagSaveGroup = {};
					tagSaveGroup.itemsCount = 0;
					tagSaveGroup.itemsList = {};
					groupDics[saveKey] = tagSaveGroup;
					groupArry[groupCount] = tagSaveGroup;
					groupCount = groupCount + 1;
				end
			end
			tagSaveGroup.saveKey = saveKey;
			tagSaveGroup.itemsList[tagSaveGroup.itemsCount] = tagArchive;
			tagSaveGroup.itemsCount = tagSaveGroup.itemsCount + 1;
		end

		archiveDics = {};
		lvItems.numItems = 0;
		listNavCtl:ClearNavObjects();

		local tagGroup;
		lastNavObj = nil;
		thisNavObj = nil;
		local tagSlot;
		for index=0,groupCount - 1 do
			tagSaveGroup = groupArry[index];
			if tagSaveGroup ~= nil and tagSaveGroup.itemsList ~= nil then
				for subindex=0,tagSaveGroup.itemsCount - 1 do
					tagArchive = tagSaveGroup.itemsList[subindex];
					tagSlot = nil;
					if tagArchive.curArchiveIndex == 0 then
						if curOpMode == 1 then
							autosaveGroup = CreateAutoSaveGroup();
							--自动存档位
							if autosaveGroup ~= nil then
								UpdateCommonGroupInfo(autosaveGroup, tagArchive);
								tagSlot = AddArchiveInfoSlotToGroup(autosaveGroup, tagArchive);
							end
						end
					else
						tagGroup = GetOrCreateArchiveGroup(tagSaveGroup.saveKey, tagArchive);
						tagSlot = AddArchiveInfoSlotToGroup(tagGroup, tagArchive);
					end
					if tagSlot ~= nil then
						if tagArchive.curArchiveIndex ~= 0 or isEnableAutosave then
							--关闭自动存档时不会默认选中
							if recentSlot == nil then
								recentSlot = tagSlot;
							end
							if curArchiveKey == saveKey then
								if newArchive ~= tagArchive then
									if recentMySlot == nil then
										recentMySlot = tagSlot;
									end
								end
							end
							if tagArchive.isNewSave then
								if newSlot == nil then
									newSlot = tagSlot;
								end
							else
								if lastOpIndex > 0 and lastOpIndex == tagArchive.curArchiveIndex then
									lastOpSlot = tagSlot;
								end
							end
						end
					end
				end
			end
		end

		if autosaveGroup ~= nil then
			btnToggleAutoSave.selected = isEnableAutosave;
			btnToggleAutoSave.onChanged:Set(OnAutoSaveChanged);
			UpdateTagGroupToggleView(autosaveGroup, not isEnableAutosave);
		end

		lvItems.visible = true;
		groupNoItems.visible = false;
	else
		lvItems.visible = false;
		groupNoItems.visible = true;
	end

	local defSlot = nil;
	if lastOpSlot ~= nil then
		defSlot = lastOpSlot;
	elseif recentMySlot ~= nil then
		defSlot = recentMySlot;
	elseif newSlot ~= nil then
		defSlot = newSlot;
	elseif recentSlot ~= nil then
		defSlot = recentSlot;
	end
	SetCurSeledArchive(defSlot, false);

	--更新标题
	if curOpMode == 0 then
		if realArchiveCount > maxArchiveCount then
			realArchiveCount = maxArchiveCount;
		end
		txtWinTitle.text = GetGameString("lua_script_str_139") .. GameCoreHelper.StringFormat("({0}/{1})", realArchiveCount, maxArchiveCount);
	end
end

function onClickBtnClose()
	PlayButtonSound();

	self.CurDialogResult = -1;
	self:Hide();
end

local curSeledArchiveIndex = -1;
function onClickBtnConfirm()
	PlayButtonSound();

	if curSeledArchiveInfo ~= nil and curFocusSlot ~= nil then
		if curFocusSlot.isGoodArchive then
			ConfirmOp();
		end
	end
end

function ConfirmOp()
	if curSeledArchiveInfo == nil then
		return;
	end
	--记录选中的索引
	curSeledArchiveIndex = curSeledArchiveInfo.curArchiveIndex;
	if curOpMode == 0 then
		local dlc1 = IsEmptyOrNil(curSeledArchiveInfo:GetModName("xlhy#heroes#0.1")) == GameCoreHelper.IsDLCActived("xlhy#heroes#0.1");
		local dlc2 = IsEmptyOrNil(curSeledArchiveInfo:GetModName("xlhy#matchgame#0.1")) == GameCoreHelper.IsDLCActived("xlhy#matchgame#0.1");
		if dlc1 or dlc2 then
			--比武大会 加强提示
			local _confirmInfo = GameTools.GetGameString("DLC_Archive_CoverTips");
			ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
				if ret == 1 then
					ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
						if ret == 1 then
							curSeledArchiveInfo:TryCreateBackupCopy();
							DoConfirmOp();
						end
					end);
				end
			end);
		else
			DoConfirmOp();
		end
		--保存
	else
		--读取;
		if not curSeledArchiveInfo.isModEnvError then
			DoConfirmOp();
		else
			local matchgame = curSeledArchiveInfo:Get_IsXlhyMatchDLCError();
			if not IsEmptyOrNil(matchgame) then
				local _confirmInfo = GameTools.GetGameString("DLC_Archive_Unpaid")..matchgame;
				ShowConfirmDlg(_confirmInfo, "ok",nil);
			else
				local DLC3SubDlc1 = curSeledArchiveInfo:Get_IsXlhyMatchDLCError("mod#heyandlc#0.1");
				if not IsEmptyOrNil(DLC3SubDlc1) then
					local _confirmInfo = GameTools.GetGameString("DLC_Archive_Unpaid")..DLC3SubDlc1;
					ShowConfirmDlg(_confirmInfo, "ok", nil);
				else
					local DLC3SubDlc2 = curSeledArchiveInfo:Get_IsXlhyMatchDLCError("mod#offspringdlc#0.1");
					if not IsEmptyOrNil(DLC3SubDlc2) then
						local _confirmInfo = GameTools.GetGameString("DLC_Archive_Unpaid")..DLC3SubDlc2;
						ShowConfirmDlg(_confirmInfo, "ok", nil);
					else
						local DLC3SubDlc3 = curSeledArchiveInfo:Get_IsXlhyMatchDLCError("na#hjjhxqjdlc#0.1");
						if not IsEmptyOrNil(DLC3SubDlc3) then
							local _confirmInfo = GameTools.GetGameString("DLC_Archive_Unpaid")..DLC3SubDlc3;
							ShowConfirmDlg(_confirmInfo, "ok", nil);
						else
							local _confirmInfo = GameTools.GetGameString("UIArchiveDataSelDlg_Confirm");
							ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
								if ret == 1 then
									DoConfirmOp();
								end
							end)
						end
					end
				end
			end
		end
	end
end

function DoConfirmOp()
	if curSeledArchiveInfo == nil then
		return;
	end
	local tagVersion = curSeledArchiveInfo:GetCreateVersion();
	if curOpMode == 1 and GameCoreHelper.VersionCompare(tagVersion, "1.0.0.1") < 0 then
		--老存档检测提醒
		local _confirmInfo = GameTools.GetGameString("UIArchiveDataSelDlg_OldVersionConfirm");
		ShowConfirmDlg(_confirmInfo, "ok", function(ret)
			Do_DLC_TipsCheck();
		end);
	else
		Do_DLC_TipsCheck();
	end
end

function Do_DLC_TipsCheck()
	if curSeledArchiveInfo == nil then
		return;
	end
	if curOpMode == 1 and (IsEmptyOrNil(curSeledArchiveInfo:GetModName("xlhy#heroes#0.1")) == GameCoreHelper.IsDLCActived("xlhy#heroes#0.1")) then
		--乱世英豪 DLC 加载强调提示
		ShowConfirmDlg(GameTools.GetGameString("DLC_Archive_DLC1LoadTips"), "ok",DoVersionCheckOK);
		return;
	end
	DoVersionCheckOK();
end

function DoVersionCheckOK()
	if curSeledArchiveInfo == nil then
		return;
	end
	self.CurDialogResult = curSeledArchiveIndex;
	--当有操作执行时执行该操作
	btnConfirm.enabled = false;
	if self.CurDialogResult >= 0 then
		OnExecArchiveOp();
	end
	self:Hide();
end

function OnExecArchiveOp()
	if curSeledArchiveInfo == nil then
		return;
	end
	if curSeledArchiveIndex < 0 then
		return;
	end
	if curOpMode == 1 then
		--载入游戏
		GameCoreHelper.LoadTagArchive(curSeledArchiveIndex, isInGame, function(isOk)
			--do nothing
		end);
	else
		--保存游戏
		GameCoreHelper.SaveCurrentArchive(curSeledArchiveIndex, isInGame);
	end
end

function onClickBtnDelete()
	PlayButtonSound();

	--删档提醒
	local _confirmInfo = GameTools.GetGameString("UIArchiveDataSelDlg_Delete");
	ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
		if ret == 1 then
			DoDeleteTagArchive();
		end
	end);
end

function DoDeleteTagArchive()
	if curSeledArchiveInfo == nil then
		return;
	end
	if GameCoreHelper.DeleteTagArchiveData(curSeledArchiveInfo.curArchiveIndex) then
		RefreshArchiveList();
	end
end

function SetTagArchiveSlotSeled(_tagSlot, _isSeled)
    if _tagSlot.bindBtn ~= nil then
        _tagSlot.bindBtn.selected = _isSeled;
    end
end

function SetCurSeledArchive(_tagSlot, _isByPad)
	if curSeledSlot ~= nil then
		SetTagArchiveSlotSeled(curSeledSlot, false);
		curSeledArchiveInfo = nil;
	end
	curSeledSlot = _tagSlot;
	if curSeledSlot ~= nil then
		curSeledArchiveInfo = curSeledSlot.bindArchive;
		SetTagArchiveSlotSeled(curSeledSlot, true);
		SetCurFocusSlot(curSeledSlot, _isByPad);
	end
	UpdateCurSeledArchiveDetailInfo();
end

function SetCurFocusSlot(_tagSlot, _isByPad)
	curFocusSlot = _tagSlot;
	if _tagSlot ~= nil and _tagSlot.navObj ~= nil then
		if not _isByPad then
			listNavCtl:SetFocus(_tagSlot.navObj, true);
		end
		local listIndex = lvItems:GetChildIndex(_tagSlot.bindView);
		if listIndex >= 0 then
			lvItems:ScrollToView(listIndex, true);
		end
		if _tagSlot.slotType >= 1 then
			groupBtns.visible = false;
		else
			groupBtns.visible = true;
		end
	end
end

function SetDetailInfoVisible(_isShow)
	if lvDetails then
		lvDetails.visible = _isShow;
	end
	if groupPreview then
		groupPreview.visible = _isShow;
	end
	if btnConfirm then
		btnConfirm.visible = _isShow;
	end
	if btnDelete then
		btnDelete.visible = _isShow;
	end
end

function GetOrCreateArchiveGroup(saveKey, archiveInfo)
	local tagGroup = archiveDics[saveKey];
	if tagGroup == nil then
		tagGroup = {};
		local tagListItem
		if IsMobileMode then
			tagListItem = lvItems:AddItemFromPool("ui://NewUI/ArchiveUI_GroupChar1M");
		else
			tagListItem = lvItems:AddItemFromPool("ui://NewUI/ArchiveUI_GroupChar1");
		end

		tagGroup.bindView = tagListItem;
		tagGroup.slotType = 1;
		CreateCommonGroupInfo(tagGroup, archiveInfo)

		tagGroup.btnToggle = tagListItem:GetChild("toggle_btn").asButton;

		local isToggle = true;
		tagGroup.btnToggle.selected = isToggle;
		tagGroup.btnToggle.onChanged:Set(function()
			OnToggleTagGroup(tagGroup);
		end);
		UpdateTagGroupToggleView(tagGroup, not isToggle);

		if tagGroup.navObj ~= nil then
			tagGroup.navObj:SetPressedCallback(function()
				tagGroup.btnToggle.selected = not tagGroup.btnToggle.selected;
				OnToggleTagGroup(tagGroup);
			end);
		end

		archiveDics[saveKey] = tagGroup;
	end
	return tagGroup;
end

function CreateAutoSaveGroup()
	local tagGroup = {};
	local tagListItem
	if IsMobileMode then
		tagListItem = lvItems:AddItemFromPool("ui://NewUI/ArchiveUI_GroupAutoSaveM");
	else
		tagListItem = lvItems:AddItemFromPool("ui://NewUI/ArchiveUI_GroupAutoSave");
	end

	tagGroup.bindView = tagListItem;
	tagGroup.slotType = 2;
	CreateCommonGroupInfo(tagGroup, nil)

	local imgAutoSaveTxt = tagListItem:GetChild("img_auosave").asLoader;
	imgAutoSaveTxt.url = GetGameString("ui_autosave_img_path");

	btnToggleAutoSave = tagListItem:GetChild("switch_btn").asButton;

	if tagGroup.navObj ~= nil then
		tagGroup.navObj:SetPressedCallback(function()
			btnToggleAutoSave.selected = not btnToggleAutoSave.selected;
			OnAutoSaveChanged();
		end);
	end

	return tagGroup;
end

function CreateCommonGroupInfo(tagGroup, archiveInfo)
	tagGroup.isGroup = true;
	tagGroup.isGoodArchive = false;
	tagGroup.comRoleInfo = tagGroup.bindView:GetChild("info_box").asCom;
	tagGroup.headImg = tagGroup.comRoleInfo:GetChild("role_head"):GetChild("head_holder").asImage;
	tagGroup.txtClassName = tagGroup.comRoleInfo:GetChild("class_name").asTextField;
	tagGroup.txtRoleName = tagGroup.comRoleInfo:GetChild("title").asTextField;
	tagGroup.comExpertMark = tagGroup.comRoleInfo:GetChild("expert_mark").asCom;
	tagGroup.comExpertMark.visible = false;
	tagGroup.selFrame = tagGroup.bindView:GetChild("sel_frame").asImage;
	UpdateCommonGroupInfo(tagGroup, archiveInfo);

	tagGroup.subItems = {};
	tagGroup.subItemCount = 0;

	--建立按键导航
	thisNavObj = listNavCtl:AddNavObjByGComponent(tagGroup.bindView.asCom);
	thisNavObj:SetFocusEventCallback(function()
		SetCurFocusSlot(tagGroup, true);
	end, nil);
	tagGroup.navObj = thisNavObj;
	if lastNavObj ~= nil then
		thisNavObj:SetNavUp(lastNavObj);
	end
	lastNavObj = thisNavObj;
end

function UpdateCommonGroupInfo(tagGroup, archiveInfo)
	if archiveInfo ~= nil then
		local nameInfo = archiveInfo.char_name;
		tagGroup.txtRoleName.text = nameInfo;
		tagGroup.comExpertMark.visible = false;
		if archiveInfo.is_expert then
			tagGroup.comExpertMark.visible = true;
		end
		if not IsEmptyOrNil(archiveInfo.player_class) then
			tagGroup.txtClassName.text = GameCoreHelper.GetStoryClassName(archiveInfo.player_class);
		else
			tagGroup.txtClassName.text = "";
		end
		if not IsEmptyOrNil(archiveInfo.head_info) then
			CS.GUIHelper.GenerateRoleHeadAvataImage(archiveInfo.head_info, tagGroup.headImg);
			tagGroup.headImg = true;
		else
			tagGroup.headImg = false;
		end
		tagGroup.comRoleInfo.visible = true;
	else
		tagGroup.comRoleInfo.visible = false;
	end
end

function AddArchiveInfoSlotToGroup(tagGroup, tagArchive)
	local tagListObj
	if IsMobileMode then
		tagListObj = lvItems:AddItemFromPool("ui://NewUI/ArchiveUI_SaveInfoBar1M");
	else
		tagListObj = lvItems:AddItemFromPool("ui://NewUI/ArchiveUI_SaveInfoBar1");
	end
	local compBindInfo = tagListObj.data;
	if compBindInfo == nil then
		compBindInfo = {};
		compBindInfo.bindView = tagListObj;
		compBindInfo.slotType = 0;
		compBindInfo.isGoodArchive = false;
		compBindInfo.bindBtn = tagListObj.asButton;
		compBindInfo.isGroup = false;

		compBindInfo.groupInfo = tagListObj:GetChild("g_info").asGroup;
		compBindInfo.txtLevel = tagListObj:GetChildInGroup(compBindInfo.groupInfo, "level").asTextField;
		compBindInfo.txtDayInfo = tagListObj:GetChildInGroup(compBindInfo.groupInfo, "day_info").asTextField;
		compBindInfo.alertMark = tagListObj:GetChildInGroup(compBindInfo.groupInfo, "icon_warning").asCom;

		compBindInfo.groupNew = tagListObj:GetChild("g_newsave").asGroup;
		compBindInfo.txtNewArchive = tagListObj:GetChildInGroup(compBindInfo.groupNew, "txt_newsave").asTextField;
		compBindInfo.groupNew.visible = false;

		compBindInfo.selFrame = tagListObj:GetChild("sel_frame").asImage;

		local bindSlot = compBindInfo;
		compBindInfo.bindBtn.onClick:Set(function()
			OnClickTagArchive(bindSlot);
		end);
		tagListObj.data = compBindInfo;
	end

	compBindInfo.bindArchive = tagArchive;

	tagGroup.subItems[tagGroup.subItemCount] = compBindInfo;
	tagGroup.subItemCount = tagGroup.subItemCount + 1;

	if tagArchive ~= nil then
		if not tagArchive.isNewSave then
			local lvStr;
			if tagArchive.player_level > 0 then
				lvStr = tostring(tagArchive.player_level);
			else
				lvStr = "??";
			end
			compBindInfo.txtLevel.text = "LV." .. lvStr;
			compBindInfo.txtDayInfo.text = GetGameDayInfo(tagArchive.game_time);

			local tagVersion = tagArchive:GetCreateVersion();
			if GameCoreHelper.IsVersionExpired(tagVersion) then
				compBindInfo.alertMark.visible = true;
				compBindInfo.alertMark.tooltips = GameCoreHelper.StringFormat(GetGameString("UIArchiveDataSelDlg_UpdateItemList_4"), tagVersion);
			else
				compBindInfo.alertMark.visible = false;
			end

			compBindInfo.groupInfo.visible = true;
			compBindInfo.groupNew.visible = false;
		else
			compBindInfo.groupInfo.visible = false;
			compBindInfo.groupNew.visible = true;

			if isSaveSlotFull then
				compBindInfo.txtNewArchive.text = GetGameString("lua_script_str_281");
			else
				compBindInfo.txtNewArchive.text = GetGameString("lua_script_str_280");
			end
		end
		compBindInfo.isGoodArchive = true;
	end

	--建立按键导航
	thisNavObj = listNavCtl:AddNavObjByGButton(compBindInfo.bindBtn);
	thisNavObj:SetFocusEventCallback(function()
		SetCurSeledArchive(compBindInfo, true);
	end, nil);
	thisNavObj:SetPressedCallback(function()
		btnConfirm:FireClick(true, true);
	end);
	compBindInfo.navObj = thisNavObj;
	if lastNavObj ~= nil then
		thisNavObj:SetNavUp(lastNavObj);
	end
	lastNavObj = thisNavObj;

	return compBindInfo;
end

function GetGameDayInfo(_gameTime)
	local gameDays = math.floor(_gameTime + 1.0);
	return GameCoreHelper.StringFormat(GetGameString("UIArchiveDataSelDlg_GetGameTimeStr"), gameDays);
end

function OnToggleTagGroup(tagGroup)
	PlayButtonSound();

	UpdateTagGroupToggleView(tagGroup, not tagGroup.btnToggle.selected);
end

function UpdateTagGroupToggleView(tagGroup, isToggle)
	local tagItem;
	if tagGroup.subItemCount ~= nil and tagGroup.subItemCount > 0 then
		for index=0,tagGroup.subItemCount-1 do
			tagItem = tagGroup.subItems[index];
			tagItem.bindBtn.visible = not isToggle;
		end
	end
end

function OnClickTagArchive(tagArchiveSlot)
	PlayButtonSound();

	SetCurSeledArchive(tagArchiveSlot, false);
end

function UpdateCurSeledArchiveDetailInfo()
	if curSeledArchiveInfo ~= nil then
		if curSeledArchiveInfo ~= lastArchiveInfo then
			lvDetails.visible = true;
			groupBtns.visible = true;
			btnConfirm.visible = true;
			if curSeledArchiveInfo.isNewSave then
				btnDelete.visible = false;
			else
				btnDelete.visible = true;
			end
			btnConfirm.enabled = true;
			if curOpMode == 1 then
				btnConfirm.text = GetGameString("lua_script_str_140");
			else
				if curSeledArchiveInfo.isNewSave then
					btnConfirm.text = GetGameString("lua_script_str_141");
					if isSaveSlotFull then
						btnConfirm.enabled = false;
					end
				else
					btnConfirm.text = GetGameString("lua_script_str_142");
				end
			end

			--更新文字信息
			lvDetails.numItems = 0;
			local strLine = GetGameString("lua_script_str_143") .. curSeledArchiveInfo.char_name;
			AddArchiveDetailInfoText(strLine, 0);
			if isShowSaveIndex then
				strLine = GameCoreHelper.StringFormat(GetGameString("UIArchiveDataSelDlg_UpdateCurArchiveDetail"), curSeledArchiveInfo.curArchiveIndex);
				AddArchiveDetailInfoText(strLine, 0);
			end
			strLine = GameCoreHelper.StringFormat(GetGameString("UIArchiveDataSelDlg_UpdateCurArchiveDetail_1"), curSeledArchiveInfo.save_datetime);
			AddArchiveDetailInfoText(strLine, 0);
			strLine = GameCoreHelper.StringFormat(GetGameString("UIArchiveDataSelDlg_UpdateCurArchiveDetail_3"), curSeledArchiveInfo.location_info);
			AddArchiveDetailInfoText(strLine, 0);
			strLine = GameCoreHelper.StringFormat(GetGameString("UIArchiveDataSelDlg_UpdateCurArchiveDetail_4"), GetGameDayInfo(curSeledArchiveInfo.game_time));
			AddArchiveDetailInfoText(strLine, 0);

			local clientVersion;
			if not IsEmptyOrNil(curSeledArchiveInfo.create_version) then
				clientVersion = curSeledArchiveInfo.create_version;
			else
				clientVersion = GetGameString("UIArchiveDataSelDlg_UpdateCurArchiveDetail_7");
			end
			strLine = GameCoreHelper.StringFormat(GetGameString("UIArchiveDataSelDlg_UpdateCurArchiveDetail_5"), clientVersion);
			local versionCheck = 0;
			if GameCoreHelper.IsVersionExpired(clientVersion) then
				versionCheck = 2;
			end
			AddArchiveDetailInfoText(strLine, versionCheck);

			local allMods = curSeledArchiveInfo:GetAllModIds();
			curSeledArchiveInfo.isModEnvError = false;
			if allMods ~= nil and allMods.Count > 0 then
				AddArchiveDetailInfoText(GetGameString("lua_script_str_144"), 0);
				local lineStyle;
				local tagModID;
				local tagModName;
				for index=0,allMods.Count - 1 do
					tagModID = allMods[index];
					tagModName = curSeledArchiveInfo:GetModName(tagModID);
					if GameCoreHelper.IsModActived(tagModID) then
						lineStyle = 1;
					else
						lineStyle = 2;
						curSeledArchiveInfo.isModEnvError = true;
					end
					AddArchiveDetailInfoText(tagModName, lineStyle);
				end
			end

			--显示预览图
			controlNoPreview.selectedIndex = 1;
			groupPreview.visible = true;
			imgPreviewHolder.visible = false;
			if not curSeledArchiveInfo.isNewSave then
				CS.GUIHelper.GenerateArchivePreviewImage(curSeledArchiveInfo.curArchiveIndex, imgPreviewHolder, function(ret)
					if ret then
						imgPreviewHolder.visible = true;
						controlNoPreview.selectedIndex = 0;
					end
				end);
			end
		end
	else
		SetDetailInfoVisible(false);
	end
	lastArchiveInfo = curSeledArchiveInfo;
end

function AddArchiveDetailInfoText(_txtInfo, _style)
	local newLabel = lvDetails:AddItemFromPool().asLabel;
	if newLabel ~= nil then
		newLabel.title = CS.GUIHelper.ConvertUGUIStr(_txtInfo);
		if _style == 1 then
			newLabel.titleColor = colorPass;
		elseif _style == 2 then
			newLabel.titleColor = colorError;
		else
			newLabel.titleColor = colorNormal;
		end
	end
end

function OnAutoSaveChanged()
	PlayButtonSound();

	if autosaveGroup ~= nil then
		GameCoreHelper.SetIsDisableAutoSave(not btnToggleAutoSave.selected);
		UpdateTagGroupToggleView(autosaveGroup, not btnToggleAutoSave.selected);
	end
end