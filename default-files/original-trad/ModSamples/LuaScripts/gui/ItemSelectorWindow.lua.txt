require("gui/WindowUtils")
require("GameUtils")

local GameCoreHelper = CS.GameCoreHelper

--页面访问控件
local contentPane

local btnClose;
local btnConfirm;

local txtTitle;
local lvAllSlots;

local selCount = 1;

local allItemsList;
local playerRole;

local allSelItems = nil;

local StringFormat = GameCoreHelper.StringFormat;

--窗体初始化时
function onInit()
	contentPane = self.contentPane

	playerRole = GameCoreHelper.GetPlayerRole();

	txtTitle = contentPane:GetChild("title").asTextField;
	lvAllSlots = contentPane:GetChild("items_list").asList;

	btnClose = contentPane:GetChild("btn_close").asButton;
	btnConfirm = contentPane:GetChild("btn_confirm").asButton;

	--绑定按钮事件
	btnClose.onClick:Set(onClickBackBtn);
	btnConfirm.onClick:Set(onClickConfirmBtn);

	if IsMobileMode then
		CreateQuickCloseBg(contentPane, onClickBackBtn)
	end
end

function SetWindowParams(args)
	txtTitle.text = args[0];
end

function onCustomInit()
	allItemsList = self.CustomData;
	selCount = self.CustomArgObj1;
	if selCount <= 0 then
		selCount = 1;
	end

	UpdateCurSelectList();
end

--窗体开始显示并播放显示动画时
function onDoShowAnimation()
	CommonShowWindowAnim(self, onShown)
end

--窗体播放完显示动画时
function onShown()
	--增加计时器事件
	--CS.FairyGUI.Timers.inst:Add(timerTickInterval, 0, onTimerTickUpdate);
end

--窗体开始播放关闭动画时
function onDoHideAnimation()
	CommonHideWindowAnim(self, onHideAnimationDone)
end

function onHideAnimationDone()
	self:HideImmediately();
end

--窗体隐藏时
function onHide()
	--移除计时器事件
	--CS.FairyGUI.Timers.inst:Remove(onTimerTickUpdate);
end

--按下完成按钮时
function onClickBackBtn()
	PlayButtonSound();

	FinishSelect(nil);
	self:Hide();
end

--按下完成按钮时
function onClickConfirmBtn()
	PlayButtonSound()
	if ComfirmSelect() then
		local selList = GameCoreHelper.GetEmptyGameItemList();
		if allSelItems ~= nil then
			for k,v in pairs(allSelItems) do
				if v.isSeled and v.itemInfo ~= nil then
					selList:Add(v.itemInfo);
				end
			end
		end
		FinishSelect(selList);
		self:Hide();
	end
end

function ComfirmSelect()
	--if GetCurSeledCount() < 1 then
	--	local _alertInfo = GetGameString("lua_script_str_250");
	--	ShowToastInfo(_alertInfo, 3);
	--	return false;
    --end

	return true
end

function FinishSelect(_selList)
	local _argVal = self:GetRuntimeArgVal();
	if _argVal ~= nil then
		_argVal.customObj = _selList;
	end
end

function onTimerTickUpdate()

end

function UpdateCurSelectList()
	if allItemsList == nil then
		return;
	end

	local curSlotCount = allItemsList.Count;
	if curSlotCount < 30 then
		curSlotCount = 30;
	end
	lvAllSlots.numItems = curSlotCount;

	allSelItems = {};
	local tagItemInfo;
	local tagSlotInfo;
	local tagSlotComp;
	local defSeledSlot = nil;
	for index=0,lvAllSlots.numItems-1 do
		tagSlotComp = lvAllSlots:GetChildAt(index).asCom;
		tagSlotInfo = CreateSelectableItemSlot(tagSlotComp)
		if index >= allItemsList.Count then
			tagItemInfo = nil;
		else
			tagItemInfo = allItemsList[index];

			if defSeledSlot == nil then
				defSeledSlot = tagSlotInfo;
			end
		end
		tagSlotInfo.itemInfo = tagItemInfo;
		tagSlotInfo.bindSlot:SetBindItem(tagItemInfo);
		SetItemSlotSelected(tagSlotInfo, false);
		if tagSlotInfo ~= nil then
			table.insert(allSelItems, tagSlotInfo);
		end
	end

	if defSeledSlot ~= nil then
		SelectTagItemSlot(defSeledSlot, true);
	end

end

function CreateSelectableItemSlot(tagSlotComp, _slotIndex)
	local compBindInfo = tagSlotComp.data;
	if compBindInfo == nil then
		compBindInfo = {};
		compBindInfo.bindBtn = tagSlotComp:GetChild("slot").asButton;
		compBindInfo.selOnFrame = tagSlotComp:GetChild("seled_on").asImage;
		compBindInfo.bindSlot = InitCommonItemSlot(compBindInfo.bindBtn, _slotIndex, 1, nil, false);
		compBindInfo.bindSlot:SetItemLeftClickCallback(function()
            OnClickTagItemSlot(compBindInfo);
        end);
		tagSlotComp.data = compBindInfo;
	end
	return compBindInfo;
end

function OnClickTagItemSlot(_tagSlot)
	PlayButtonSound();

	if _tagSlot.itemInfo ~= nil then
		SelectTagItemSlot(_tagSlot, not _tagSlot.isSeled);
	end
end

function RemoveCurSelections(_removeCount)
	local curRemoveCount = 0;
	if allSelItems ~= nil then
		for k,v in pairs(allSelItems) do
			if _removeCount > 0 and curRemoveCount >= _removeCount then
				break;
			end
			if v.isSeled then
				SetItemSlotSelected(v, false);
				curRemoveCount = curRemoveCount + 1;
			end
		end
	end
end

function GetCurSeledCount()
	local curCount = 0;
	if allSelItems ~= nil then
		for k,v in pairs(allSelItems) do
			if v.isSeled then
				curCount = curCount + 1;
			end
		end
	end
	return curCount;
end

function SetItemSlotSelected(_tagSlot, _isSeled)
	if _tagSlot.itemInfo == nil then
		_isSeled = false;
	end
    if _tagSlot.selOnFrame ~= nil then
        _tagSlot.selOnFrame.visible = _isSeled;
    end
	_tagSlot.isSeled = _isSeled;
end

function SelectTagItemSlot(_tagSlot, _isSel)
	if _tagSlot == nil then
		return;
	end

	if _isSel then
		if selCount <= 1 then
			RemoveCurSelections(-1);
			SetItemSlotSelected(_tagSlot, true);
		else
			local _curCount = GetCurSeledCount();
			if _curCount >= selCount then
				RemoveCurSelections(_curCount - selCount + 1);
			end
			SetItemSlotSelected(_tagSlot, true);
		end
	else
		SetItemSlotSelected(_tagSlot, false);
	end
end
