require("gui/WindowUtils")
require("GameUtils")

local GameCoreHelper = CS.GameCoreHelper
local GUIHelper = CS.GUIHelper

local g = {}

---@type FGUIWindowLua
local self = self

--窗体初始化时
function onInit()
    print("FairyGUI Window onInit...")

    ---@type FairyGUI.GComponent
    g.contentPane = self.contentPane

    g.comUnitRaw = g.contentPane:GetChild("unit_raw").asButton
    g.cardRaw = CreateSoldierSlotInfoByCardPUI(g.comUnitRaw)
    g.comUnitUpgrade = g.contentPane:GetChild("unit_upgrade").asButton
    g.cardUpgrade = CreateSoldierSlotInfoByCardPUI(g.comUnitUpgrade)

    g.txtNumRaw = g.contentPane:GetChild("txt_num_raw").asTextField
    g.txtNumUpgrade = g.contentPane:GetChild("txt_num_upgrade").asTextField

    g.btnPlus = g.contentPane:GetChild("btn_plus").asButton
    g.btnMinus = g.contentPane:GetChild("btn_minus").asButton

    g.slider = g.contentPane:GetChild("slider").asSlider

    g.txtMax = g.contentPane:GetChild("txt_max").asTextField
    g.txtMin = g.contentPane:GetChild("txt_min").asTextField

    g.inNum = g.contentPane:GetChild("input_curnum").asTextField

    g.curNum = 0
    g.minNum = 0
    g.maxNum = 0

    g.btnClose = g.contentPane:GetChild("btn_close").asButton
    g.btnConfirm = g.contentPane:GetChild("btn_confirm").asButton

    g.lvMatItems = g.contentPane:GetChild("list_res").asList

    g.ctlUpgradeMats = CreateStandardResBoxByList(g.lvMatItems, false);

    self:SetBackkeyButton(g.btnClose)

    g.slider.onChanged:Add(onSliderChanged)
    g.inNum.onChanged:Add(onInputChanged)
    g.btnClose.onClick:Set(onClickBackBtn)
    g.btnConfirm.onClick:Set(onClickConfirmBtn)

    g.btnPlus.onClick:Set(onClickPlusBtn)
    g.btnMinus.onClick:Set(onClickMinusBtn)
end

--设置窗口参数
--被调用 window:SetWindowParams(arg1.arg2,...)
---@param args string[] 参数数组
function SetWindowParams(args)
    g.cardId = args[0]
    g.upgradeCardId = args[1]

    g.dataRawCard = GameCoreHelper.CreateCardByInfo(GameCoreHelper.GetCardInfoByID(g.cardId));
    g.dataUpgradeCard = GameCoreHelper.CreateCardByInfo(GameCoreHelper.GetCardInfoByID(g.upgradeCardId));
end

--被调用 window:InitByCustomDatas() 时
function onCustomInit()
    ---@type System.Collections.Generic.List
    g.cards = self.CustomData

    SetSoldierSlotBindInfoPUI(g.cardRaw, g.dataRawCard)
    UpdateSoldierSlotPUI(g.cardRaw, false, true)
    SetSoldierSlotBindInfoPUI(g.cardUpgrade, g.dataUpgradeCard)
    UpdateSoldierSlotPUI(g.cardUpgrade, false, true)

    g.minNum = 1
    g.maxNum = GetCardsCountCanUpgrade(g.cards, g.upgradeCardId)

    g.slider.max = g.maxNum
    g.slider.min = g.minNum

    setNumber(1)
end

function onSliderChanged()
    local num = math.floor(g.slider.value)
    setNumber(num)
end

function onInputChanged()
    local num = tonumber(g.inNum.text)
    setNumber(num)
end

function setNumber(num)
    if num == nil then
        return
    end

    local wholeNum = math.floor(num)
    g.curNum = Clamp(wholeNum, g.minNum, g.maxNum)
    refreshNum()
end

function refreshNum()
    g.slider.value = g.curNum
    g.inNum.text = tostring(g.curNum)

    g.txtNumRaw.text = "x" .. tostring(g.maxNum - g.curNum)
    g.txtNumUpgrade.text = "x" .. tostring(g.curNum)

    g.upgradeMatItems = CS.CardLogic.GetPlayerCardUpgradeCost(g.dataRawCard, g.dataUpgradeCard);

    for i = 0, g.upgradeMatItems.Count - 1 do
        ---@type HanFramework.GameItemData
        local item = g.upgradeMatItems[i]
        item.itemCount = item.itemCount * g.curNum
    end

    g.ctlUpgradeMats:UpdateValsByItemList(g.upgradeMatItems, true);

    if g.upgradeMatItems ~= nil then
        if not GameCoreHelper.CheckInventoryForItems(g.upgradeMatItems) then
            g.btnConfirm.enabled = false;
        else
            g.btnConfirm.enabled = true;
        end
    end
end

function onClickBackBtn()
    PlayButtonSound();

    self:Hide()
end

function onClickConfirmBtn()
    PlayButtonSound();

    local _confirmInfo = GetGameString("lua_CardUpgradeWindow_onClickConfirmBtn",
        GetCardCountDesc(g.dataRawCard, g.curNum),
        GetCardCountDesc(g.dataUpgradeCard, g.curNum))

    ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
        if ret == 1 then
            local upgradeCount = g.curNum;
            local playerTeam = GameCoreHelper.GetPlayerTeam();
            for i = 0, g.cards.Count do
                if upgradeCount <= 0 then
                    break;
                end

                local card = g.cards[i];
                -- 不满足升级条件
                if not CS.CardLogic.CouldUpgradeTo(card, g.upgradeCardId) then
                    goto upgrade_confirm_continue
                end

                -- 升级
                upgradeCount = upgradeCount - 1
                local upgradeCard = GameCoreHelper.CreateCardByInfo(GameCoreHelper.GetCardInfoByID(g.upgradeCardId))
                CS.CardLogic.ReplacePlayerCardByUpgrade(card, upgradeCard)

                ::upgrade_confirm_continue::
            end

            if g.upgradeMatItems ~= nil then
                for index=0, g.upgradeMatItems.Count - 1 do
                    local tagMat = g.upgradeMatItems[index];
                    GameCoreHelper.RemoveItemsFormPlayerInv(tagMat.itemID, tagMat.itemCount, false);
                end
            end

            self.CurDialogResult = 1
            self:Hide()

            local sInfo = GetGameString("UICardUpgradeDlg_Confirm");
            ShowToastInfo(sInfo, 2);
            GameCoreHelper.PlayAudio("LevelUp");
        end
    end)
end

function onClickPlusBtn()
    PlayButtonSound();

    setNumber(g.curNum + 1)
end

function onClickMinusBtn()
    PlayButtonSound();

    setNumber(g.curNum - 1)
end