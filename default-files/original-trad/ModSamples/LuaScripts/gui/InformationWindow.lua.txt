require("gui/WindowUtils")
require("GameUtils")
require("GameTools")

--require("LuaPanda").start("127.0.0.1",8818)

local g = {}

local GameCoreHelper = CS.GameCoreHelper
local ArchiveData = CS.HanFramework.ArchiveData
local GameUtils = CS.GameUtils
local GUIHelper = CS.GUIHelper
local GameShared = CS.GameShared
local GameTools = CS.GameTools
local FairyGUI = CS.FairyGUI

local StringFormat = GameCoreHelper.StringFormat
local GetLanString = GetLanString
local GetGameString = GetGameString

local colorRed = GUIHelper.GetColor("990000")
local colorGreen = GUIHelper.GetColor("339900")
---* 关系条缓动时间
local tweenProgTime = 0.3

local urlGroup = "ui://NewUI/InformationGroup"
local urlItem = "ui://NewUI/InformationItem"
local urlSubItem = "ui://NewUI/InformationSubItem"
local urlSubItemSoldier = "ui://NewUI/InformationSubItemSoldier"

local urlNormalBg = "ui://NewUI/ui_info_item_camp_panel_normal"

local urlLabelInfo = "ui://NewUI/InformationDescLabel"

local urlLabelTitle = "ui://NewUI/ListItemInfoTitleInfo1"

if IsMobileMode then
    urlGroup = "ui://NewUI/InformationGroupM"
    urlItem = "ui://NewUI/InformationItemM"

    urlSubItem = "ui://NewUI/InformationSubItemM"
    urlSubItemSoldier = "ui://NewUI/InformationSubItemSoldierM"
    urlLabelInfo = "ui://NewUI/InformationDescLabelM"
    urlLabelTitle = "ui://NewUI/ListItemInfoTitleInfo1M"
end

---* 兵种框定义
local urlSoldierFrame = {
    {
        left = "ui://NewUI/ui_info_unitbox_s1_left",
        right = "ui://NewUI/ui_info_unitbox_s1_right"
    },
    {
        left = "ui://NewUI/ui_info_unitbox_s2_left",
        right = "ui://NewUI/ui_info_unitbox_s2_right"
    },
    {
        left = "ui://NewUI/ui_info_unitbox_s3_left",
        right = "ui://NewUI/ui_info_unitbox_s3_right"
    },
    {
        left = "ui://NewUI/ui_info_unitbox_s4_left",
        right = "ui://NewUI/ui_info_unitbox_s4_right"
    },
    {
        left = "ui://NewUI/ui_info_unitbox_s5_left",
        right = "ui://NewUI/ui_info_unitbox_s5_right"
    },
    {
        left = "ui://NewUI/ui_info_unitbox_s6_left",
        right = "ui://NewUI/ui_info_unitbox_s6_right"
    },
}

---* 名声类型
---@see HanFramework.RoleRuntimeData.ReputationTarget
local ReputationTarget = {
    ---* 阵营
    Camp = 0,
    ---* 角色
    Role = 1,
    ---* 地点
    Place = 2,
}

---* 子按钮类型
---* 主要控制左侧显示内容
---@class subItemTypeCode
local subItemTypeCode = {
    ---* 阵营
    Camp = 0,
    ---* 角色
    Role = 1,
    ---* 地点
    Place = 2,
    ---* 建筑
    Building = 3,
    ---* 物品
    Item = 4
}

---* 子按钮右侧类型
---* 主要控制右侧显示内容
---@class subItemRightTypeCode
local subItemRightTypeCode = {
    ---* 无
    None = 0,
    ---* 显示好感度
    ShowRep = 1,
    ---* 显示带旗帜描述
    ShowMainDesc = 2,
    ---* 显示描述
    ShowDesc = 3,
    ---* 显示建筑图
    ShowBuilding = 4,
    ---* 显示物品图
    ShowItem = 5,
}

function onInit()

    ---@type FairyGUI.GComponent
    g.contentPane = self.contentPane

    -- 设置返回键
    g.btnClose = g.contentPane:GetChild("btn_close").asButton
    g.btnClose.onClick:Add(onClickClose)

    self:SetBackkeyButton(g.btnClose);

    -- 缓存信息
    cacheInformation()

    -- 绑定控件
    g.listInfo = g.contentPane:GetChild("list_info").asList

    -- 初始化虚拟列表
    initVirtualInfoList()

    -- 添加列表内容
    bindInfoListVirtual(GetGameString("lua_script_str_321"), g.campInfos)
    bindInfoListVirtual(GetGameString("lua_script_str_322"), g.roleInfos)
    bindInfoListVirtual(GetGameString("lua_script_str_323"), g.placeInfos)
    bindInfoListVirtual(GetGameString("lua_script_str_324"), g.roleBarGirls)

    g.ctlPaeg = g.contentPane:GetController("page")
    g.transFade = g.contentPane:GetTransition("fadeIn")

    -- 绑定页面
    g.pageCamp = bindCampPage(g.contentPane:GetChild("page_camp"))
    g.pageRole = bindRolePage(g.contentPane:GetChild("page_role"))
    g.pagePlace = bindPlacePage(g.contentPane:GetChild("page_place"))

    g.btnReturn = g.contentPane:GetChild("btn_return").asButton
    g.btnReturn.onClick:Set(onClickReturn)

    -- 只有第一次打开面板才播放动画
    g.listInfoVirtual.playTween = true
    refreshInfoList()
    -- 默认选中第一个势力
    selectInfo(g.campInfos[1], false)
    g.listInfoVirtual.playTween = false

    -- 强制滚动到最上方
    g.listInfo.scrollPane:ScrollTop(false)
end

function onHide()
    -- 释放缓存的NTexture
    disposeCache()
end

function cacheInformation()
    ---* 玩家
    g.player = GameCoreHelper.GetPlayerRole()
    ---* 历史记录
    g.history = {}
    ---@type campInfo|roleInfo|placeInfo
    ---* 当前选中信息
    g.selectedInfo = nil
    ---* 是否能显示地点面板中的驻军信息
    g.canShowSoldiersInPlace = g.player:GetRoleStat("dip_知己知彼") >= 1
    ---* 是否能显示所有人物地点的信息
    g.canShowAllInfo = g.player:GetRoleStat("dip_知己知彼") >= 2
    cacheCampInfo()
    cacheRoleInfo()
    cachePlaceInfo()
end

function disposeCache()
    for key, value in pairs(g.roleInfos) do
        if value.cacheTexture ~= nil then
            value.cacheTexture:Dispose()
        end
    end
    for key, value in pairs(g.roleBarGirls) do
        if value.cacheTexture ~= nil then
            value.cacheTexture:Dispose()
        end
    end

    CS.GUIHelper.ReleaseCachedGuiTexs();
end

---* 阵营是否可见
---@param tagCamp HanFramework.GameCampRtData
function campCanSee(tagCamp)
    if tagCamp:IsHidden() then
        return false
    end

    if tagCamp.CurState == 1 then
        return false
    end

    return true
end

---* 角色是否可见
---@param tagRole HanFramework.RoleRuntimeData
function roleCanSee(tagRole)
    if tagRole:IsPlayer() then
        return true
    end

    if tagRole.roleState < 0 then
        return false
    end

    ---* 角色是否活跃，若角色未活跃且未被主角激活则不显示
    local isStateActive = tagRole.activeState == 0
    local isActive = tagRole:IsPlayerActive()
    if not isStateActive and not isActive then
        return false
    end

    return isActive or g.canShowAllInfo
end

---* 地点是否可见
---@param tagPlace HanFramework.GamePlaceRtData
function placeCanSee(tagPlace)
    -- 不是城市或村庄地区
    if not tagPlace:IsCity() and not tagPlace:IsVillage() then
        return false
    end

    -- 地图未激活
    if not tagPlace:IsPlaceDefinedInMap() then
        return false
    end

    local isActive = tagPlace:IsPlayerActive()
    return isActive or g.canShowAllInfo
end

function cacheCampInfo()
    ---* 阵营信息列表
    ---@type campInfo[]
    g.campInfos = {}

    ---@type campInfo
    local playerCampInfos = {}
    ---@type campInfo[]
    local campInfos = {}
    ---@type campInfo[]
    local campStoryInfos = {}

    ---@param tagCamp HanFramework.GameCampRtData
    for key, tagCamp in pairs(ArchiveData.Current.gameCampList) do
        if not campCanSee(tagCamp) then goto cacheCampInfoContinue end

        local campInfo = createCampInfo(tagCamp)

        if tagCamp:IsPlayerOwnedCamp() or tagCamp:IsPlayerInCamp() then
            -- 万一玩家不止是一个阵营的首领呢
            table.insert(playerCampInfos, campInfo)
        elseif tagCamp:IsStoryCamp() then
            table.insert(campStoryInfos, campInfo)
        else
            table.insert(campInfos, campInfo)
        end

        ::cacheCampInfoContinue::
    end

    -- 按阵营类型排序
    for index, value in ipairs(playerCampInfos) do
        table.insert(g.campInfos, value)
    end
    for index, value in ipairs(campInfos) do
        table.insert(g.campInfos, value)
    end
    for index, value in ipairs(campStoryInfos) do
        table.insert(g.campInfos, value)
    end

    -- 缓存阵营排序表
    g.campSortIndexDic = {}
    local index = 1
    for key, value in pairs(g.campInfos) do
        g.campSortIndexDic[value.campId] = index
        index = index + 1
    end
end

---@param tagCamp HanFramework.GameCampRtData
function createCampInfo(tagCamp)
    local repVal = ArchiveData.Current.playerRoleInfo:GetRep(ReputationTarget.Camp, tagCamp.CampID);
    ---@class campInfo
    local campInfo = {
        ---* 阵营ID
        campId = tagCamp.CampID,
        ---* 阵营数据
        ---@type HanFramework.GameCampRtData
        rtData = tagCamp,
        ---* 阵营好感
        repVal = repVal,
        ---* 信息类型
        type = ReputationTarget.Camp,
    }

    return campInfo
end

---@param tagCamp HanFramework.GameCampRtData
function getCampSortIndex(tagCamp)
    if tagCamp == nil then
        return -1
    end
    local sortIndex = g.campSortIndexDic[tagCamp.CampID] or 0
    local index = #g.campInfos + 1 - sortIndex
    return index or 0
end

function cacheRoleInfo()
    ---@type roleInfo[]
    g.roleInfos = {}
    ---@type roleInfo[]
    g.roleBarGirls = {}

    ---@param tagRole HanFramework.RoleRuntimeData
    for key, tagRole in pairs(ArchiveData.Current.RoleInfoList) do
        if not roleCanSee(tagRole) then goto cacheRoleInfoContinue end

        local roleInfo = createRoleInfo(tagRole)

        if tagRole:getRoleTemplate().roleType == "BARGIRL" then
            -- 酒馆女郎
            table.insert(g.roleBarGirls, roleInfo)
        else
            -- 领主或其他角色
            table.insert(g.roleInfos, roleInfo)
        end

        ::cacheRoleInfoContinue::
    end

    --* 角色按阵营顺序排序
    table.sort(g.roleInfos, function(a, b)
        local orderA = getCampSortIndex(a.rtData:GetRoleCamp())
        local orderB = getCampSortIndex(b.rtData:GetRoleCamp())
        orderA = orderA + (a.rtData:IsPlayer() and 1000 or 0)
        orderB = orderB + (b.rtData:IsPlayer() and 1000 or 0)
        return orderA > orderB
    end)
end

---@param tagRole HanFramework.RoleRuntimeData
function createRoleInfo(tagRole)
    local repVal = ArchiveData.Current.playerRoleInfo:GetRep(ReputationTarget.Role, tagRole.roleID)
    ---@class roleInfo
    local roleInfo = {
        ---* 角色ID
        roleId = tagRole.roleID,
        ---* 角色数据
        rtData = tagRole,
        ---* 角色好感
        repVal = repVal,
        ---* 信息类型
        type = ReputationTarget.Role,
        ---* 缓存贴图
        ---@type FairyGUI.NTexture
        cacheTexture = nil
    }
    return roleInfo
end

function cachePlaceInfo()
    ---@type placeInfo[]
    g.placeInfos = {}

    ---@param tagPlace HanFramework.GamePlaceRtData
    for key, tagPlace in pairs(ArchiveData.Current.gamePlaceList) do
        -- 不是城市或村庄地区
        if not placeCanSee(tagPlace) then goto cachePlaceInfoContinue end

        local placeInfo = createPlaceInfo(tagPlace)

        table.insert(g.placeInfos, placeInfo)
        ::cachePlaceInfoContinue::
    end

    --* 地点按阵营顺序排序
    table.sort(g.placeInfos, function(a, b)
        return getCampSortIndex(a.rtData:getCampInfo()) > getCampSortIndex(b.rtData:getCampInfo())
    end)
end

---@param tagPlace HanFramework.GamePlaceRtData
function createPlaceInfo(tagPlace)
    local repVal = ArchiveData.Current.playerRoleInfo:GetRep(ReputationTarget.Place, tagPlace.PlaceID)
    ---@class placeInfo
    local placeInfo = {
        ---* 地点ID
        placeId = tagPlace.PlaceID,
        ---* 地点数据
        rtData = tagPlace,
        ---* 地点好感
        repVal = repVal,
        ---* 信息类型
        type = ReputationTarget.Place,
    }
    return placeInfo
end

---* 虚拟列表初始化
function initVirtualInfoList()
    g.listInfo:RemoveChildrenToPool()
    g.listInfo.itemRenderer = itemRendererVirtual
    g.listInfo.itemProvider = itemProviderVirtual
    g.listInfo:SetVirtual()

    g.listInfoVirtual = {
        ---* 储存所有info的list
        infoLists = {},
        playTween = true,
    }

    g.listInfoVirtual.refresh = function()
        ---* 计算出正确的子物体数量
        local num = #g.listInfoVirtual.infoLists
        for index, value in ipairs(g.listInfoVirtual.infoLists) do
            if not value.isFold then
                num = num + #value.list
            end
        end
        g.listInfo.numItems = num
    end
end

function bindInfoListVirtual(title, bindData)
    local infoList = {
        title = title,
        list = bindData,
        isFold = false
    }

    table.insert(g.listInfoVirtual.infoLists, infoList)
end

---* 刷新虚拟列表
function refreshInfoList()
    -- 刷新所有列表
    g.listInfoVirtual.refresh()
end

---* 虚拟列表刷新回调
function itemRendererVirtual(index, obj)
    local low = -1
    local up = -1
    for key, value in pairs(g.listInfoVirtual.infoLists) do
        low = up + 1
        if not value.isFold then
            up = low + #value.list
            if index == low then
                refreshInfoListGroup(obj, value.title, value)
                return
            elseif index <= up then
                local listIndex = index - low
                refreshInfoListItem(obj, value.list[listIndex])
                return
            end
        else
            up = low
            if index == low then
                refreshInfoListGroup(obj, value.title, value)
                return
            end
        end
    end
end

---* 虚拟列表资源回调
function itemProviderVirtual(index)
    local low = -1
    local up = -1
    for key, value in pairs(g.listInfoVirtual.infoLists) do
        low = up + 1
        if not value.isFold then
            up = low + #value.list
            if index == low then
                return urlGroup
            elseif index <= up then
                return urlItem
            end
        else
            up = low
            if index == low then
                return urlGroup
            end
        end
    end
    return urlItem
end

---@param group FairyGUI.GLabel
---@param info campInfo|roleInfo|placeInfo
function refreshInfoListGroup(group, title, bindData)
    group.title = title
    local tglFold = group:GetChild("toggle_fold").asButton
    tglFold.selected = not bindData.isFold
    tglFold.data = bindData
    tglFold.onClick:Set(onClickGroupToggle)
end

---@param context FairyGUI.EventContext
function onClickGroupToggle(context)
    local obj = context.sender
    local data = obj.data
    data.isFold = not data.isFold
    g.listInfoVirtual.refresh()
end

---@param com FairyGUI.GComponent
---@param info campInfo|roleInfo|placeInfo
function refreshInfoListItem(com, info)
    local btn = com:GetChild("inner_btn").asButton
    local btnTypeCtl = btn:GetController("type")
    local bgLoader = btn:GetChild("bg").asLoader
    local comCampFlag = btn:GetChild("img_flag").asCom
    local progRep = btn:GetChild("progress").asProgress
    local imgHead = btn:GetChild("role_head").asCom:GetChild("head_holder").asImage
    local levelCtl = btn:GetChild("icon_level").asCom:GetController("level")

    btn.data = info
    btn.onClick:Set(onClickInfoItem)

    btn.selected = g.selectedInfo == info

    if info.type == ReputationTarget.Camp then
        btnTypeCtl.selectedIndex = 0
        local campName = info.rtData:GetCampName()
        if info.rtData:IsPlayerOwnedCamp() then
            campName = campName .. "<color=green>★</color>"
        elseif info.rtData:IsPlayerInCamp() then
            campName = campName .. "<color=green>▲</color>"
        end

        setCampBg(bgLoader, info.rtData)
        btn.title = GUIHelper.ConvertUGUIStr(campName)

        local flagSpr = CS.GameTools.GetCampFlag(info.rtData);
        GUIHelper.CreateSpriteForTarget(comCampFlag, flagSpr);

        local repDesc = GameUtils.ConvertDialogStr(GameShared.Instance:GetRepDesc(info.repVal, ReputationTarget.Camp))
        repDesc = GUIHelper.ConvertUGUIStr(repDesc)

        refreshRepProgress(progRep, info.repVal, repDesc, g.listInfoVirtual.playTween)
    elseif info.type == ReputationTarget.Role then
        btnTypeCtl.selectedIndex = 1
        local roleName = info.rtData:GetRoleName()

        setCampBg(bgLoader, info.rtData:GetRoleCamp())
        btn.title = roleName

        if info.cacheTexture == nil or info.cacheTexture.disposed then
            imgHead.texture = nil
            GUIHelper.GenerateRoleHeadAvataMiniImg(info.rtData.HeadAvata, imgHead)
            info.cacheTexture = imgHead.texture
        else
            imgHead.texture = info.cacheTexture
        end

        if info.rtData:IsPlayer() then
            progRep.visible = false
        else
            local repDesc =
            GameUtils.ConvertDialogStr(GameShared.Instance:GetRepDesc(info.repVal, ReputationTarget.Role))
            repDesc = GUIHelper.ConvertUGUIStr(repDesc)

            progRep.visible = true
            refreshRepProgress(progRep, info.repVal, repDesc, g.listInfoVirtual.playTween)
        end
    elseif info.type == ReputationTarget.Place then
        btnTypeCtl.selectedIndex = 2
        local placeName = info.rtData:GetPlaceName()

        setCampBg(bgLoader, info.rtData:getCampInfo())
        btn.title = placeName

        local placeLevel = info.rtData:GetPlaceLevel()
        levelCtl.selectedIndex = Clamp(placeLevel, 0, 4)

        local repDesc = GameUtils.ConvertDialogStr(GameShared.Instance:GetRepDesc(info.repVal, ReputationTarget.Place))
        repDesc = GUIHelper.ConvertUGUIStr(repDesc)

        refreshRepProgress(progRep, info.repVal, repDesc, g.listInfoVirtual.playTween)
    end
end

---@param context FairyGUI.EventContext
function onClickInfoItem(context)
    local obj = context.sender
    local info = obj.data
    clearHistory()
    selectInfo(info, false)
    refreshInfoList()
end

---@param loader FairyGUI.GLoader
---@param tagCamp HanFramework.GameCampRtData
function setCampBg(loader, tagCamp)
    if tagCamp == nil then
        loader.url = urlNormalBg
        loader.color = GUIHelper.GetColor("FFFFFF")
        return
    end
    local bg = tagCamp:GetCampPojo():GetTag("CAMP_UI_BG")
    if not IsEmptyOrNilStr(bg) then
        loader.url = bg
        loader.color = GUIHelper.GetColor("FFFFFF")
        return
    end
    loader.url = urlNormalBg
    loader.color = tagCamp:GetCampColor()
end

function resetCampBg(loader)
    loader.url = urlNormalBg
    loader.color = GUIHelper.GetColor("FFFFFF")
end

---@param page FairyGUI.GComponent
---@return campPage
function bindCampPage(page)
    local campTypeCtl = page:GetController("camp_type")
    local canQuitCtl = page:GetController("can_quit")

    local txtTitle = page:GetChild("title")

    local listDesc = page:GetChild("desc_list").asList
    local arrowUp = page:GetChild("arrow_up")
    local arrowDown = page:GetChild("arrow_down")
    local onRefreshDescList = bindDescListAndArrow(listDesc, arrowUp, arrowDown)

    local boxDip = bindInformationBox(page:GetChild("box_dip"))
    local boxMember = bindInformationBox(page:GetChild("box_member"))
    local boxPlace = bindInformationBox(page:GetChild("box_place"))

    local btnCommand = page:GetChild("btn_command")
    local btnQuit = page:GetChild("btn_quit")

    btnCommand.onClick:Set(onClickCampCommand)
    btnQuit.onClick:Set(onClickCampQuit)

    ---@param info campInfo
    local refreshPage = function(info)
        txtTitle.text = info.rtData:GetCampName()

        listDesc.numItems = 1
        local txtDesc = listDesc:GetChildAt(0).asLabel
        if IsMobileMode then
            if GameTools.UseLargeStoryText() then
                txtDesc.titleFontSize = 30
            else
                txtDesc.titleFontSize = 25
            end
        end
        if info.rtData.IsCustomCamp == 1 then
            ---* 自定义 or 新增阵营使用动态描述
            txtDesc.text = GUIHelper.ConvertUGUIStr(GetCampDescInfoStr(info.rtData))
        else
            txtDesc.text = GUIHelper.ConvertUGUIStr(info.rtData:GetCampDesc())
        end
        onRefreshDescList()

        if g.player.roleID == info.rtData.Leader then
            canQuitCtl.selectedIndex = 2
        elseif g.player.CurRoleCampID == info.rtData.CampID then
            canQuitCtl.selectedIndex = 1
        else
            canQuitCtl.selectedIndex = 0
        end

        if info.rtData:IsStoryCamp() then
            ---* 剧情阵营不显示其余内容
            campTypeCtl.selectedIndex = 1
            return
        end

        campTypeCtl.selectedIndex = 0

        boxDip.clear()
        boxMember.clear()
        boxPlace.clear()

        local dipCamps = {}
        for key, tagCamp in pairs(ArchiveData.Current.gameCampList) do
            -- 势力被隐藏
            if tagCamp:IsHidden() then goto bindCampPageCampListContinue end
            -- 势力被击败
            if tagCamp.CurState == 1 then goto bindCampPageCampListContinue end
            -- 跳过自身
            if tagCamp == info.rtData then goto bindCampPageCampListContinue end
            -- 跳过剧情势力
            if tagCamp:IsStoryCamp() then goto bindCampPageCampListContinue end

            table.insert(dipCamps, tagCamp)

            ::bindCampPageCampListContinue::
        end
        refreshSubListDipCamp(boxDip, info, dipCamps)

        local places = {}
        for key, tagPlace in pairs(info.rtData.campPlaceList) do
            table.insert(places, tagPlace)
        end
        refreshSubListPlace(boxPlace, info, places, function(place)
            if place.PlaceID == info.rtData.CapitalTownID then
                return 500
            end
            return 0
        end)

        local roles = {}
        for key, tagRole in pairs(info.rtData.campRoleList) do
            table.insert(roles, tagRole)
        end
        refreshSubListRole(boxMember, info, roles, function(role)
            return role:GetNobilityRank()
        end)

    end
    ---@class campPage
    local campPage = {
        com = page,
        refreshPage = refreshPage
    }
    return campPage
end

---@param page FairyGUI.GComponent
---@return rolePage
function bindRolePage(page)
    local roleTypeCtl = page:GetController("role_type")

    local txtTitle = page:GetChild("title")
    local txtPos = page:GetChild("txt_pos")

    local imgHead = page:GetChild("role_head").asCom:GetChild("head_holder").asImage

    local listDesc = page:GetChild("desc_list").asList
    local arrowUp = page:GetChild("arrow_up")
    local arrowDown = page:GetChild("arrow_down")
    local onRefreshDescList = bindDescListAndArrow(listDesc, arrowUp, arrowDown)

    local boxPlace = bindInformationBox(page:GetChild("box_place"))
    local boxRelation = bindInformationBox(page:GetChild("box_relation"))
    local boxMsg = bindInformationBox(page:GetChild("box_msg"))

    local btnCamp = page:GetChild("btn_camp").asButton

    ---@param info roleInfo
    local refreshPage = function(info)
        txtTitle.text = info.rtData:GetRoleName()

        local roleCamp = info.rtData:GetRoleCamp()

        local rolePlace = info.rtData:GetCurPosInfo()

        txtPos.text = StringFormat(GetGameString("lua_script_str_351"), rolePlace)

        listDesc.numItems = 1
        local txtDesc = listDesc:GetChildAt(0).asLabel
        if IsMobileMode then
            if GameTools.UseLargeStoryText() then
                txtDesc.titleFontSize = 30
            else
                txtDesc.titleFontSize = 25
            end
        end
        if info.rtData:IsPlayer() and IsEmptyOrNilStr(info.rtData:GetRoleDesc()) then
            local storyClass = ArchiveData.Current.PlayerClass
            local hasStory, tagStory = GameShared.Instance.CachedStoryModePojo:TryGetValue(storyClass)
            local storyList = {}
            if hasStory then
                local tagLines = SplitStr(tagStory.Desc, "\n");
                for k, tagLine in pairs(tagLines) do
                    if not IsEmptyOrNil(tagLine) then
                        if tagLine ~= "<?ABILITY_ICON?>" and tagLine ~= "<?CHAR_ICON?>" then
                            table.insert(storyList, tagLine)
                        end
                    end
                end
            end
            txtDesc.text = table.concat(storyList, "\n")
        else
            local storyList = {}
            local tagLines = SplitStr(info.rtData:GetRoleDesc(), "\n");
            for k, tagLine in pairs(tagLines) do
                if not IsEmptyOrNil(tagLine) then
                    if tagLine ~= "<?ABILITY_ICON?>" and tagLine ~= "<?CHAR_ICON?>" and tagLine ~= "" then
                        table.insert(storyList, tagLine)
                    end
                end
            end
            txtDesc.text = table.concat(storyList, "\n")
        end
        listDesc.scrollPane.posX = 0
        onRefreshDescList()

        GUIHelper.GenerateRoleHeadAvataImage(info.rtData.HeadAvata, imgHead);

        if info.rtData:getRoleTemplate().roleType ~= "CHAR" and not info.rtData:IsPlayer() then
            -- 非领主单位
            roleTypeCtl.selectedIndex = 1
            return
        end

        roleTypeCtl.selectedIndex = 0

        -- local roleRank = info.rtData:GetNobilityRankInfo()

        -- local campName = roleCamp ~= nil and roleCamp:GetCampName() or "无"
        -- local rankName = roleRank ~= nil and roleRank.title_name or "无"
        -- txtCampName.text = StringFormat("势力：{0}", campName)
        -- txtRankName.text = StringFormat("头衔：{0}", rankName)

        -- 设置阵营图标
        local roleCamp = info.rtData:GetRoleCamp()
        if roleCamp ~= nil then
            btnCamp.visible = true
            local comCampFlag = btnCamp:GetChild("img_flag").asCom
            local flagSpr = CS.GameTools.GetCampFlag(roleCamp);
            GUIHelper.CreateSpriteForTarget(comCampFlag, flagSpr);
            btnCamp.onClick:Set(function()
                selectInfoByID(roleCamp.CampID, ReputationTarget.Camp, true)
            end)
        else
            btnCamp.visible = false
        end

        -- 获取领地
        local hasPlaces = {}
        local placeList = info.rtData:GetFiefList(0)
        if placeList ~= nil then
            for key, value in pairs(placeList) do
                table.insert(hasPlaces, value)
            end
        end
        refreshSubListPlace(boxPlace, info, hasPlaces)

        local roles = {}

        -- 获取羁绊
        for key, tagRole in pairs(GameCoreHelper.GetAllGameRoles()) do
            --local tagRole = GameCoreHelper.GetRole(roleId)
            if tagRole ~= nil and tagRole ~= info.rtData
                and math.abs(tagRole:GetRep(ReputationTarget.Role, info.roleId)) > 30 then
                table.insert(roles, tagRole)
            end
        end
        refreshSubListRole(boxRelation, info, roles, function(role)
            return role:GetRep(ReputationTarget.Role, info.roleId)
        end)

        -- 逸闻描述
        local msgList = {}
        for key, value in pairs(ArchiveData.Current:GetAllRoleMsgAboutRole(info.roleId)) do
            table.insert(msgList, value)
        end
        table.sort(msgList, function(a, b)
            return a.StartDay > b.StartDay
        end)
        refreshSubListMsg(boxMsg, msgList)
    end

    ---@class rolePage
    local rolePage = {
        com = page,
        refreshPage = refreshPage,
    }
    return rolePage
end

---@param page FairyGUI.GComponent
---@return placePage
function bindPlacePage(page)
    local txtTitle = page:GetChild("title")

    local listDesc = page:GetChild("desc_list").asList
    local arrowUp = page:GetChild("arrow_up")
    local arrowDown = page:GetChild("arrow_down")
    local onRefreshDescList = bindDescListAndArrow(listDesc, arrowUp, arrowDown)

    local boxArmy = bindInformationBox(page:GetChild("box_army"))
    local boxBuilding = bindInformationBox(page:GetChild("box_building"))
    local boxProduct = bindInformationBox(page:GetChild("box_product"))

    local btnCamp = page:GetChild("btn_camp").asButton

    ---@param info placeInfo
    local refreshPage = function(info)
        txtTitle.text = info.rtData:GetPlaceName()

        listDesc.numItems = 1
        local txtDesc = listDesc:GetChildAt(0).asLabel
        if IsMobileMode then
            if GameTools.UseLargeStoryText() then
                txtDesc.titleFontSize = 30
            else
                txtDesc.titleFontSize = 25
            end
        end
        txtDesc.text = GetPlaceDescInfoStr(info.rtData)
        onRefreshDescList()

        -- 设置阵营图标
        local tagCamp = info.rtData:getCampInfo()
        if tagCamp ~= nil then
            btnCamp.visible = true
            local comCampFlag = btnCamp:GetChild("img_flag").asCom
            local flagSpr = CS.GameTools.GetCampFlag(tagCamp);
            GUIHelper.CreateSpriteForTarget(comCampFlag, flagSpr);
            btnCamp.onClick:Set(function()
                selectInfoByID(tagCamp.CampID, ReputationTarget.Camp, true)
            end)
        else
            btnCamp.visible = false
        end

        -- 驻军描述
        local roles = {}
        for key, tagRole in pairs(info.rtData.rolesInTown) do
            if tagCamp == tagRole:GetRoleCamp() then
                table.insert(roles, tagRole)
            end
        end
        local soldiers = {}
        for key, soldier in pairs(info.rtData.soldierCardsInTown) do
            table.insert(soldiers, soldier)
        end
        refreshSubListArmy(boxArmy, info, roles, soldiers)

        -- 建筑描述
        boxBuilding.clear()
        local buildings = {}
        ---@param value BuildingInPlace
        for key, value in pairs(info.rtData:GetAllBuildingList()) do
            if value.buildingInfo.buildingType ~= "酒馆" then
                table.insert(buildings, value)
            end
        end
        refreshSubListBuilding(boxBuilding, buildings)

        -- 特产描述
        boxProduct.clear()
        ---@type HanFramework.LocalProductDistributeInfo[]
        local products = {}
        local productList = info.rtData:GetLocalProducts()
        if productList ~= nil then
            for key, value in pairs(productList.DistributeList) do
                table.insert(products, value)
            end
        end
        refreshSubListLocalProduct(boxProduct, products)

    end

    ---@class placePage
    local placePage = {
        com = page,
        refreshPage = refreshPage,
    }
    return placePage
end

---@param list FairyGUI.GList
---@param arrowUp FairyGUI.Image
---@param arrowDown FairyGUI.Image
function bindDescListAndArrow(list, arrowUp, arrowDown)
    list.scrollPane.mouseWheelEnabled = true
    local onRefreshList = function()
        local arrowUpShow = list.scrollPane.posY > 0
        local arrowDownShow = not list.scrollPane.isBottomMost
        arrowUp.visible = arrowUpShow
        arrowDown.visible = arrowDownShow
    end
    list.scrollPane.onScroll:Add(onRefreshList)
    return function()
        FairyGUI.Timers.inst:Add(0.01, 1, onRefreshList)
    end
end

---@param box FairyGUI.GLabel
function bindInformationBox(box)
    local list = box:GetChild("list").asList
    local setTitle = function(str)
        box.title = str
    end
    local clear = function()
        list.numItems = 0
    end
    local addTitle = function(str)
        local item = list:AddItemFromPool(urlLabelTitle)
        item.title = str
        return item
    end
    local addInfo = function(strTime, str)
        local item = list:AddItemFromPool(urlLabelInfo)
        local txtTime = item:GetChild("txt_time")
        txtTime.text = strTime
        item.title = str
        return item
    end
    local addSubItem = function()
        local item = list:AddItemFromPool(urlSubItem)
        return item
    end
    local addSubItemSoldier = function()
        local item = list:AddItemFromPool(urlSubItemSoldier)
        return item
    end
    ---@class infoBoxCom
    local infoBoxCom = {
        list = list,
        setTitle = setTitle,
        clear = clear,
        ---@type fun(title : string) : FairyGUI.GLabel
        addTitle = addTitle,
        ---@type fun(title : string) : FairyGUI.GLabel
        addInfo = addInfo,
        ---@type fun() : FairyGUI.GButton
        addSubItem = addSubItem,
        ---@type fun() : FairyGUI.GComponent
        addSubItemSoldier = addSubItemSoldier
    }
    return infoBoxCom
end

---@param item FairyGUI.GButton
---@param typeCode subItemTypeCode
---@param rightTypeCode subItemRightTypeCode
---@param data any 数据，根据typeCode决定
---* 刷新子按钮
function refreshSubItem(item, typeCode, rightTypeCode, data)
    local typeCtl = item:GetController("type")
    local rightTypeCtl = item:GetController("right_type")
    local bg = item:GetChild("bg").asLoader
    local comCampFlag = item:GetChild("img_flag").asCom
    local levelCtl = item:GetChild("icon_level"):GetController("level")
    local loaderItem = item:GetChild("loader_item").asLoader
    local loaderBuilding = item:GetChild("loader_building").asLoader

    loaderItem.icon = nil
    loaderBuilding.icon = nil

    typeCtl.selectedIndex = typeCode
    rightTypeCtl.selectedIndex = rightTypeCode

    if typeCode == subItemTypeCode.Camp then
        ---@type HanFramework.GameCampRtData
        local tagCamp = data

        setCampBg(bg, tagCamp)
        item.title = tagCamp:GetCampName()

        local flagSpr = CS.GameTools.GetCampFlag(tagCamp);
        GUIHelper.CreateSpriteForTarget(comCampFlag, flagSpr);

        item.onClick:Set(function()
            selectInfoByID(tagCamp.CampID, ReputationTarget.Camp, true)
        end)
    elseif typeCode == subItemTypeCode.Role then
        ---@type HanFramework.RoleRuntimeData
        local tagRole = data
        local imgHead = item:GetChild("role_head").asCom:GetChild("head_holder").asImage

        if tagRole ~= nil then
            item.enabled = true
            item.title = tagRole:GetRoleName()
            setCampBg(bg, tagRole:GetRoleCamp())
            imgHead.visible = true

            GUIHelper.GenerateRoleHeadAvataMiniImg(tagRole.HeadAvata, imgHead);

            item.onClick:Set(function()
                selectInfoByID(tagRole.roleID, ReputationTarget.Role, true)
            end)
        else
            resetCampBg(bg)
            item.enabled = false
            item.title = "???"
            imgHead.visible = false
        end
    elseif typeCode == subItemTypeCode.Place then
        ---@type HanFramework.GamePlaceRtData
        local tagPlace = data
        if tagPlace ~= nil then
            item.enabled = true
            item.title = tagPlace:GetPlaceName()
            setCampBg(bg, tagPlace:getCampInfo())

            local placeLevel = tagPlace:GetPlaceLevel()
            levelCtl.selectedIndex = Clamp(placeLevel, 0, 4)

            item.onClick:Set(function()
                selectInfoByID(tagPlace.PlaceID, ReputationTarget.Place, true)
            end)
        else
            item.enabled = false
            item.title = GetGameString("lua_script_str_325")
            resetCampBg(bg)
            levelCtl.selectedIndex = 0
        end
    elseif typeCode == subItemTypeCode.Building then
        ---@type BuildingInPlace
        local tagBuilding = data
        item.title = tagBuilding.buildingInfo.displayName
        item.enabled = false
        resetCampBg(bg)
        local buildingLevel = tagBuilding.buildingInfo.level
        levelCtl.selectedIndex = Clamp(buildingLevel, 0, 4)
        local icon = tagBuilding.buildingInfo:GetBuildingTag("building_icon")
        if IsEmptyOrNilStr(icon) then
            loaderBuilding.url = GetBuildingIconPathByName("blackcliff_factory_1")
        else
            loaderBuilding.url = GetBuildingIconPathByName(icon)
        end
    elseif typeCode == subItemTypeCode.Item then
        ---@type GameItemPojo
        local itemPojo = data
        item.title = itemPojo.item_name
        item.enabled = false
        resetCampBg(bg)
        loaderItem.url = GetIconPathByName(itemPojo.item_icon)
    end
end

---@param box infoBoxCom
---@param info campInfo|roleInfo 来源（阵营成员/角色关系）
---@param camps HanFramework.GameCampRtData[]
function refreshSubListDipCamp(box, info, camps)
    local list = box.list
    local function getRep(tagCamp)
        if info.type == ReputationTarget.Camp then
            return ArchiveData.Current:GetCampRelationInfo(info.campId, tagCamp.CampID).friendlyVal
        elseif info.type == ReputationTarget.Role then
            return info.rtData:GetRep(ReputationTarget.Camp, tagCamp.CampID)
        end
    end

    table.sort(camps, function(a, b)
        local orderA = (a:IsPlayerInCamp() or a:IsPlayerOwnedCamp()) and 1000 or 0
        local orderB = (b:IsPlayerInCamp() or b:IsPlayerOwnedCamp()) and 1000 or 0
        orderA = orderA + getRep(a)
        orderB = orderB + getRep(b)
        return orderA > orderB
    end)
    list.numItems = 0
    for _, tagCamp in ipairs(camps) do
        local item = box.addSubItem()
        refreshSubItem(item, subItemTypeCode.Camp, subItemRightTypeCode.ShowRep, tagCamp)

        local progRep = item:GetChild("progress").asProgress
        local repVal = getRep(tagCamp)

        local repDesc = GameUtils.ConvertDialogStr(GameShared.Instance:GetRepDesc(repVal, ReputationTarget.Camp))
        repDesc = GUIHelper.ConvertUGUIStr(repDesc)
        refreshRepProgress(progRep, repVal, repDesc)
    end
end

---* 刷新地点列表
---@param box infoBoxCom
---@param info campInfo|roleInfo 来源（阵营领地/角色领地）
---@param places HanFramework.GamePlaceRtData[]
---@param sortOrderFunc fun(role : HanFramework.GamePlaceRtData) 地点排序函数
function refreshSubListPlace(box, info, places, sortOrderFunc)
    local list = box.list
    table.sort(places, function(a, b)
        local orderA = 0
        local orderB = 0
        if not g.canShowAllInfo then
            orderA = orderA + (a:IsPlayerActive() and 1000 or 0)
            orderB = orderB + (b:IsPlayerActive() and 1000 or 0)
        end

        if sortOrderFunc ~= nil then
            orderA = orderA + sortOrderFunc(a)
            orderB = orderB + sortOrderFunc(b)
        end
        return orderA > orderB
    end)
    list.numItems = 0
    for _, tagPlace in pairs(places) do
        local item = box.addSubItem()
        local desc = item:GetChild("txt_desc")

        if placeCanSee(tagPlace) then
            if info.type == ReputationTarget.Camp then
                ---* 显示地点是否为首都
                if tagPlace.PlaceID == info.rtData.CapitalTownID then
                    refreshSubItem(item, subItemTypeCode.Place, subItemRightTypeCode.ShowMainDesc, tagPlace)
                    desc.text = GetGameString("lua_script_str_326")
                else
                    refreshSubItem(item, subItemTypeCode.Place, subItemRightTypeCode.None, tagPlace)
                end
            elseif info.type == ReputationTarget.Role then
                refreshSubItem(item, subItemTypeCode.Place, subItemRightTypeCode.None, tagPlace)
            end
        else
            refreshSubItem(item, subItemTypeCode.Place, subItemRightTypeCode.None, nil)
        end
    end
end

---* 刷新角色列表
---@param box infoBoxCom
---@param info campInfo|roleInfo 关系判断来源
---@param roles HanFramework.RoleRuntimeData[] 角色列表
---@param sortOrderFunc fun(role : HanFramework.RoleRuntimeData) 角色排序函数
function refreshSubListRole(box, info, roles, sortOrderFunc)
    local list = box.list
    table.sort(roles, function(a, b)
        local orderA = 0
        local orderB = 0
        orderA = orderA + (roleCanSee(a) and 1000 or 0)
        orderB = orderB + (roleCanSee(b) and 1000 or 0)

        if sortOrderFunc ~= nil then
            orderA = orderA + sortOrderFunc(a)
            orderB = orderB + sortOrderFunc(b)
        end

        return orderA > orderB
    end)
    list.numItems = 0
    for _, tagRole in pairs(roles) do
        local item = box.addSubItem()
        local txtDesc = item:GetChild("txt_desc").asTextField
        local progRep = item:GetChild("progress").asProgress

        if roleCanSee(tagRole) then
            if info.type == ReputationTarget.Role then
                ---* 显示角色与角色的关系
                refreshSubItem(item, subItemTypeCode.Role, subItemRightTypeCode.ShowRep, tagRole)

                local repVal = tagRole:GetRep(ReputationTarget.Role, info.roleId)
                local repDesc = GameUtils.ConvertDialogStr(GameShared.Instance:GetRepDesc(repVal, ReputationTarget.Role))
                repDesc = GUIHelper.ConvertUGUIStr(repDesc)
                refreshRepProgress(progRep, repVal, repDesc)
            else
                ---* 显示角色在阵营中的地位
                if tagRole.roleID == info.rtData.Leader then
                    refreshSubItem(item, subItemTypeCode.Role, subItemRightTypeCode.ShowMainDesc, tagRole)
                else
                    refreshSubItem(item, subItemTypeCode.Role, subItemRightTypeCode.ShowDesc, tagRole)
                end

                local rank = tagRole:GetNobilityRankInfo()
                if rank ~= nil then
                    txtDesc.text = rank.title_name
                else
                    txtDesc.text = ""
                end
            end
        else
            refreshSubItem(item, subItemTypeCode.Role, subItemRightTypeCode.None, nil)
        end
    end
end

---* 刷新驻军列表
---@param box infoBoxCom
---@param info placeInfo
---@param roles HanFramework.RoleRuntimeData[] 角色列表
---@param soldiers HanFramework.GameCampRtData[] 兵卡列表
function refreshSubListArmy(box, info, roles, soldiers)
    local list = box.list
    table.sort(roles, function(a, b)
        local orderA = (a:IsPlayerActive() or a:IsPlayer()) and 1000 or 0
        local orderB = (b:IsPlayerActive() or b:IsPlayer()) and 1000 or 0

        if a.roleID == info.rtData.LordRoleID then
            orderA = orderA + 500
        end
        if b.roleID == info.rtData.LordRoleID then
            orderB = orderB + 500
        end

        return orderA > orderB
    end)

    list.numItems = 0
    ---* 先显示角色
    for key, tagRole in pairs(roles) do
        local item = box.addSubItem()
        if roleCanSee(tagRole) then
            local txtDesc = item:GetChild("txt_desc").asTextField
            ---* 显示是否为城主，其次显示头衔
            if tagRole.roleID == info.rtData.LordRoleID then
                refreshSubItem(item, subItemTypeCode.Role, subItemRightTypeCode.ShowMainDesc, tagRole)
                txtDesc.text = GetGameString("lua_script_str_327")
            else
                refreshSubItem(item, subItemTypeCode.Role, subItemRightTypeCode.ShowDesc, tagRole)
                local rank = tagRole:GetNobilityRankInfo()
                if rank ~= nil then
                    txtDesc.text = rank.title_name
                else
                    txtDesc.text = ""
                end
            end
        else
            refreshSubItem(item, subItemTypeCode.Role, subItemRightTypeCode.None, nil)
        end
    end
    ---* 根据天赋判断是否显示驻军
    if g.canShowSoldiersInPlace or info.rtData.CurCamp == g.player.CurRoleCampID then
        -- 合并驻军军力数量
        local soldierDic = {}
        ---@param card HanFramework.CardRtData
        for key, card in pairs(soldiers) do
            local pojo = card.BindCardInfo
            if pojo ~= nil then
                if soldierDic[pojo.id] == nil then
                    ---@field pojo CardPojo
                    ---@field card HanFramework.CardRtData
                    ---@class soldierInfo
                    local info = {
                        pojo = pojo,
                        count = 0,
                        quality = Clamp(pojo.quality, 1, 6),
                        card = card
                    }
                    soldierDic[pojo.id] = info
                end
                soldierDic[pojo.id].count = soldierDic[pojo.id].count + 1
            end
        end
        ---@type soldierInfo[]
        local soldierInfos = {}
        for key, value in pairs(soldierDic) do
            table.insert(soldierInfos, value)
        end
        table.sort(soldierInfos, function(a, b)
            return a.quality > b.quality
        end)

        if #soldierInfos > 0 then
            box.addTitle(GetGameString("lua_script_str_328"))
        else
            box.addTitle(GetGameString("lua_script_str_329"))
        end

        for key, soldierInfo in pairs(soldierInfos) do
            local item = box.addSubItemSoldier()
            local bgLeft = item:GetChild("bg_left").asLoader
            local bgRight = item:GetChild("bg_right").asLoader
            local txtNum = item:GetChild("txt_num").asTextField
            local headImg = item:GetChild("unit_head"):GetChild("head_holder").asLoader;

            item.title = GUIHelper.ConvertUGUIStr(soldierInfo.pojo.show_name)
            bgLeft.url = urlSoldierFrame[soldierInfo.quality].left
            bgRight.url = urlSoldierFrame[soldierInfo.quality].right
            txtNum.text = StringFormat(GetGameString("lua_script_str_331"), soldierInfo.count)
            headImg.url = soldierInfo.card:GetUnitHeadImgUrl()
        end
    else
        box.addTitle(GetGameString("lua_script_str_330"))
    end
end

---* 刷新建筑列表
---@param box infoBoxCom
---@param buildings BuildingInPlace[] 建筑列表
function refreshSubListBuilding(box, buildings)
    local list = box.list
    table.sort(buildings, function(a, b)
        return a.buildingInfo.sort_index > b.buildingInfo.sort_index
    end)

    list.numItems = 0
    for key, building in pairs(buildings) do
        local item = box.addSubItem()
        refreshSubItem(item, subItemTypeCode.Building, subItemRightTypeCode.ShowBuilding, building)
    end
end

---* 刷新特产列表
---@param box infoBoxCom
---@param localProducts HanFramework.LocalProductDistributeInfo[] 特产列表
function refreshSubListLocalProduct(box, localProducts)
    local list = box.list
    ---* 防止重复的哈希表
    local itemHash = {}
    list.numItems = 0
    for key, product in pairs(localProducts) do
        local gameItemPojo = GameCoreHelper.GetItemPojo(product.BindLocalProduct.BindInfo.item_id)
        ---* 除去重复特产
        if itemHash[gameItemPojo.itemID] == nil then
            itemHash[gameItemPojo.itemID] = true
            if gameItemPojo ~= nil then
                local item = box.addSubItem()
                refreshSubItem(item, subItemTypeCode.Item, subItemRightTypeCode.ShowItem, gameItemPojo)
            end
        end
    end
end

---* 刷新消息列表
---@param box infoBoxCom
---@param localProducts HanFramework.RoleMsgRtData[] 消息列表
function refreshSubListMsg(box, msgList)
    local list = box.list
    list.numItems = 0
    local curDay = math.ceil(CS.WorldManager.Instance.curGameTime)
    ---@param msg HanFramework.RoleInteractionMsgRtData
    for key, msg in pairs(msgList) do
        local msgText = msg:GetMsg()
        local dayBefore = msg:GetDaysAfterStart(curDay)
        local timeInfo = GUIHelper.ConvertUGUIStr(StringFormat(GetGameString("lua_script_str_332"), dayBefore))
        if msgText == nil then
            ---* 输出内容错误
            msgText = GetGameString("lua_script_str_325")
        end
        box.addInfo(timeInfo, GUIHelper.ConvertUGUIStr(msgText))
    end
end

---@param prog FairyGUI.GProgressBar
---@param value number
function refreshRepProgress(prog, value, desc, playTween)
    if playTween == nil then
        playTween = true
    end
    prog.visible = true
    prog.min = 0
    prog.max = 100
    prog.value = 0
    if playTween then
        prog:TweenValue(math.abs(value), tweenProgTime)
    else
        prog.value = math.abs(value)
    end

    local progType = prog:GetController("rep_type")
    if value >= 0 then
        progType.selectedIndex = 0
    else
        progType.selectedIndex = 1
    end
    prog:GetChild("txt_desc").asTextField.text = StringFormat("{0}({1})", desc, value)
end

function selectInfoByID(infoID, type, addHistory)
    local info = nil
    if type == ReputationTarget.Camp then
        for index, value in ipairs(g.campInfos) do
            if value.campId == infoID then
                info = value
                break
            end
        end
    elseif type == ReputationTarget.Role then
        for index, value in ipairs(g.roleInfos) do
            if value.roleId == infoID then
                info = value
                break
            end
        end
        for index, value in ipairs(g.roleBarGirls) do
            if value.roleId == infoID then
                info = value
                break
            end
        end
    elseif type == ReputationTarget.Place then
        for index, value in ipairs(g.placeInfos) do
            if value.placeId == infoID then
                info = value
                break
            end
        end
    end
    if info ~= nil then
        selectInfo(info, addHistory)
    end
end

---@param info campInfo|roleInfo|placeInfo
function selectInfo(info, addHistory)
    if info == nil then
        return
    end
    addHistory = addHistory or false
    if addHistory and g.selectedInfo ~= nil then
        table.insert(g.history, g.selectedInfo)
    end
    g.selectedInfo = info
    if info.type == ReputationTarget.Camp then
        g.ctlPaeg.selectedIndex = 0
        g.pageCamp.refreshPage(info)
    elseif info.type == ReputationTarget.Role then
        g.ctlPaeg.selectedIndex = 1
        g.pageRole.refreshPage(info)
    elseif info.type == ReputationTarget.Place then
        g.ctlPaeg.selectedIndex = 2
        g.pagePlace.refreshPage(info)
    end
    ---* 计算被选中组件的位置，若折叠则跳转到分组头
    local itemIndex = -1
    for _, value in pairs(g.listInfoVirtual.infoLists) do
        -- 分组头索引
        itemIndex = itemIndex + 1
        for index, tagInfo in pairs(value.list) do
            if tagInfo == info then
                if not value.isFold then
                    itemIndex = itemIndex + index
                end
                goto selectInfoContinue
            end
        end
        itemIndex = itemIndex + #value.list
    end
    itemIndex = -1
    ::selectInfoContinue::
    if itemIndex ~= -1 then
        g.listInfo:ScrollToView(itemIndex, true)
    end

    g.transFade:Play()
    refreshInfoList()
    refreshHistory()
end

function clearHistory()
    g.history = {}
end

function refreshHistory()
    if #g.history > 0 then
        g.btnReturn.visible = true
    else
        g.btnReturn.visible = false
    end
end

function onRefreshPage()
    selectInfo(g.selectedInfo, false)
end

function onForceRefreshPage()
    disposeCache()
    cacheInformation()
    g.listInfoVirtual.infoLists = {}
    bindInfoListVirtual(GetGameString("lua_script_str_321"), g.campInfos)
    bindInfoListVirtual(GetGameString("lua_script_str_322"), g.roleInfos)
    bindInfoListVirtual(GetGameString("lua_script_str_323"), g.placeInfos)
    bindInfoListVirtual(GetGameString("lua_script_str_324"), g.roleBarGirls)
    refreshInfoList()
    -- 默认选中第一个势力
    selectInfo(g.campInfos[1], false)
end

function onClickCampCommand()
    if g.selectedInfo == nil or g.selectedInfo.type ~= ReputationTarget.Camp then
        return
    end

    local argvs = GameCoreHelper.CreateEmptyRuntimeArgVal()
    argvs.CurTagCamp = g.selectedInfo.rtData
    CS.WorldManager.Instance:OnTriggerEventCheck("on_diplomacy_strategy", "", "", argvs, false, onRefreshPage);
end

function onClickCampQuit()
    if g.selectedInfo == nil or g.selectedInfo.type ~= ReputationTarget.Camp then
        return
    end

    local argvs = GameCoreHelper.CreateEmptyRuntimeArgVal()
    argvs.CurTagCamp = g.selectedInfo.rtData
    CS.WorldManager.Instance:OnTriggerEventCheck("on_diplomacy_quit", "", "", argvs, false, onForceRefreshPage);
end

function onClickReturn()
    local historyCount = #g.history
    if historyCount > 0 then
        local lastInfo = g.history[historyCount]
        table.remove(g.history)
        selectInfo(lastInfo, false)
    end
end

function onClickClose()
    PlayButtonSound()
    self.CurDialogResult = -1;
    self:Hide();
end
