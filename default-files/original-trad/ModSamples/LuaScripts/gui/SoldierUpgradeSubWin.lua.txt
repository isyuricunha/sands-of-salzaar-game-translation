require("gui/WindowUtils")
require("GameUtils")

local GameCoreHelper = CS.GameCoreHelper

local constLinkLineImgWidth = 8;

SoldierUpgradeSubWin = {
	curCard = nil,
	curSeledUpCard = nil,
	curSeledSlot = nil,
	RefreshParentListCallback = nil,
}

SoldierUpgradeSubWin.meta = {__index = SoldierUpgradeSubWin}

function SoldierUpgradeSubWin:Create()
	local tagClass = {}
    setmetatable(tagClass, self.meta)
    return tagClass
end

function SoldierUpgradeSubWin:Init(_tagComp)
	self.mainView = _tagComp;

	self.curSeledUpCard = nil;

	self.treeNodeList = nil;
	self.compUpgrade = _tagComp:GetChild("upgrade_tree").asCom;
	self.lvBgImgs = self.compUpgrade:GetChild("page_list").asList;
	self.itemsRoot = self.compUpgrade:GetChild("tree_items").asCom;

	self.groupUnitInfo = _tagComp:GetChild("g_unitinfo").asGroup;
	self.lbAttackType = _tagComp:GetChildInGroup(self.groupUnitInfo, "lb_attack_type").asLabel;
	self.lbArmorType = _tagComp:GetChildInGroup(self.groupUnitInfo, "lb_armor_type").asLabel;
	self.lbUnitClassType = _tagComp:GetChildInGroup(self.groupUnitInfo, "lb_unit_class").asLabel;
	self.imgModelHolder = _tagComp:GetChildInGroup(self.groupUnitInfo, "model_holder").asImage;
	self.lvSkills = _tagComp:GetChildInGroup(self.groupUnitInfo, "skill_list").asList;
	self.groupUnitInfo.visible = false;

	self.groupUpgrade = _tagComp:GetChild("g_upgrade").asGroup;
	self.lvMatItems = _tagComp:GetChildInGroup(self.groupUpgrade, "mat_list").asList;
	self.ctlUpgradeMats = CreateStandardResBoxByList(self.lvMatItems, false);
	--绑定按钮事件
	self.txtUpgradeInfo = _tagComp:GetChildInGroup(self.groupUpgrade, "txt_condi").asTextField;
	self.btnUpgrade = _tagComp:GetChildInGroup(self.groupUpgrade, "btn_upgrade").asButton;
	self.btnUpgrade.onClick:Add(function()
		self:onClickBtnUpgrade();
	end);
	self.groupUpgrade.visible = false;

	self.curModelInfo = nil;
end

function SoldierUpgradeSubWin:SetCurCard(_tagCard)
	self.curCard = _tagCard;
	self:UpdateTreeView();
end

function SoldierUpgradeSubWin:onClickBtnUpgrade()
	if self.curCard ~= nil and  self.curSeledSlot == nil or self.curSeledSlot.bindCard == nil then
		return;
	end

	if self.curSeledSlot.slotState ~= 2 then
		return;
	end

	PlayButtonSound();

	local tagCard = self.curSeledSlot.bindCard;

	if self.curUpgradeNode == nil then
		return;
	else
		local ret, errInfo = self.curUpgradeNode:IsEnableUpgrade(self.curCard);
		if not ret then
			if not IsEmptyOrNil(errInfo) then
				ShowToastInfo(errInfo, 2);
			end
			return;
		end
	end

	if self.upgradeMatItems ~= nil then
		if not GameCoreHelper.CheckInventoryForItems(self.upgradeMatItems) then
			return;
		end
	end

	local playerCards = GameCoreHelper.GetPlayerUnitCardsSnapshot()
	local upgradeCount = GetCardsCountCanUpgrade(playerCards, tagCard.bindID)
	if upgradeCount > 1 then
		-- 批量升级
		CS.GUIHelper.ShowCardUpgradeWindow(self.curCard.bindID, tagCard.bindID, playerCards, function(ret)
			if ret == 1 then
				self:RefreshParentList()
				local sInfo = GetGameString("UICardUpgradeDlg_Confirm");
				ShowToastInfo(sInfo, 2);
				GameCoreHelper.PlayAudio("LevelUp");
			end
		end)
		return
	end

	if (CS.CardLogic.ReplacePlayerCardByUpgrade(self.curCard, tagCard)) then
		-- 升级完毕扣除材料
		if self.upgradeMatItems ~= nil then
			for index=0,self.upgradeMatItems.Count-1 do
				local tagMat = self.upgradeMatItems[index];
				GameCoreHelper.RemoveItemsFormPlayerInv(tagMat.itemID, tagMat.itemCount, false);
			end
		end
		local sInfo = GetGameString("UICardUpgradeDlg_Confirm");
		ShowToastInfo(sInfo, 2);
		GameCoreHelper.PlayAudio("LevelUp");
	end

	self.groupUpgrade.visible = false;

	self:RefreshParentList()
end

function SoldierUpgradeSubWin:RefreshParentList()
	if self.RefreshParentListCallback == nil then
		self.curCard = tagCard;
		self:UpdateTreeView();
		local playerTeam = GameCoreHelper.GetPlayerTeam();
		playerTeam.isTeamUpdated = true;
	else
		if self.RefreshParentListCallback ~= nil then
			self.RefreshParentListCallback(tagCard, false);
		end
	end
end

local constrUpgradeLevelInfo = GetGameString("lua_script_str_230");
function SoldierUpgradeSubWin:UpdateTreeView()
	if self.curCard ~= nil and self.curCard.BindCardInfo ~= nil then
		self.mainView.visible = true;

		local curCard = self.curCard;

		self.curUpgradeTree = CS.GameTools.GetCardUpgradeTreeByCard(curCard.BindCardInfo);
		if (self.curUpgradeTree == nil) then
			self.mainView.visible = false;
			return;
		end
		self.treeViewHeight = self.itemsRoot.height;
		self.maxTreeRows = self.curUpgradeTree.maxRow;
		local totalLevels = self.curUpgradeTree.maxLevel;
		self.lvBgImgs.numItems = totalLevels;
		self.itemsRoot:RemoveChildren(0, -1, true);
		self.curSeledSlot = nil;
		self.treeNodeList = {};
		self.levelPosY = {};
		self.curDefSelSlot = nil;
		--修改阶级框标题
		local tagBoxLabel;
		for index=0,self.lvBgImgs.numItems-1 do
			tagBoxLabel = self.lvBgImgs:GetChildAt(index).asLabel;
			tagBoxLabel.title = GameCoreHelper.StringFormat(constrUpgradeLevelInfo, (index + 1));
		end

		--重绘升级树
		local _tagNode;
		for index=0,self.curUpgradeTree.allNodes.Count-1 do
			_tagNode = self.curUpgradeTree.allNodes[index];
			if not _tagNode.isSubNode then
				--找到头节点
				local recordDic = {};
				self:addTreeNodeLinked(_tagNode, recordDic);
			end
		end

		self.lvBgImgs:ResizeToFit();

		--选中默认
		if self.curDefSelSlot ~= nil and self.curCard ~= nil then
			_tagNode = self.curDefSelSlot.treeNodeInfo;
			self:LinkAllParentRoutes(self.curDefSelSlot);
			--点亮所有可以升级的单位
			if _tagNode.childNodes ~= nil and _tagNode.childNodes.Count > 0 then
				local _subNode;
				local _subNodeSlot;
				for index=0,_tagNode.childNodes.Count-1 do
					_subNode = _tagNode.childNodes[index];
					_subNodeSlot = self.treeNodeList[_subNode];
					if _subNodeSlot ~= nil then
						--检查并点亮
						_subNodeSlot.upNode = _subNode;
						if self.curCard.Level >= _subNode.requireLevel then
							_subNodeSlot.slotState = 2;
						end
					end
				end
			end
		end

		self:UpdateAllSlotView();

		self:SetCurSeledCardSlot(self.curDefSelSlot);
	else
		self.mainView.visible = false;
	end
end

function SoldierUpgradeSubWin:UpdateAllSlotView()
	local _tagSlot;
	for k,v in pairs(self.treeNodeList) do
		if v ~= nil then
			_tagSlot = v;
			_tagSlot.ctlState.selectedIndex = _tagSlot.slotState;
		end
	end
end

function SoldierUpgradeSubWin:addTreeNodeLinked(_tagNode, recordDic)
	if recordDic[_tagNode] ~= nil then
		--发现递归调用,跳出
		return;
	end

	local tagLevel = _tagNode.cardPoolLevel;
	local rowHeight = 60;
	if self.maxTreeRows > 0 then
		rowHeight = self.treeViewHeight / self.maxTreeRows;
	end

	local nodePosY = math.floor((_tagNode.cardListRow - 0.5) * rowHeight);
	local newNodeSlot = self:AddUpgradeTreeNode(_tagNode, nodePosY);

	recordDic[_tagNode] = 1;
	--递归处理子节点
	if _tagNode.childNodes ~= nil and _tagNode.childNodes.Count > 0 then
		local _subNode;
		local _subNodeSlot;
		for index=0,_tagNode.childNodes.Count-1 do
			_subNode = _tagNode.childNodes[index];
			if recordDic[_subNode] == nil then
				_subNodeSlot = self:addTreeNodeLinked(_subNode, recordDic);
				if _subNodeSlot ~= nil then
					--绘制连线
					self:LinkSlotsInSkillPage(newNodeSlot, _subNodeSlot, false);
				end
			else
				--递归调用，跳过

			end
		end
	end

	return newNodeSlot;
end

function SoldierUpgradeSubWin:AddUpgradeTreeNode(_treeNode, _posY)
	if self.curUpgradeTree == nil then
		return;
	end
	local tagCol = _treeNode.cardPoolLevel - 1;
	local tagPosX = math.floor(262 * (tagCol + 0.5));
	local tagPosY = _posY;

	local tagPkg = constPackageNewUI;
	local tagCom = "UpgradeTreeNodeItem";
	if IsMobileMode then
		tagCom = "UpgradeTreeNodeItemM";
	end

	local tagSlotView = UIPackage.CreateObject(tagPkg, tagCom).asCom;
	tagSlotView.pivot = Vector2(0.5, 0.5);
	tagSlotView.pivotAsAnchor = true;
	tagSlotView:SetXY(tagPosX, tagPosY);
	tagSlotView.sortingOrder = 100;

	local viewCard = GameCoreHelper.CreateCardByInfo(_treeNode.cardInfo);
	viewCard.Exp = self.curCard.Exp;
	viewCard.Level = _treeNode.requireLevel;

	local treeNodeSlot = tagSlotView.data;
	if treeNodeSlot == nil then
		treeNodeSlot = {};
		treeNodeSlot.bindView = tagSlotView;
		treeNodeSlot.upNode = nil;
		treeNodeSlot.ctlState = tagSlotView:GetController("state");
		treeNodeSlot.bindBtn = tagSlotView:GetChild("btn_unit").asButton;
		treeNodeSlot.imgDisableMask = tagSlotView:GetChild("disable_mask").asImage;
		treeNodeSlot.rangeHeight = 0;
		treeNodeSlot.ctlUnitBox = CreateSoldierSlotInfoByCardPUI(treeNodeSlot.bindBtn, 1, function()
			self:OnClickTagNodeSlot(treeNodeSlot);
		end);
		tagSlotView.data = treeNodeSlot;
	end

	treeNodeSlot.slotState = 1;
	if viewCard.BindCardInfo == self.curCard.BindCardInfo then
		--当前卡牌
		self.curDefSelSlot = treeNodeSlot;
	end

	SetSoldierSlotBindInfoPUI(treeNodeSlot.ctlUnitBox, viewCard);
	treeNodeSlot.bindCard = viewCard;
	treeNodeSlot.treeNodeInfo = _treeNode;
	UpdateSoldierSlotPUI(treeNodeSlot.ctlUnitBox, false, true);

	self.treeNodeList[_treeNode] = treeNodeSlot;
	self.itemsRoot:AddChild(tagSlotView);

	return treeNodeSlot;
end

function SoldierUpgradeSubWin:LinkSlotsInSkillPage(tagSlot, fromSlot, _isActive)
	if tagSlot ~= nil and fromSlot ~= nil then
		local p1 = tagSlot.bindView.position;
		local p2 = fromSlot.bindView.position;
		local deltaX = math.abs(p1.x - p2.x);
		local deltaY = math.abs(p1.y - p2.y);
		local pStart = p1;
		local pEnd = p2;
		if p2.x < p1.x then
			pStart = p2;
			pEnd = p1;
		end
		if deltaY < 3 then
			self:AddLinkLine(pStart, deltaX, false, _isActive);
		else
			local midX = (p1.x + p2.x) * 0.5;
			local minY = p1.y;
			local maxY = p2.y;
			if p2.y < minY then
				minY = p2.y;
				maxY = p1.y;
			end
			local m1 = Vector2(midX, minY);
			local m2 = Vector2(midX, maxY);
			local m3 = Vector2(midX, pEnd.y);
			self:AddLinkLine(pStart, m1.x - pStart.x, false, _isActive);
			self:AddLinkLine(m1, m2.y - m1.y, true, _isActive);
			self:AddLinkLine(m3, pEnd.x - m2.x, false, _isActive);
		end
	end
end

function SoldierUpgradeSubWin:LinkAllParentRoutes(_fromSlot)
	if _fromSlot ~= nil and self.curCard ~= nil then
		local parentSlot = _fromSlot;
		local nextNode;
		local nextSlot
		local startSlot = _fromSlot;
		local loopCounter = 0;
		while parentSlot ~= nil do
			parentSlot.slotState = 0;
			nextNode = parentSlot.treeNodeInfo:GetPrevNode(self.curCard);
			nextSlot = self.treeNodeList[nextNode];
			if nextSlot == nil then
				break;
			end
			self:LinkSlotsInSkillPage(nextSlot, parentSlot, true);
			parentSlot = nextSlot;
			if parentSlot == startSlot then
				break;
			end
			if loopCounter >= 99 then
				return;
			end
			loopCounter = loopCounter + 1;
		end
	end
end

function SoldierUpgradeSubWin:AddLinkLine(_fromPos, _lineLen, _isVDir, _isActive)
	local lineObj;
	local tagOrder = 0;
	if _isActive then
		lineObj = UIPackage.CreateObject(constPackageNewUI, "ui_upgrade_tree_routeline_2");
		tagOrder = 1;
	else
		lineObj = UIPackage.CreateObject(constPackageNewUI, "ui_upgrade_tree_routeline_1");
	end
	if lineObj ~= nil then
		local addLineImg = lineObj.asImage;
		if _isVDir then
			_fromPos.y = _fromPos.y - constLinkLineImgWidth * 0.5;
			addLineImg.pivot = Vector2(0.5, 0);
			addLineImg.pivotAsAnchor = true;
			addLineImg.height = _lineLen + constLinkLineImgWidth;
			addLineImg.width = constLinkLineImgWidth;
		else
			_fromPos.x = _fromPos.x - constLinkLineImgWidth * 0.5;
			addLineImg.pivot = Vector2(0, 0.5);
			addLineImg.pivotAsAnchor = true;
			addLineImg.width = _lineLen + constLinkLineImgWidth;
			addLineImg.height = constLinkLineImgWidth;
		end
		addLineImg.sortingOrder = tagOrder;
		addLineImg:SetXY(_fromPos.x, _fromPos.y);
		self.itemsRoot:AddChild(addLineImg);
	end
end

function SoldierUpgradeSubWin:OnClickTagNodeSlot(_treeNodeSlot)
	PlayButtonSound();

	self:SetCurSeledCardSlot(_treeNodeSlot);
end

function SetTreeNodeSlotSelected(_tagSlot, _isSeled)
    if _tagSlot.ctlUnitBox.bindBtn ~= nil then
        _tagSlot.ctlUnitBox.bindBtn.enabled = not _isSeled;
    end
	if _tagSlot.ctlUnitBox.selOnFrame ~= nil then
        _tagSlot.ctlUnitBox.selOnFrame.visible = _isSeled;
    end
end

function SoldierUpgradeSubWin:SetCurSeledCardSlot(_tagSlot)
	if self.curSeledSlot ~= nil then
		SetTreeNodeSlotSelected(self.curSeledSlot, false);
	end
	self.curSeledSlot = _tagSlot;
	if self.curSeledSlot ~= nil then
		SetTreeNodeSlotSelected(self.curSeledSlot, true);
		--设置选中焦点
		if self.compUpgrade.scrollPane ~= nil then
			self.compUpgrade.scrollPane:ScrollToView(self.curSeledSlot.ctlUnitBox.bindBtn, true);
		end
	end
	self:UpdateCurSeledCardUpgradeInfo();
end

function SoldierUpgradeSubWin:UpdateCurSeledCardUpgradeInfo()
	self.groupUpgrade.visible = true;
	if self.curCard ~= nil and self.curSeledSlot ~= nil and self.curSeledSlot.bindCard ~= nil then
		self.groupUnitInfo.visible = true;
		local curCard = self.curSeledSlot.bindCard;
		--更新基本信息
		local attackType = curCard:GetAttackType();
		local armorType = curCard:GetArmorType();
		local unitClass = curCard:GetUnitClassType();
		self.lbAttackType.icon = GetAttackTypeIcon(attackType);
		self.lbAttackType.tooltips = CS.GUIHelper.ConvertUGUIStr(CS.GUIHelper.GetAttackTypeDescInfo(attackType));
		self.lbArmorType.icon = GetArmorTypeIcon(armorType);
		self.lbArmorType.tooltips = CS.GUIHelper.ConvertUGUIStr(CS.GUIHelper.GetArmorTypeDescInfo(armorType));
		self.lbUnitClassType.icon = GetUnitClassIcon(unitClass);
		self.lbUnitClassType.tooltips = GetUnitClassName(unitClass);

		--更新技能表
		UpdateSimpleSkillList(self.lvSkills, curCard:GetAllSpList(), curCard);

		--渲染兵牌
		if self.imgModelHolder ~= nil then
			local tagModelInfo = curCard:GetUnit3DViewInfo();
			self.modelCtl = nil;
			if tagModelInfo ~= self.curModelInfo then
				self.modelCtl = CS.GUIHelper.CreateModelViewToTagGraphHolder(tagModelInfo,
										self.imgModelHolder);
				self.curModelInfo = tagModelInfo;
			end
		end

		--更新升级材料
		self.curUpgradeNode = self.curSeledSlot.upNode;
		self.upgradeMatItems = CS.CardLogic.GetPlayerCardUpgradeCost(self.curCard, curCard);
		self.ctlUpgradeMats:UpdateValsByItemList(self.upgradeMatItems, true);

		-- self.lvMatItems.visible = IsNextUpgrade(self.curDefSelSlot.bindCard,
		-- 	self.curSeledSlot.bindCard)

		self.btnUpgrade.enabled = false;
		self.btnUpgrade.visible = true;
		self.btnUpgrade.title = GetGameString("lua_SoldierUpgradeSubWin_UpdateCurSeledCardUpgradeInfo_1");

		if self.upgradeMatItems ~= nil then
			if not GameCoreHelper.CheckInventoryForItems(self.upgradeMatItems) then
				self.btnUpgrade.enabled = false;
				self.btnUpgrade.title = GetGameString("lua_SoldierUpgradeSubWin_UpdateCurSeledCardUpgradeInfo_1");
			else
				self.btnUpgrade.enabled = true;
				local upgradeCount = GetCardsCountCanUpgrade(GameCoreHelper.GetPlayerUnitCardsSnapshot() ,curCard.bindID)
				if upgradeCount <= 1 then
					self.btnUpgrade.title = GetGameString("lua_SoldierUpgradeSubWin_UpdateCurSeledCardUpgradeInfo_1");
				else
					self.btnUpgrade.title = GetGameString("lua_SoldierUpgradeSubWin_UpdateCurSeledCardUpgradeInfo_2");
				end
			end
		end

		if self.curSeledSlot.slotState ~= 2 then
			self.btnUpgrade.visible = false
		end

		if self.curUpgradeNode ~= nil then
			self.txtUpgradeInfo.visible = false;
			if not IsEmptyOrNil(self.curUpgradeNode.upgradCondi.ConditionInfo) then
				self.txtUpgradeInfo.visible = true;
				self.txtUpgradeInfo.text = GetGameString("lua_script_str_255") .. self.curUpgradeNode.upgradCondi.ConditionInfo;
			end
		else
			self.txtUpgradeInfo.visible = false;
		end
	else
		self.groupUnitInfo.visible = false;
	end
end