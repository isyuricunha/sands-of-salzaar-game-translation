require("gui/WindowUtils")
require("GameUtils")
require("gui/SkillPagesSubWin")
require("gui/HeroAttributeSubWin")
require("gui/SoldierAttributeSubWin")
require("gui/SoldierDisposeSubWin")
require("gui/SoldierUpgradeSubWin")
require("gui/MatchWindowFoot")

--require("LuaPanda").start("127.0.0.1",8818)

--页面访问控件
local contentPane;
--玩家队伍中的单位卡牌
local lvPartyList;
local lvHeroesList;
local lvSoldiersList;
local lbTeamInfo;
local lbHeroListInfo;
local lbSodierListInfo;
local cmbAttackType;
local cmbArmorType;
local cmbClassType;

local lvCmdBtns;
local btnHeroDetail;
local btnHeroSkills;
local btnSoldierDetail;
local btnTalkTo;
local btnSoldierDispose;
local btnSoldierUpgrade;

local groupSubPages;
local subpageHeroDetail;
local subpageHeroSkill;
local subpageSoldierDetail;
local subpageSoldierDispose;
local subpageSoldierUpgrade;

local btnClose;

local popupMask = nil;

local timerTickInterval = 0.05

local curDlgState = 0;

local curTeam;

local GameCoreHelper = CS.GameCoreHelper;
local GameTools = CS.GameTools;
local ArchiveData = CS.HanFramework.ArchiveData

local _showRoleCount = 3;
local _showSoldierCardCount = 5;
local curRoleCount = 0;
local curSoldierCount = 0;

local curSeledCardInfo = nil;
local curSeledSlot = nil;

local ctlCurSubPage = nil;

local gameWorld = nil;
local playerRole = nil;
local playerTeam = nil;

local curRoleSlotsList = nil;
local curSoldierSlotsList = nil;

local curDestPageID;
local curSeledTabBtn = nil;
local curDestPageID = nil;

local isInEvent = false;

local sceneMsgHandler;

local _defSubPage = nil;
local _defTagRole = nil;

--窗体初始化时
function onInit()
	contentPane = self.contentPane

	playerRole = GameCoreHelper.GetPlayerRole();

	gameWorld = GameCoreHelper.GetCurGameWorld();
	playerTeam = GameCoreHelper.GetPlayerTeam();

	lvPartyList = contentPane:GetChild("party_list").asList;

	lbTeamInfo = lvPartyList:GetChildAt(0).asLabel;
	lbHeroListInfo = lvPartyList:GetChildAt(1).asLabel;
	local tagComp = lvPartyList:GetChildAt(2).asCom;
	lvHeroesList = tagComp:GetChild("items_list").asList;
	lbSodierListInfo = lvPartyList:GetChildAt(4).asLabel;
	local compFilters = lvPartyList:GetChildAt(5).asCom;
	tagComp = lvPartyList:GetChildAt(6).asCom;
	lvSoldiersList = tagComp:GetChild("items_list").asList;

	local allAtkTypes = GetAllAttackTypes();
	local comboInfos = "-1," .. GetGameString("lua_script_str_199") .. ",";
	for k, v in pairs(allAtkTypes) do
		comboInfos = comboInfos .. ";" .. v.key .. "," .. v.val[1] .. "," .. v.val[2];
	end
	cmbAttackType = CreateUnitFilterCtl(compFilters:GetChild("cmb_attacktype").asComboBox, comboInfos);
	local allArmorTypes = GetAllArmorTypes();
	comboInfos = "-1," .. GetGameString("lua_script_str_200") .. ",";
	for k, v in pairs(allArmorTypes) do
		comboInfos = comboInfos .. ";" .. v.key .. "," .. v.val[1] .. "," .. v.val[2];
	end
	cmbArmorType = CreateUnitFilterCtl(compFilters:GetChild("cmb_armortype").asComboBox, comboInfos);
	local allUnitTypes = GetAllUnitClassTypes();
	comboInfos = "-1," .. GetGameString("lua_script_str_201") .. ",";
	for k, v in pairs(allUnitTypes) do
		comboInfos = comboInfos .. ";" .. v.key .. "," .. v.val[1] .. "," .. v.val[2];
	end
	cmbClassType = CreateUnitFilterCtl(compFilters:GetChild("cmb_unitclass").asComboBox, comboInfos);

	lvCmdBtns = contentPane:GetChild("lv_page_tabs").asList;

	btnHeroDetail = lvCmdBtns:GetChildAt(0).asButton;
	btnHeroDetail.onClick:Add(onClickBtnHeroDetail);
	btnHeroSkills = lvCmdBtns:GetChildAt(1).asButton;
	btnHeroSkills.onClick:Add(onClickBtnSkill);
	btnTalkTo = lvCmdBtns:GetChildAt(2).asButton;
	btnTalkTo.onClick:Add(onClickBtnTalk);
	btnSoldierDetail = lvCmdBtns:GetChildAt(3).asButton;
	btnSoldierDetail.onClick:Add(onClickBtnSoldierDetail);
	btnSoldierUpgrade = lvCmdBtns:GetChildAt(4).asButton;
	btnSoldierUpgrade.onClick:Add(onClickBtnSoldierUpgrade);
	btnSoldierDispose = lvCmdBtns:GetChildAt(5).asButton;
	btnSoldierDispose.onClick:Add(onClickBtnSoldierDispose);

	--创建提示标记
	markBtnSkill = AddAlertMarkToBtn(btnHeroSkills);
	markBtnSkill.visible = false;
	markBtnUpgrade = AddAlertMarkToBtn(btnSoldierUpgrade);
	markBtnUpgrade.visible = false;

	groupSubPages = contentPane:GetChild("sub_pages").asGroup;
	subpageHeroDetail = contentPane:GetChildInGroup(groupSubPages, "com_herodetail").asCom;
	subpageHeroDetail.visible = false;
	subpageHeroSkill = contentPane:GetChildInGroup(groupSubPages, "com_skillpages").asCom;
	subpageHeroSkill.visible = false;
	subpageSoldierDetail = contentPane:GetChildInGroup(groupSubPages, "com_unitdetail").asCom;
	subpageSoldierDetail.visible = false;
	subpageSoldierDispose = contentPane:GetChildInGroup(groupSubPages, "com_dispose").asCom;
	subpageSoldierDispose.visible = false;
	subpageSoldierUpgrade = contentPane:GetChildInGroup(groupSubPages, "com_upgrade").asCom;
	subpageSoldierUpgrade.visible = false;

	btnClose = contentPane:GetChild("btn_close").asButton;
	btnClose.onClick:Add(onClickBtnClose);

	cmbAttackType.bindCombo.onChanged:Add(onUnitFilterChanged);
	cmbArmorType.bindCombo.onChanged:Add(onUnitFilterChanged);
	cmbClassType.bindCombo.onChanged:Add(onUnitFilterChanged);

	popupMask = contentPane:GetChild("mask").asGraph;
	popupMask.visible = false;

	--设置默认值
	self:SetCloseButton(btnClose);

	curDlgState = 0;
	curTeam = GameCoreHelper.GetPlayerTeam();

	curSeledCardInfo = nil;
	_defSubPage = nil;
	_defTagRole = nil;
	local strDefPageArg = self:GetWindowArgVal("def_page");
	if not IsEmptyOrNil(strDefPageArg) then
		local argLines = SplitStr(strDefPageArg, "/");
        if #argLines >= 1 then
            _defSubPage = argLines[1];
        end
        if #argLines >= 2 then
            _defTagRole = argLines[2];
        end
	end

	--初始事件
	RefreshPartyMembers(false);
end

function AddAlertMarkToBtn(_tagBtn)
	return CS.GUIHelper.CreateAlertMarkForTag(_tagBtn, 3, CS.UnityEngine.Vector2(18, -3), "NewUI", "IconAlertMarker");
end

function OnSceneMsgHandler(msgType, msgArg)
	if msgType == "update_party_ui" then
		UpdateMemberList();
	elseif msgType == "close_ui" then
		if msgArg == "party" then
			onClickBtnClose();
		end
	end
end

--窗体开始显示并播放显示动画时
function onDoShowAnimation()
	CommonShowWindowAnim(self, onShown)
end

--窗体播放完显示动画时
function onShown()
	--增加计时器事件
	CS.FairyGUI.Timers.inst:Add(timerTickInterval, 0, onTimerTickUpdate);
	sceneMsgHandler = CS.GUIHelper.RegSceneMsgHandler(OnSceneMsgHandler);

	curDlgState = 1;
end

--窗体开始播放关闭动画时
function onDoHideAnimation()
	curDlgState = -1;
	CommonHideWindowAnim(self, onHideAnimationDone)
end

function onHideAnimationDone()
	self:HideImmediately();
end

--窗体隐藏时
function onHide()
	curDlgState = -1;

	--检查技能快捷栏有效性
	CS.GUIHelper.CheckPlayerQuickSlotList();

	--移除计时器事件
	CS.FairyGUI.Timers.inst:Remove(onTimerTickUpdate);

	if sceneMsgHandler ~= nil then
		CS.GUIHelper.RemoveSceneMsgHandler(sceneMsgHandler)
	end

	--关闭所有弹出框
	CS.GUIHelper.CloseAllPopupWindow();

	--清理缓存
	--CS.GUIHelper.ReleaseCachedGuiTexs();
end

--重载按键事件
function onKeyDown(_keyCode)
	local hotkeyCode = CS.GUIHelper.GetHotkeyValByKeycode(_keyCode, "common");
	if hotkeyCode > 0 then
		if hotkeyCode == 1 then
			onClickBtnClose();
			return true;
		end
	end
	return false
end

function onTimerTickUpdate()
	if curDlgState ~= 1 then
		return;
	end
	if curTeam ~= nil and curTeam.isTeamUpdated then
		UpdateTeamInfos();
		curTeam.isTeamUpdated = false;
	end

	if ctlCurSubPage ~= nil and ctlCurSubPage.isRunUpdate ~= nil and ctlCurSubPage.isRunUpdate then
		ctlCurSubPage.uiController:RunUpdate(timerTickInterval);
	end

	if not IsBlockMaskShow() and gameWorld:IsEventQueueBusying() then
		isInEvent = true;
		SetBlockMask(true);
	elseif isInEvent and not gameWorld:IsEventQueueBusying() then
		SetBlockMask(false);
		isInEvent = false;
	end
end

--UI逻辑
function UpdateTeamInfos()
	RefreshPartyMembers(false);

end

function RefreshPartyListByDefCard(_tagCard, _dontResetCurSel)
	curSeledCardInfo = _tagCard;
	RefreshPartyMembers(_dontResetCurSel);
end

function RefreshPartyMembers(_dontResetCurSel)
	if _dontResetCurSel ~= true then
		SetCurSeledCardSlot(nil);
	end

	local defSelCardSlot = nil;

	--渲染英雄卡
	_showRoleCount = CS.CardLogic.GetRolesCapacity(curTeam);

	lvHeroesList.numItems = 0;
	curRoleSlotsList = {};
	--遍历角色表
	local tagRoleInfo;
	local curRoleList = curTeam.rolesInTeam;
	local tagSlotInfo;
	curRoleCount = 0;
	local isDefSelRole = false;
	if not IsEmptyOrNil(_defTagRole) then
		isDefSelRole = true;
	end
	local _playerSlot = nil;
	for index=0,curRoleList.Count-1 do
		--if index >= _showRoleCount then
			--break;
		--end
		tagRoleInfo = curRoleList[index];
		tagSlotInfo = AddHeroSlotViewPUI(tagRoleInfo, 0, lvHeroesList, OnClickTagCardSlot);
		table.insert(curRoleSlotsList, tagSlotInfo);
		curRoleCount = curRoleCount + 1;
		if tagRoleInfo:IsPlayer() or tagRoleInfo == playerRole then
			_playerSlot = tagSlotInfo;
		end
		if curSeledCardInfo == nil then
			if isDefSelRole and tagRoleInfo.roleID == _defTagRole then
				defSelCardSlot = tagSlotInfo;
			end
		elseif tagSlotInfo.cardInfo == curSeledCardInfo then
			defSelCardSlot = tagSlotInfo;
		end
    end

	lbHeroListInfo.title = GameCoreHelper.StringFormat("{0}/{1}", curRoleCount, _showRoleCount);

	--渲染兵卡
	_showSoldierCardCount = CS.CardLogic.GetSoldierCardsCapacity(curTeam);

	lvSoldiersList.numItems = 0;
	curSoldierSlotsList = {};

	local isFiltedAtkType = false;
	local isFiltedArmorType = false;
	local isFiltedUnitClass = false;
	local curFiltedAtkType = nil;
	local curFiltedArmorType  = nil;
	local curFiltedUnitClass = nil;
	if cmbAttackType.bindCombo.selectedIndex > 0 then
		isFiltedAtkType = true;
		curFiltedAtkType = math.floor(tonumber(cmbAttackType.bindCombo.value));
	end
	if cmbArmorType.bindCombo.selectedIndex > 0 then
		isFiltedArmorType = true;
		curFiltedArmorType  = math.floor(tonumber(cmbArmorType.bindCombo.value));
	end
	if cmbClassType.bindCombo.selectedIndex > 0 then
		isFiltedUnitClass = true;
		curFiltedUnitClass = cmbClassType.bindCombo.value
	end

	--遍历小兵表
	curSoldierCount = 0;
	local tagSoldierCard;
	local curSoldierList = curTeam.soldierCardsInTeam;
	local isPass;
	for index=0,curSoldierList.Count-1 do
		tagSoldierCard = curSoldierList[index];
		curSoldierCount = curSoldierCount + 1;
		isPass = true;
		if isFiltedAtkType then
			if tagSoldierCard:GetAttackType() ~= curFiltedAtkType then
				isPass = false;
			end
		end
		if isFiltedArmorType then
			if tagSoldierCard:GetArmorType() ~= curFiltedArmorType then
				isPass = false;
			end
		end
		if isFiltedUnitClass then
			if tagSoldierCard:GetUnitClassType() ~= curFiltedUnitClass then
				isPass = false;
			end
		end
		if isPass then
			tagSlotInfo = AddSoldierSlotViewPUI(tagSoldierCard, 0, lvSoldiersList, OnClickTagCardSlot);
			table.insert(curSoldierSlotsList, tagSlotInfo);
			if tagSlotInfo.cardInfo == curSeledCardInfo then
				defSelCardSlot = tagSlotInfo;
			end
		end
	end
	lbSodierListInfo.title = GameCoreHelper.StringFormat("{0}/{1}", curSoldierCount, _showSoldierCardCount);

	lvHeroesList:ResizeToFit();
	lvSoldiersList:ResizeToFit();

	if defSelCardSlot == nil then
		defSelCardSlot = _playerSlot;
	end

	--更新队伍信息
	lbTeamInfo.title = curTeam:GetTeamNameInfo();
	UpdateMemberList();
	SelectTagCard(defSelCardSlot, true);

	if not IsEmptyOrNil(_defSubPage) then
		SetCurSubPage(_defSubPage, false, false);
		_defSubPage = nil;
	end

	curTeam.isTeamUpdated = false;
end

function UpdateMemberList()
	for k,v in pairs(curRoleSlotsList) do
		if v ~= nil then
			UpdateHeroSlotPUI(v, true);
		end
	end
	for k,v in pairs(curSoldierSlotsList) do
		if v ~= nil then
			UpdateSoldierSlotPUI(v, true, false);
			local cardPojo = v.cardInfo.BindCardInfo
			if cardPojo.quality == 5 and not CanUpgradeT6(cardPojo) then
				SetSoldierSlotAlert(v, false);
			end
		end
	end
end

function onClickBtnTalk()
	PlayButtonSound()

	if curSeledCardInfo ~= nil then
		local tagRole = curSeledCardInfo.BindRole;
		if tagRole ~= nil then
			TalkToTagRole(tagRole);
		end
	end
end

function onClickBtnHeroDetail()
	PlayButtonSound()

	SetCurSubPage("hero_detail", false, false);
end

function TalkToTagRole(role)
	if not playerTeam:ContainsRole(role) then
		GameTools.DebugLogError("内部错误:对话的角色不在队伍。");
		return false;
	end

	local curRtVals = GameCoreHelper.CreateEmptyRuntimeArgVal();
	curRtVals.CurTagRoleID = role.roleID;
	if role ~= nil and not role:IsTemplateRole() then
		role:SetPlayerContactActive();
	end

	local tagTrigger = gameWorld:GetBindTrigger("talk", "TEAMHERO", role.roleID, curRtVals);
	if tagTrigger ~= nil then
		if gameWorld:CheckTrigger(tagTrigger.Key, curRtVals) then
			return true;
		end
	end

	local defTalks = role:getRoleTemplate():getDefTalks();
	if not IsEmptyOrNil(defTalks) then
		SetBlockMask(true);
		CS.GUIHelper.ShowRoleTalkDialog(role.roleID, defTalks, function(ret)
			SetBlockMask(false);
		end);
		return true;
	end

	return false;
end

function onClickBtnSkill()
	PlayButtonSound()

	SetCurSubPage("hero_skill", false, false);
end

function UpdateBtnsView()
	SetCmdBtnVisible(btnHeroDetail, false);
	SetCmdBtnVisible(btnHeroSkills, false);
	SetCmdBtnVisible(btnSoldierDetail, false);
	SetCmdBtnVisible(btnSoldierDispose, false);
	SetCmdBtnVisible(btnSoldierUpgrade, false);
	SetCmdBtnVisible(btnTalkTo, false);

	if curSeledCardInfo ~= nil then
		local cardType = curSeledCardInfo:GetCardType();
		if cardType == 1 then
			--角色牌并且不是主角
			SetCmdBtnVisible(btnHeroDetail, true);
			SetCmdBtnVisible(btnHeroSkills, true);
			local tagRole = curSeledCardInfo.BindRole;
			if tagRole ~= nil and tagRole ~= playerRole then
				SetCmdBtnVisible(btnTalkTo, true);
			end
			if tagRole:IsLeaveTeamEnable() then
				--SetCmdBtnVisible(btnKickRole, true);
			end

			if curSeledSlot ~= nil and curSeledSlot.imgAlertMark ~= nil and curSeledSlot.imgAlertMark.visible then
				markBtnSkill.visible = true;
			else
				markBtnSkill.visible = false;
			end
			if curSeledCardInfo.BindRole:IsLeaveTeamEnable() then
				--SetCmdBtnVisible(btnKickRole, true);
			end
		else
			SetCmdBtnVisible(btnSoldierDetail, true);
			SetCmdBtnVisible(btnSoldierDispose, true);

			if curSeledCardInfo:IsSyntheEnable() then
				--SetCmdBtnVisible(btnSynth, true);
			end

			if not CS.GameConfig.noCardAutoSupply and curSeledCardInfo:IsMendable() then
				--SetCmdBtnVisible(btnMend, true);
			end

			markBtnUpgrade.visible = false;
			if CS.GameConfig.enableCardUpgrade and cardType == 0 and curSeledCardInfo:IsUpgradeInfoValid() and curSeledCardInfo.CurAvailable > 0 then
				SetCmdBtnVisible(btnSoldierUpgrade, true);
				if curSeledSlot ~= nil and curSeledSlot.imgAlertMark ~= nil and curSeledSlot.imgAlertMark.visible then
					markBtnUpgrade.visible = true;
				end
			end

			if curSeledCardInfo:IsDisposeEnable() then
				--SetCmdBtnVisible(btnHandle, true);
			end
        end
	end


end

function SetCmdBtnVisible(_tagBtn, _isShow)
	if _tagBtn ~= nil then
		_tagBtn.visible = _isShow;
	end
end

function OnClickTagCardSlot(_tagSlot)
	PlayButtonSound();
	if _tagSlot.cardInfo ~= nil then
		SelectTagCard(_tagSlot, false);
	end
end

function SelectTagCard(_tagSlot, _forceUpdate)
	local lastType = -1;
	local lastSlot = curSeledSlot;
	local isUpgradePage = false;
	if curSeledSlot ~= nil then
		lastType = curSeledSlot.slotType;
	end
	--if ctlCurSubPage ~= nil and ctlCurSubPage.pageID == "soldier_upgrade" then
	--	isUpgradePage = true;
	--end
	curDestSlot = _tagSlot;
	SetCurSeledCardSlot(_tagSlot);
	local isOpSuccess = true;
	if _tagSlot ~= nil then
		curSeledCardInfo = _tagSlot.cardInfo;
		--设置默认页面
		local bIsNeedReset = false;
		if lastType ~= _tagSlot.slotType then
			bIsNeedReset = true;
		else
			if isUpgradePage then
				--bIsNeedReset = true;
			else
				if ctlCurSubPage ~= nil then
					isOpSuccess = SetCurSubPage(ctlCurSubPage.pageID, _forceUpdate, true);
				end
			end
		end
		if bIsNeedReset then
			if _tagSlot.slotType == 1 then
				isOpSuccess = SetCurSubPage("soldier_detail", _forceUpdate, true);
			else
				isOpSuccess = SetCurSubPage("hero_detail", _forceUpdate, true);
			end
		end
	end
	if isOpSuccess then
		UpdateBtnsView();
	else
		SetCurSeledCardSlot(lastSlot);
	end
end

function SetCurSeledCardSlot(_tagSlot)
	if curSeledSlot ~= nil then
		SetMemberSlotSelected(curSeledSlot, false);
	end
	curSeledSlot = _tagSlot;
	if curSeledSlot ~= nil then
		SetMemberSlotSelected(curSeledSlot, true);
	end
end

function SetMemberSlotSelected(_tagSlot, _isSeled)
    if _tagSlot.bindBtn ~= nil then
        _tagSlot.bindBtn.enabled = not _isSeled;
    end
	if _tagSlot.selOnFrame ~= nil then
        _tagSlot.selOnFrame.visible = _isSeled;
    end
end

function onClickBtnClose()
	PlayButtonSound();

	self.CurDialogResult = -1;
	self:Hide();
end

function onUnitFilterChanged()
	RefreshPartyMembers(true);
end

function onClickBtnSoldierDetail()
	PlayButtonSound()

	SetCurSubPage("soldier_detail", false, false);
end

function onClickBtnSoldierDispose()
	PlayButtonSound()

	SetCurSubPage("soldier_dispose", false, false);
end

function onClickBtnSoldierUpgrade()
	PlayButtonSound()

	SetCurSubPage("soldier_upgrade", false, false);
end

function SetCurSubPage(_pageID, _forceChg, _bySetTag)
	local lastPage = ctlCurSubPage;
	if lastPage ~= nil then
		if _forceChg then
			DoHideOldPage(lastPage);
		else
			if not TryHideOldPage(lastPage, function()
				if _bySetTag and curDestSlot ~= nil then
					SetCurSeledCardSlot(curDestSlot);
				end
				SetCurSubPage(curDestPageID, true, false);
			end) then
				return false;
			end
		end
	end
	curDestPageID = _pageID;
	local curPageComp;
	if _pageID == "hero_detail" then
		curPageComp = subpageHeroDetail;
	elseif _pageID == "hero_skill" then
		curPageComp = subpageHeroSkill;
	elseif _pageID == "soldier_detail" then
		curPageComp = subpageSoldierDetail;
	elseif _pageID == "soldier_dispose" then
		curPageComp = subpageSoldierDispose;
	elseif _pageID == "soldier_upgrade" then
		curPageComp = subpageSoldierUpgrade;
	end
	if curPageComp ~= nil then
		ctlCurSubPage = curPageComp.data;
		if ctlCurSubPage == nil then
			ctlCurSubPage = {};
			--初始化子页面控件
			ctlCurSubPage.bindView = curPageComp;
			ctlCurSubPage.isRunUpdate = false;

			curPageComp.data = ctlCurSubPage;
		end
		ctlCurSubPage.pageID = _pageID;
		OnShowNewSubPage(ctlCurSubPage);
	else
		ctlCurSubPage = nil;
	end

	local tagTabBtn = GetTabBtnByID(_pageID);
	SetCurTabBtn(tagTabBtn);
	return true;
end

function TryHideOldPage(_ctlCurPage, _confirmOp)
	if _ctlCurPage == nil then
		return true;
	end
	if _ctlCurPage.TryLeave ~= nil then
		local bRet, sInfo = _ctlCurPage.TryLeave();
		if not bRet then
			ShowConfirmDlg(sInfo, "yesno", function(ret)
				if ret == 1 then
					if _confirmOp ~= nil then
						_confirmOp();
					end
				end
			end);
			return false;
		end
	end
	DoHideOldPage(_ctlCurPage)
	return true;
end

function DoHideOldPage(_ctlCurPage)
	if _ctlCurPage == nil then
		return;
	end
	_ctlCurPage.bindView.visible = false;
end

function OnShowNewSubPage(_ctlCurPage)
	if _ctlCurPage == nil then
		return;
	end
	if _ctlCurPage.uiController == nil then
		local _pageID = _ctlCurPage.pageID;
		_ctlCurPage.OnUpdate = nil;
		_ctlCurPage.TryLeave = nil;
		if _pageID == "hero_detail" then
			--初始化角色详情界面
			local ctlDetail = HeroAttributeSubWin:Create();
			ctlDetail:Init(ctlCurSubPage.bindView, true);
			ctlDetail:SetViewStyle(0);

			_ctlCurPage.uiController = ctlDetail;
			_ctlCurPage.OnUpdate = function(_curSlot)
				if _curSlot ~= nil and _curSlot.bindRole ~= nil then
					ctlDetail:SetCurRole(_curSlot.bindRole);
				end
			end;

			ctlDetail.RefreshParentListCallback = function(_tagCard, _dontResetCurSel)
				RefreshPartyListByDefCard(_tagCard, _dontResetCurSel);
			end;
		elseif _pageID == "hero_skill" then
			--初始化角色技能子界面
			local ctlSkills = SkillPagesSubWin:Create();
			ctlSkills:Init(ctlCurSubPage.bindView:GetChild("sill_pages").asCom);

			_ctlCurPage.uiController = ctlSkills;
			--刷新角色接口
			_ctlCurPage.OnUpdate = function(_curSlot)
				if _curSlot ~= nil and _curSlot.bindRole ~= nil then
					ctlSkills:SetCurRole(_curSlot.bindRole);
				end
			end
			--离开页面接口
			_ctlCurPage.TryLeave = function()
				if ctlSkills:IsChanged() then
					return false, GetGameString("lua_script_str_202");
				end
				return true, nil;
			end
			ctlSkills.RefreshParentListCallback = function(_tagCard, _dontResetCurSel)
				RefreshPartyListByDefCard(_tagCard, _dontResetCurSel);
			end;
		elseif _pageID == "soldier_detail" then
			--初始化兵种详情界面
			local ctlDetail = SoldierAttributeSubWin:Create();
			ctlDetail:Init(ctlCurSubPage.bindView, true);
			ctlDetail:SetViewStyle(0);

			_ctlCurPage.uiController = ctlDetail;
			_ctlCurPage.OnUpdate = function(_curSlot)
				if _curSlot ~= nil and _curSlot.cardInfo ~= nil then
					ctlDetail:SetCurCard(_curSlot.cardInfo);
				end
			end;
			ctlDetail.RefreshParentListCallback = function(_tagCard, _dontResetCurSel)
				RefreshPartyListByDefCard(_tagCard, _dontResetCurSel);
			end;
		elseif _pageID == "soldier_dispose" then
			--初始化兵种详情界面
			local ctlDetail = SoldierDisposeSubWin:Create();
			ctlDetail:Init(ctlCurSubPage.bindView);
			_ctlCurPage.isRunUpdate = true;

			_ctlCurPage.uiController = ctlDetail;
			_ctlCurPage.OnUpdate = function(_curSlot)
				if _curSlot ~= nil and _curSlot.cardInfo ~= nil then
					ctlDetail:SetCurCard(_curSlot.cardInfo);
				end
			end;
			ctlDetail.RefreshParentListCallback = function(_tagCard, _dontResetCurSel)
				RefreshPartyListByDefCard(_tagCard, _dontResetCurSel);
			end;
		elseif _pageID == "soldier_upgrade" then
			--初始化兵种详情界面
			local ctlDetail = SoldierUpgradeSubWin:Create();
			ctlDetail:Init(ctlCurSubPage.bindView);
			ctlDetail.RefreshParentListCallback = function(_tagCard, _dontResetCurSel)
				RefreshPartyListByDefCard(_tagCard, _dontResetCurSel);
			end;

			_ctlCurPage.uiController = ctlDetail;
			_ctlCurPage.OnUpdate = function(_curSlot)
				if _curSlot ~= nil and _curSlot.cardInfo ~= nil then
					ctlDetail:SetCurCard(_curSlot.cardInfo);
				end
			end;
		elseif _pageID == "talk_to" then
			_ctlCurPage.OnUpdate = nil;
		end
	end
	_ctlCurPage.bindView.visible = true;
	UpdateSubPageView(_ctlCurPage);
end

function UpdateSubPageView(_ctlCurPage)
	if _ctlCurPage ~= nil then
		if _ctlCurPage.OnUpdate ~= nil then
			_ctlCurPage.OnUpdate(curSeledSlot);
		end
	end
end

function GetTabBtnByID(_pageID)
	if _pageID == "hero_detail" then
		return btnHeroDetail;
	elseif _pageID == "hero_skill" then
		return btnHeroSkills;
	elseif _pageID == "soldier_detail" then
		return btnSoldierDetail;
	elseif _pageID == "soldier_dispose" then
		return btnSoldierDispose;
	elseif _pageID == "soldier_upgrade" then
		return btnSoldierUpgrade;
	elseif _pageID == "talk_to" then
		--return btnTalkTo;
	end
	return nil;
end

function SetCurTabBtn(_newBtn)
	if curSeledTabBtn ~= nil then
		curSeledTabBtn.enabled = true;
	end
	curSeledTabBtn = _newBtn;
	if curSeledTabBtn ~= nil then
		curSeledTabBtn.enabled = false;
	end
end

function SetBlockMask(_isShow)
	popupMask.visible = _isShow;
end

function IsBlockMaskShow()
	return popupMask.visible;
end

--创建单位筛选器控件
function CreateUnitFilterCtl(_tagCombo, _selInfo)
	local _ctlCombo = {};
	_ctlCombo.bindCombo = _tagCombo;
	_ctlCombo.bindCtl = _tagCombo:GetController("show_icon");
	CS.GUIHelper.SetComboBoxItems(_tagCombo, _selInfo);
	_tagCombo.onChanged:Set(function()
		if _tagCombo.selectedIndex == 0 then
			_ctlCombo.bindCtl.selectedIndex = 0;
		else
			_ctlCombo.bindCtl.selectedIndex = 1;
		end
		UpdateFilerResult();
	end);
	return _ctlCombo;
end

function UpdateFilerResult()

end
