require("gui/WindowUtils")
require("GameUtils")

local GameCoreHelper = CS.GameCoreHelper

--页面访问控件
local contentPane;

local btnClose;

--local imgIcon;
local txtTitle;
local lvDetailInfo;

local groupKeyInfo;
local compKeyInfo;

local titleInfo;
local descList;

local lastIconUrl = nil;

--弹出窗体初始化时
function onCreate()
	contentPane = self.mainView

	titleInfo = self.CustomData;
	descList = self.ArgData1;
	requireInfo = self.ArgData2;

	txtTitle = contentPane:GetChild("item_name").asTextField;
	lvDetailInfo = contentPane:GetChild("detail_list").asList;

	groupKeyInfo = contentPane:GetChild("g_keysinfo").asGroup;
	compKeyInfo= contentPane:GetChildInGroup(groupKeyInfo, "key_info").asCom;
	groupKeyInfo.visible = false;

	--绑定按钮事件
	btnClose = contentPane:GetChild("close_btn").asButton;
	btnClose.visible = false;
	btnClose.onClick:Set(onCloseBtnClicked);

	CommonShowWindowAnim(contentPane, nil);

	UpdateInfo();
end

--弹出窗体移除时
function onRemoved()

end

function HideWindow()
	CommonHideWindowAnim(contentPane, onHideAnimationDone);
end

function onHideAnimationDone()
	self:HideWindow();
end

function onCloseBtnClicked()
	PlayButtonSound();

	HideWindow();
end

function UpdateInfo()
	txtTitle.text = CS.GUIHelper.ConvertUGUIStr(titleInfo);

	if descList == nil then
		return;
	end
	local tagDescLine;
	for index=0,descList.Count-1 do
        tagDescLine = descList[index];
		if tagDescLine ~= nil then
			if tagDescLine.itemType == 1 then
				--技能描述
				AddSkillInfoLine(tagDescLine.itemInfo);
			elseif tagDescLine.itemType == 2 then
				--技能表
				AddSkillListLine(tagDescLine.itemInfo);
			else
				if IsEmptyOrNil(tagDescLine.itemInfo) then
					AddBlankLine(20);
				else
					AddDescInfoLine(tagDescLine.itemInfo);
				end
			end
		else
			AddBlankLine(20);
		end
    end

	--解锁条件提示
	if (not IsEmptyOrNil(requireInfo)) then
		AddBlankLine(20);
		AddRequireInfoLine(requireInfo);
	end

	lvDetailInfo:ResizeToFit();

end

function GetSubmitKeyCode()
	if CS.GameTools.IsJoystickConnected() then
		return "Submit";
	else
		return "MLB";
	end
end

function GetRemoveKeyCode()
	if CS.GameTools.IsJoystickConnected() then
		return "BtnX";
	else
		return "MRB";
	end
end

function SetKeyInfo(_isShow, _keyInfo)
	if _isShow then
		CS.GUIHelper.SetJoystickKeyInfo(_keyInfo, compKeyInfo);
		groupKeyInfo.visible = true;
	else
		groupKeyInfo.visible = false;
	end
end

function AddBlankLine(_height)
	local tagCom = "ItemDetailInfoBlank1"
	if IsMobileMode then
		tagCom = "ItemDetailInfoBlank1M"
	end
	local tagListObj = UIPackage.CreateObject("NewUI", tagCom).asLabel;
	lvDetailInfo:AddChild(tagListObj);
	if (tagListObj.data == nil) then
		tagItemView = {};
		tagItemView.bindLabel = tagListObj;

		tagListObj.data = tagItemView;
	else
		tagItemView = tagListObj.data;
	end
	if _height > 0 then
		tagListObj.height = _height;
	end
end

function AddDescInfoLine(_descInfo)
	local tagItemView = nil;
	local tagListObj
	if IsMobileMode then
		tagListObj = UIPackage.CreateObject("NewUI", "SkillInfoDetailInfoDesc1M").asLabel;
	else
		tagListObj = UIPackage.CreateObject("NewUI", "SkillInfoDetailInfoDesc1").asLabel;
	end
	lvDetailInfo:AddChild(tagListObj);
	if (tagListObj.data == nil) then
		tagItemView = {};
		tagItemView.bindLabel = tagListObj;

		tagListObj.data = tagItemView;
	else
		tagItemView = tagListObj.data;
	end
	tagItemView.bindLabel.text = CS.GUIHelper.ConvertUGUIStr(_descInfo);
end

function AddSkillInfoLine(_skillInfo)
	local tagItemView = nil;
	local tagListObj
	if IsMobileMode then
		tagListObj = UIPackage.CreateObject("NewUI", "LabelLagacySkillInfoItem1M").asLabel;
	else
		tagListObj = UIPackage.CreateObject("NewUI", "LabelLagacySkillInfoItem1").asLabel;
	end
	lvDetailInfo:AddChild(tagListObj);
	if (tagListObj.data == nil) then
		tagItemView = {};
		tagItemView.bindLabel = tagListObj;
		tagItemView.imgIcon = tagListObj:GetChild("icon").asLoader;
		tagItemView.txtLevel = tagListObj:GetChild("level").asTextField;

		tagListObj.data = tagItemView;
	else
		tagItemView = tagListObj.data;
	end

	local tagSp = GameCoreHelper.GetSkillPointByStr(_skillInfo);
	if tagSp ~= nil and tagSp.SkillInfo ~= nil then
		local _skillInfo = tagSp.SkillInfo;
		local descInfo = CS.GameTools.GetSkillDescForCard(tagSp, nil);
		tagItemView.bindLabel.text = CS.GUIHelper.ConvertUGUIStr(descInfo);
		tagItemView.imgIcon.url = CS.GUIHelper.GetItemSkillPathByName(_skillInfo.skill_icon);
		if _skillInfo.MaxLevel then
			tagItemView.txtLevel.visible = true;
			tagItemView.txtLevel.text = tostring(tagSp.skillLevel);
		else
			tagItemView.txtLevel.visible = false;
		end
	end
end

function AddSkillListLine(_spList)
	local tagItemView = nil;
	local tagListObj
	if IsMobileMode then
		tagListObj = UIPackage.CreateObject("NewUI", "LagacyDetailSkillListComp1M").asCom;
	else
		tagListObj = UIPackage.CreateObject("NewUI", "LagacyDetailSkillListComp1").asCom;
	end
	
	lvDetailInfo:AddChild(tagListObj);
	if (tagListObj.data == nil) then
		tagItemView = {};
		tagItemView.bindview = tagListObj;
		tagItemView.bindList = tagItemView.bindview:GetChild("detail_list").asList;

		tagListObj.data = tagItemView;
	else
		tagItemView = tagListObj.data;
	end

	CS.GUICtlSkillLabelList.CreateComponent(tagItemView.bindList, _spList)
end

function AddRequireInfoLine(_lineInfo)
	local tagItemView = nil;
	local tagListObj
	if IsMobileMode then
		tagListObj = UIPackage.CreateObject("NewUI", "SkillInfoDetailInfoRequire1M").asLabel;
	else
		tagListObj = UIPackage.CreateObject("NewUI", "SkillInfoDetailInfoRequire1").asLabel;
	end
	lvDetailInfo:AddChild(tagListObj);
	if (tagListObj.data == nil) then
		tagItemView = {};
		tagItemView.bindLabel = tagListObj;

		tagListObj.data = tagItemView;
	else
		tagItemView = tagListObj.data;
	end
	tagItemView.bindLabel.text = _lineInfo;
	--tagItemView.bindLabel.color = _color;
end

