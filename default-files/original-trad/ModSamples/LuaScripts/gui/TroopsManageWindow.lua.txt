require("gui/WindowUtils")
require("GameUtils")
require("gui/HeroAttributeSubWin")
require("gui/SoldierAttributeSubWin")

--页面访问控件
local contentPane;
--玩家队伍中的单位卡牌
local lvPartyList;
local lvHeroesList;
local lvSoldiersList;
local lbTeamInfo;
local lbHeroListInfo;
local lbSodierListInfo;

local lvPlaceList;
local lbPlaceInfo;
local lbRecruitInfo;
local lbRecruitBlank;
local lvRecruitableList;
local lbLocalTroopsInfo;
local lvLocalHeroes;
local lvLocalSoldiers;
local lvStorageSoldiers;
local lbLocalGroup1;
local lbLocalGroup2;

local groupSubPages;
local subpageHeroDetail;
local subpageSoldierDetail;

local groupFuncBtns;
local btnOp1;
local btnOp2;
local groupRecruitOp;
local ctlRecruitMats;
local txtRecruitInfo;

local btnClose;

local timerTickInterval = 0.05

local curDlgState = 0;

local curTeam;

local GameCoreHelper = CS.GameCoreHelper;
local GameTools = CS.GameTools;

local _showRoleCount = 3;
local _showSoldierCardCount = 5;
local curRoleCount = 0;
local curSoldierCount = 0;

local curSeledCardInfo = nil;
local curSeledSlot = nil;

local ctlCurSubPage = nil;

local gameWorld = nil;
local playerRole = nil;
local playerTeam = nil;
local curPlace = nil;
local curContainer = nil;
local playerRankInfo = nil;

local curRoleSlotsList = nil;
local curSoldierSlotsList = nil;

local curRecruitSlotsList = nil;

local curRecruitItems = nil;

local curLocalRoleSlotsList = nil;
local curLocalSoldierSlotsList = nil;

local curAllRecruitList;
local curRecruitPeriodNums;
local curRecruitNums;

local showRoleList = false;

local itemsFilter

local ContainerLogic = CS.ContainerLogic

--窗体初始化时
function onInit()
    contentPane = self.contentPane

    gameWorld = GameCoreHelper.GetCurGameWorld();
    playerRole = GameCoreHelper.GetPlayerRole();
    playerTeam = GameCoreHelper.GetPlayerTeam();
    playerRankInfo = playerRole:GetNobilityRankInfo();

    lvPartyList = contentPane:GetChild("party_list").asList;

    lbTeamInfo = lvPartyList:GetChildAt(0).asLabel;
    --lbHeroListInfo = lvPartyList:GetChildAt(1).asLabel;
    --local tagComp = lvPartyList:GetChildAt(2).asCom;
    --lvHeroesList = tagComp:GetChild("items_list").asList;
    lbSodierListInfo = lvPartyList:GetChildAt(1).asLabel;
    tagComp = lvPartyList:GetChildAt(2).asCom;
    lvSoldiersList = tagComp:GetChild("items_list").asList;

    lvPlaceList = contentPane:GetChild("local_list").asList;

    lbRecruitInfo = lvPlaceList:GetChildAt(0)
    lbRecruitBlank = lvPlaceList:GetChildAt(1)
    tagComp = lvPlaceList:GetChildAt(2).asCom;

    lvRecruitableList = tagComp:GetChild("items_list").asList;
    lbPlaceInfo = lvPlaceList:GetChildAt(3).asLabel;
    lbLocalTroopsInfo = lvPlaceList:GetChildAt(4).asLabel;
    --tagComp = lvPlaceList:GetChildAt(5).asCom;
    --lvLocalHeroes = tagComp:GetChild("items_list").asList;
    lbLocalGroup1 = lvPlaceList:GetChildAt(5).asLabel;
    tagComp = lvPlaceList:GetChildAt(6).asCom;
    lvLocalSoldiers = tagComp:GetChild("items_list").asList;
    lbLocalGroup2 = lvPlaceList:GetChildAt(7).asLabel;
    tagComp = lvPlaceList:GetChildAt(8).asCom;
    lvStorageSoldiers = tagComp:GetChild("items_list").asList;

    groupSubPages = contentPane:GetChild("sub_pages").asGroup;
    --subpageHeroDetail = contentPane:GetChildInGroup(groupSubPages, "com_herodetail").asCom;
    --subpageHeroDetail.visible = false;
    subpageSoldierDetail = contentPane:GetChildInGroup(groupSubPages, "com_unitdetail").asCom;
    subpageSoldierDetail.visible = false;

    groupFuncBtns = contentPane:GetChild("g_btns").asGroup;
    btnOp1 = contentPane:GetChildInGroup(groupFuncBtns, "btn_func1").asButton;
    btnOp1.onClick:Add(onClickBtnOp1);
    btnOp2 = contentPane:GetChildInGroup(groupFuncBtns, "btn_func2").asButton;
    btnOp2.onClick:Add(onClickBtnOp2);
    groupRecruitOp = contentPane:GetChild("g_recruit").asGroup;
    local lvRecruitMats = contentPane:GetChildInGroup(groupRecruitOp, "mat_list").asList;
    ctlRecruitMats = CreateStandardResBoxByList(lvRecruitMats, false);
    txtRecruitInfo = contentPane:GetChildInGroup(groupRecruitOp, "txt_recruit_info").asTextField;

    btnClose = contentPane:GetChild("btn_close").asButton;
    btnClose.onClick:Add(onClickBtnClose);

    self:RegJoystickQuickButton(btnOp1, JoystickButton.ButtonA, true);
    self:RegJoystickQuickButton(btnOp2, JoystickButton.ButtonY, true);

    --设置默认值
    self:SetCloseButton(btnClose);

    curDlgState = 0;
end

--自定义初始化事件
function onCustomInit()
    curContainer = self.CustomData
    curPlace = self.CustomArgObj1;
    curTeam = GameCoreHelper.GetPlayerTeam();
	itemsFilter = curContainer:GetItemsFilterInfo()
    --初始事件
    RefreshAllUnits();
end

--窗体开始显示并播放显示动画时
function onDoShowAnimation()
    CommonShowWindowAnim(self, onShown)
end

--窗体播放完显示动画时
function onShown()
    --增加计时器事件
    CS.FairyGUI.Timers.inst:Add(timerTickInterval, 0, onTimerTickUpdate);

    curDlgState = 1;
end

--窗体开始播放关闭动画时
function onDoHideAnimation()
    curDlgState = -1;
    CommonHideWindowAnim(self, onHideAnimationDone)
end

function onHideAnimationDone()
    self:HideImmediately();
end

--窗体隐藏时
function onHide()
    curDlgState = -1;
    --移除计时器事件
    CS.FairyGUI.Timers.inst:Remove(onTimerTickUpdate);

    --关闭所有弹出框
    CS.GUIHelper.CloseAllPopupWindow();
end

function onTimerTickUpdate()
    if curDlgState ~= 1 then
        return;
    end
    if curTeam ~= nil and curTeam.isTeamUpdated then
        UpdateViewInfos();
        curTeam.isTeamUpdated = false;
    end
end

--UI逻辑
function UpdateViewInfos()
    RefreshAllUnits();

end

function RefreshAllUnits()
    local lastRecruitID = nil;
    if curSeledCardInfo ~= nil and curSeledSlot ~= nil and curSeledSlot.listTag == 2 then
        lastRecruitID = curSeledCardInfo.bindID;
    end
    SetCurSeledCardSlot(nil);

    local defSelCardSlot = nil;

    --处理可招募列表
    if curPlace ~= nil then
        lvRecruitableList.numItems = 0;
        curRecruitPeriodNums = {};
        curRecruitNums = {};
        curRecruitSlotsList = {};
        curAllRecruitList = curPlace:GetEnableRecruitSolders(false, true);
        if curAllRecruitList ~= nil then
            local curEnableRecruitList = curPlace:GetEnableRecruitSolders(true, true);

            curSoldierCount = 0;
            local tagNum;
            for k, v in pairs(curAllRecruitList) do
                tagSoldierCard = GameCoreHelper.CreateCardByInfo(k);
                tagNum = 0;
                if curEnableRecruitList ~= nil and curEnableRecruitList:ContainsKey(k) then
                    tagNum = curEnableRecruitList[k];
                end
                curRecruitPeriodNums[k.id] = v;
                curRecruitNums[k.id] = tagNum;
                tagSlotInfo = AddSoldierSlotViewPUI(tagSoldierCard, 2, lvRecruitableList, OnClickTagCardSlot);
                table.insert(curRecruitSlotsList, tagSlotInfo);
                curSoldierCount = curSoldierCount + 1;
                UpdateSoldierSlotPUI(tagSlotInfo, false, true);
                if defSelCardSlot == nil then
                    if curSeledCardInfo == nil then
                        defSelCardSlot = tagSlotInfo;
                    elseif lastRecruitID == tagSoldierCard.bindID then
                        defSelCardSlot = tagSlotInfo;
                    end
                end
            end
        end
    else
        lbRecruitInfo.visible = false;
        lbRecruitBlank.visible = false;
        lvRecruitableList.visible = false;
    end

    if showRoleList then
        --渲染英雄卡
        _showRoleCount = CS.CardLogic.GetRolesCapacity(curTeam);

        lvHeroesList.numItems = 0;
        curRoleSlotsList = {};
        --遍历角色表
        local tagRoleInfo;
        local curRoleList = curTeam.rolesInTeam;
        local tagSlotInfo;
        curRoleCount = 0;
        for index = 0, curRoleList.Count - 1 do
            if index >= _showRoleCount then
                break
                ;            end
            tagRoleInfo = curRoleList[index];
            tagSlotInfo = AddHeroSlotViewPUI(tagRoleInfo, 0, lvHeroesList, OnClickTagCardSlot);
            table.insert(curRoleSlotsList, tagSlotInfo);
            curRoleCount = curRoleCount + 1;
            if curSeledCardInfo == nil and defSelCardSlot == nil and tagRoleInfo:IsPlayer() then
                defSelCardSlot = tagSlotInfo;
            elseif tagSlotInfo.cardInfo == curSeledCardInfo then
                defSelCardSlot = tagSlotInfo;
            end
        end

        lbHeroListInfo.title = GameCoreHelper.StringFormat("{0}/{1}", curRoleCount, _showRoleCount);
    end

    --渲染兵卡
    _showSoldierCardCount = CS.CardLogic.GetSoldierCardsCapacity(curTeam);

    lvSoldiersList.numItems = 0;
    curSoldierSlotsList = {};
    --遍历小兵表
    local tagSoldierCard;
    local curSoldierList = curTeam.soldierCardsInTeam;
    curSoldierCount = 0;
    for index = 0, curSoldierList.Count - 1 do
        tagSoldierCard = curSoldierList[index];
        tagSlotInfo = AddSoldierSlotViewPUI(tagSoldierCard, 0, lvSoldiersList, OnClickTagCardSlot);
        table.insert(curSoldierSlotsList, tagSlotInfo);
        curSoldierCount = curSoldierCount + 1;
        if defSelCardSlot == nil then
            if curSeledCardInfo == nil then
                defSelCardSlot = tagSlotInfo;
            elseif tagSlotInfo.cardInfo == curSeledCardInfo then
                defSelCardSlot = tagSlotInfo;
            end
        end
    end

    lbSodierListInfo.title = GameCoreHelper.StringFormat("{0}/{1}", curSoldierCount, _showSoldierCardCount);

    if showRoleList then
        --处理本地英雄
        lvLocalHeroes.numItems = 0;
        curLocalRoleSlotsList = {};
        --遍历角色表
        curRoleList = curPlace.rolesInTown;
        curRoleCount = 0;
        for index = 0, curRoleList.Count - 1 do
            tagRoleInfo = curRoleList[index];
            if (curPlace:IsGuardRole(tagRoleInfo) and tagRoleInfo.roleState == 0 and not tagRoleInfo:IsCampLeader()) then
                tagSlotInfo = AddHeroSlotViewPUI(tagRoleInfo, 1, lvLocalHeroes, OnClickTagCardSlot);
                table.insert(curLocalRoleSlotsList, tagSlotInfo);
                curRoleCount = curRoleCount + 1;
                if tagSlotInfo.cardInfo == curSeledCardInfo then
                    defSelCardSlot = tagSlotInfo;
                end
            end
        end
    end

    --处理本地小兵
    _showSoldierCardCount = curContainer.CurCapicity

    lvLocalSoldiers.numItems = 0;
    lvStorageSoldiers.numItems = 0;
    curLocalSoldierSlotsList = {};
    --遍历小兵表
    curSoldierList = curContainer:GetCardsListSnapshot();
    curSoldierCount = 0;
    for index = 0, curSoldierList.Count - 1 do
        tagSoldierCard = curSoldierList[index];
        if (tagSoldierCard.CampArmyType == 3) then
            tagSlotInfo = AddSoldierSlotViewPUI(tagSoldierCard, 1, lvStorageSoldiers, OnClickTagCardSlot);
        else
            tagSlotInfo = AddSoldierSlotViewPUI(tagSoldierCard, 1, lvLocalSoldiers, OnClickTagCardSlot);
        end
        table.insert(curLocalSoldierSlotsList, tagSlotInfo);
        curSoldierCount = curSoldierCount + 1;
        if defSelCardSlot == nil then
            if curSeledCardInfo == nil then
                defSelCardSlot = tagSlotInfo;
            elseif tagSlotInfo.cardInfo == curSeledCardInfo then
                defSelCardSlot = tagSlotInfo;
            end
        end
    end

    lbLocalTroopsInfo.title = GameCoreHelper.StringFormat("{0}/{1}", curSoldierCount, _showSoldierCardCount);
    if lvLocalSoldiers.numItems > 0 and lvStorageSoldiers.numItems > 0 then
        lbLocalGroup1.visible = true;
        lbLocalGroup2.visible = true;
    else
        lbLocalGroup1.visible = false;
        lbLocalGroup2.visible = false;
    end

    --适配控件
    --lvHeroesList:ResizeToFit();
    lvSoldiersList:ResizeToFit();
    lvRecruitableList:ResizeToFit();
    --lvLocalHeroes:ResizeToFit();
    lvLocalSoldiers:ResizeToFit();
    lvStorageSoldiers:ResizeToFit();

    --更新队伍信息
    lbTeamInfo.title = curTeam:GetTeamNameInfo();
    lbPlaceInfo.title = GameCoreHelper.StringFormat(GetGameString("lua_script_str_231"), curContainer:GetName());
    UpdateMemberList();
    SelectTagCard(defSelCardSlot, true);

    curTeam.isTeamUpdated = false;
end

function UpdateMemberList()
    if showRoleList then
        for k, v in pairs(curRoleSlotsList) do
            if v ~= nil then
                UpdateHeroSlotPUI(v, false);
            end
        end
        for k, v in pairs(curLocalRoleSlotsList) do
            if v ~= nil then
                UpdateHeroSlotPUI(v, false);
            end
        end
    end
    for k, v in pairs(curSoldierSlotsList) do
        if v ~= nil then
            UpdateSoldierSlotPUI(v, false, true);
        end
    end
    for k, v in pairs(curLocalSoldierSlotsList) do
        if v ~= nil then
            UpdateSoldierSlotPUI(v, false, true);
        end
    end
end

function OnClickTagCardSlot(_tagSlot)
    PlayButtonSound();
    if _tagSlot.cardInfo ~= nil then
        SelectTagCard(_tagSlot, false);
    end
end

function SelectTagCard(_tagSlot)
    SetCurSeledCardSlot(_tagSlot);
    if _tagSlot ~= nil then
        curSeledCardInfo = _tagSlot.cardInfo;
        if curSeledCardInfo ~= nil then
            local cardType = curSeledCardInfo:GetCardType();
            SetDetailInfoUIMode(cardType);
            UpdateCmdBtnsByCurCard();
        end
    end
end

function SetCurSeledCardSlot(_tagSlot)
    if curSeledSlot ~= nil then
        SetMemberSlotSelected(curSeledSlot, false);
    end
    curSeledSlot = _tagSlot;
    if curSeledSlot ~= nil then
        SetMemberSlotSelected(curSeledSlot, true);
    end
end

function SetMemberSlotSelected(_tagSlot, _isSeled)
    if _tagSlot.bindBtn ~= nil then
        _tagSlot.bindBtn.enabled = not _isSeled;
    end
    if _tagSlot.selOnFrame ~= nil then
        _tagSlot.selOnFrame.visible = _isSeled;
    end
end

function onClickBtnClose()
    PlayButtonSound();

    if curPlace ~= nil then
        curPlace:UpdatePlaceState();
    end
    curTeam:ReorderTeamMembers();

    self.CurDialogResult = -1;
    self:Hide();
end

local constrRecruitInfo = GetGameString("lua_script_str_232");
function UpdateCmdBtnsByCurCard()
    groupFuncBtns.visible = false;
    groupRecruitOp.visible = false;
    if curSeledCardInfo ~= nil and curSeledSlot ~= nil then
        local cardType = curSeledCardInfo:GetCardType();
        if curSeledSlot.listTag == 2 then
            ResetOpBtns()
            --招募操作
            local numPeriodNum = curRecruitPeriodNums[curSeledCardInfo.bindID];
            if numPeriodNum == nil then
                numPeriodNum = 0;
            end
            local numAvailible = curRecruitNums[curSeledCardInfo.bindID];
            if numAvailible == nil then
                numAvailible = 0;
            end
            txtRecruitInfo.text = GameCoreHelper.StringFormat(constrRecruitInfo, numPeriodNum,
                curSeledCardInfo:GetDisplayName(), numAvailible);
            curRecruitItems = CS.CardLogic.GetRecruitCost(curSeledCardInfo);
            ctlRecruitMats:UpdateValsByItemList(curRecruitItems, true);
            ShowOpBtn1(GetGameString("lua_script_str_233"));
            groupRecruitOp.visible = true;
        elseif curSeledSlot.listTag == 0 then
            --队伍对象操作
            ResetOpBtns();
            if cardType == 0 then
                if curSeledCardInfo.CampArmyType <= 1 then
                    ShowOpBtn1(GetGameString("lua_script_str_234"));
                else
                    ShowOpBtn1(GetGameString("lua_script_str_235"));
                end
            end
        elseif curSeledSlot.listTag == 1 then
            --驻军对象操作
            ResetOpBtns();
            if cardType == 0 and playerRankInfo ~= nil then
                if curSeledCardInfo.CampArmyType == 3 then
                    --取回部队
                    ShowOpBtn1(GetGameString("lua_script_str_236"));
                else
                    local curRetinuesCount = curTeam:GetCampArmyCount(1);
                    local curCampArmysCount = curTeam:GetCampArmyCount(2);
                    local btnStr = GetGameString("lua_script_str_237");
                    if playerRankInfo.RetinuesArmyCount >= 0 then
                        btnStr = btnStr ..
                            GameCoreHelper.StringFormat("({0}/{1})", curRetinuesCount, playerRankInfo.RetinuesArmyCount);
                    end
                    ShowOpBtn1(btnStr);
                    btnStr = GetGameString("lua_script_str_238");
                    if playerRankInfo.CampArmyCount >= 0 then
                        btnStr = btnStr ..
                            GameCoreHelper.StringFormat("({0}/{1})", curCampArmysCount, playerRankInfo.CampArmyCount);
                    end
                    ShowOpBtn2(btnStr);

                    if playerRankInfo.RetinuesArmyCount < 0 or curRetinuesCount < playerRankInfo.RetinuesArmyCount then
                        btnOp1.enabled = true;
                    else
                        btnOp1.enabled = false;
                    end
                    if playerRankInfo.CampArmyCount < 0 or curCampArmysCount < playerRankInfo.CampArmyCount then
                        btnOp2.enabled = true;
                    else
                        btnOp2.enabled = false;
                    end
                end
            end
        end
    end
end

function onClickBtnOp1()
    PlayButtonSound();

    OnOpBtnFunc(0);
end

function onClickBtnOp2()
    PlayButtonSound();

    OnOpBtnFunc(1);
end

function isTeamReady()
    if curTeam.soldierCardsInTeam.Count >= CS.CardLogic.GetSoldierCardsCapacity(curTeam) then
        local sInfo = GetGameString("lua_script_str_239");
        ShowToastInfo(sInfo, 3);
        return false;
    end
    return true;
end

function isContainerReady()
    if curContainer.CurItemsNum >= curContainer.CurCapicity then
        local sInfo = GetGameString("lua_script_str_240");
        ShowToastInfo(sInfo, 3);
        return false;
    end
    return true;
end

function IsNumEnableForRecuit()
    local curAvailibleNum = curRecruitNums[curSeledCardInfo.bindID];
    if curAvailibleNum == nil or curAvailibleNum <= 0 then
        return false;
    end
    return true;
end

function TryMoveCardFromTeamToLocal(_tagCard, _armyType)
    if curTeam == nil then
        return false;
    end
    if not isContainerReady() then
        return false;
    end
    if not IsEmptyOrNil(itemsFilter) then
        if not CS.GameCoreHelper.CheckCardByCondition(_tagCard, itemsFilter) then
            --不支持放入的物品
            ShowToastInfo(GetGameString("LUAUnitCardsStorageBoxAlertInfo2"), 2.0)
            return false
        end
    end
    if _tagCard.CampArmyType == 2 then
        --部落士兵归还时检查是否本地
        if curPlace == nil or _tagCard.FromID ~= curPlace.PlaceID then
            local fromName = "";
            local fromPlace = GameCoreHelper.GetGamePlace(_tagCard.FromID);
            if fromPlace ~= nil then
                fromName = fromPlace:GetPlaceName();
            end
            local sInfo = GameCoreHelper.StringFormat(GetGameString("lua_script_str_241"), fromName);
            ShowToastInfo(sInfo, 3);
            return false;
        end
    elseif _tagCard.CampArmyType == 1 then
        --部落亲兵退还宝石
        _tagCard:RemoveAllGems(true, true);
    end
    _tagCard.CampArmyType = _armyType;
    ContainerLogic.AddCard(curContainer, _tagCard);
    curTeam.soldierCardsInTeam:Remove(_tagCard);
    return true;
end

function TryMoveCardFromLocalToTeam(_tagCard, _armyType)
    if curTeam == nil then
        return false;
    end
    if not isTeamReady() then
        return false;
    end
    _tagCard.CampArmyType = _armyType;
    if _armyType > 0 and _armyType < 3 and curPlace ~= nil then
        _tagCard.FromID = curPlace.PlaceID;
    end
    curTeam.soldierCardsInTeam:Add(_tagCard);
    ContainerLogic.RemoveCard(curContainer, _tagCard);
    curTeam:UpdateTeamState(false);
    return true;
end

function OnOpBtnFunc(_btnIndex)
    if curSeledCardInfo == nil then
        return;
    end
    local opDone = false;
    if curSeledCardInfo ~= nil and curSeledSlot ~= nil then
        local cardType = curSeledCardInfo:GetCardType();
        if curSeledSlot.listTag == 2 then
            --招募操作
            if _btnIndex == 0 and isTeamReady() then
                if not IsNumEnableForRecuit() then
                    local sInfo = GetGameString("UITroopsAllocDlg_InitUnitList_1");
                    ShowToastInfo(sInfo, 3);
                    return;
                end
                local newCard = GameCoreHelper.CreateCardByInfo(curSeledCardInfo.BindCardInfo);
                if newCard == nil then
                    return;
                end
                local rst = curPlace:TryRecruitSoldier(newCard, curRecruitItems, playerRole, 1, 1, curTeam);
                if rst == 0 then
                    local sInfo = GameCoreHelper.StringFormat(GetGameString("UITroopsAllocDlg_CommitRecruit"),
                        curPlace:GetPlaceName(), curSeledCardInfo:GetDisplayName());
                    ShowToastInfo(sInfo, 3);
                    curTeam:UpdateTeamState(false);
                    opDone = true;
                elseif (rst == -1) then
                    local sInfo = GetGameString("UITroopsAllocDlg_CommitRecruit_1");
                    ShowToastInfo(sInfo, 3);
                    return;
                elseif (rst == -2) then
                    local sInfo = GetGameString("ta_alert_placemax");
                    ShowToastInfo(sInfo, 3);
                    return;
                else
                    local sInfo = GetGameString("UITroopsAllocDlg_CommitRecruit_2");
                    ShowToastInfo(sInfo, 3);
                    return;
                end
            end
        elseif curSeledSlot.listTag == 0 then
            --队伍对象操作
            if cardType == 0 and _btnIndex == 0 then
                if curSeledCardInfo.CampArmyType <= 0 then
                    --存放
                    if TryMoveCardFromTeamToLocal(curSeledCardInfo, 3) then
                        opDone = true;
                    end
                else
                    --归还
                    if curSeledCardInfo.CampArmyType == 1 then
                        local _confirmInfo = GameTools.GetGameString("lua_script_str_242");
                        ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
                            if ret == 1 then
                                if TryMoveCardFromTeamToLocal(curSeledCardInfo, 0) then
                                    RefreshAllUnits();
                                end
                            end
                        end)
                    else
                        if TryMoveCardFromTeamToLocal(curSeledCardInfo, 0) then
                            opDone = true;
                        end
                    end
                end
            end
        elseif curSeledSlot.listTag == 1 then
            --驻军对象操作
            if cardType == 0 and playerRankInfo ~= nil then
                if curSeledCardInfo.CampArmyType == 3 then
                    if _btnIndex == 0 then
                        --取回部队
                        if TryMoveCardFromLocalToTeam(curSeledCardInfo, 0) then
                            opDone = true;
                        end
                    end
                else
                    local curRetinuesCount = curTeam:GetCampArmyCount(1);
                    local curCampArmysCount = curTeam:GetCampArmyCount(2);
                    if _btnIndex == 0 then
                        --编入亲兵
                        if playerRankInfo.RetinuesArmyCount < 0 or curRetinuesCount < playerRankInfo.RetinuesArmyCount then
                            if TryMoveCardFromLocalToTeam(curSeledCardInfo, 1) then
                                opDone = true;
                            end
                        end
                    elseif _btnIndex == 1 then
                        --随我出征
                        if playerRankInfo.CampArmyCount < 0 or curCampArmysCount < playerRankInfo.CampArmyCount then
                            if TryMoveCardFromLocalToTeam(curSeledCardInfo, 2) then
                                opDone = true;
                            end
                        end
                    end
                end
            end
        end
    end

    if opDone then
        RefreshAllUnits();
    end
end

function ResetOpBtns()
    groupFuncBtns.visible = true;
    btnOp1.visible = false;
    btnOp1.enabled = true;
    btnOp2.visible = false;
    btnOp2.enabled = true;
end

function ShowOpBtn1(_title)
    btnOp1.visible = true;
    btnOp1.title = _title;
end

function ShowOpBtn2(_title)
    btnOp2.visible = true;
    btnOp2.title = _title;
end

--当前详情显示类型 0：小兵 1：英雄
function SetDetailInfoUIMode(_curMode)
    local lastPage = ctlCurSubPage;
    if lastPage ~= nil then
        DoHideOldPage(lastPage);
    end
    if _curMode == 1 then
        --curPageComp = subpageHeroDetail;
        --目前只处理小兵
        return;
    else
        curPageComp = subpageSoldierDetail;
    end
    if curPageComp ~= nil then
        ctlCurSubPage = curPageComp.data;
        if ctlCurSubPage == nil then
            ctlCurSubPage = {};
            --初始化子页面控件
            ctlCurSubPage.bindView = curPageComp;

            curPageComp.data = ctlCurSubPage;
        end
        ctlCurSubPage.pageMode = _curMode;
    else
        ctlCurSubPage = nil;
    end
    local _ctlCurPage = ctlCurSubPage;
    if _ctlCurPage == nil then
        return;
    end
    if _ctlCurPage.uiController == nil then
        _ctlCurPage.OnUpdate = nil;
        if _curMode == 1 then
            --初始化角色详情界面
            local ctlDetail = HeroAttributeSubWin:Create();
            ctlDetail:Init(ctlCurSubPage.bindView, false);
            ctlDetail:SetViewStyle(1);

            _ctlCurPage.uiController = ctlDetail;
            _ctlCurPage.OnUpdate = function(_curSlot)
                if _curSlot ~= nil and _curSlot.bindRole ~= nil then
                    ctlDetail:SetCurRole(_curSlot.bindRole);
                end
            end;
        else
            --初始化兵种详情界面
            local ctlDetail = SoldierAttributeSubWin:Create();
            ctlDetail:Init(ctlCurSubPage.bindView, false);
            ctlDetail:SetViewStyle(1);

            _ctlCurPage.uiController = ctlDetail;
            _ctlCurPage.OnUpdate = function(_curSlot)
                if _curSlot ~= nil and _curSlot.cardInfo ~= nil then
                    ctlDetail:SetCurCard(_curSlot.cardInfo);
                end
            end;
        end
    end
    _ctlCurPage.bindView.visible = true;
    UpdateSubPageView(_ctlCurPage);
end

function DoHideOldPage(_ctlCurPage)
    if _ctlCurPage == nil then
        return;
    end
    _ctlCurPage.bindView.visible = false;
end

function UpdateSubPageView(_ctlCurPage)
    if _ctlCurPage ~= nil then
        if _ctlCurPage.OnUpdate ~= nil then
            _ctlCurPage.OnUpdate(curSeledSlot);
        end
    end
end
