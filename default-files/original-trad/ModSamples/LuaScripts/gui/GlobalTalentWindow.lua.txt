require("gui/WindowUtils")
require("GameUtils")
require("GameTools")

local g = {}

local Rect = CS.UnityEngine.Rect
local ArchiveData = CS.HanFramework.ArchiveData
local WorldManager = CS.WorldManager
local GameSettings = CS.HanFramework.GameSettings
local GameTools = CS.GameTools
local GameShared = CS.GameShared
local HSColorHelper = CS.HSFrameWork.Common.HSColorHelper
local UIPackage = CS.FairyGUI.UIPackage
local Vector2 = CS.UnityEngine.Vector2
local Timers = CS.FairyGUI.Timers
local GUIHelper = CS.GUIHelper
local GameUtils = CS.GameUtils

local packageName = CS.GUIHelper.MainPackageNameNew
local btnGlobalTalentTreeNode = "GlobalTalentTreeNode"
local comGlobalTalentTreeConnection = "GlobalTalentTreeConnection"

if IsMobileMode then
    btnGlobalTalentTreeNode = "GlobalTalentTreeNodeM"
end

function onInit()

    ---@type FairyGUI.GComponent
    g.contentPane = self.contentPane

    -- 设置返回键
    g.btnClose = g.contentPane:GetChild("btn_close").asButton
    g.btnClose.onClick:Add(onClickClose)

    self:SetBackkeyButton(g.btnClose);

    if not IsMobileMode then
        self:MakeFullScreen()
        self:Center()
    end

    ---* 缓存天赋信息
    cacheTalentInfo()

    g.comTree = g.contentPane:GetChild("tree").asCom
    if IsMobileMode then
        --- 手机端出现info
        g.comInfo = g.contentPane:GetChild("info").asCom
    end

    g.comTreeView = g.comTree:GetChild("view").asCom
    g.comTreeViewContainer = g.comTreeView:GetChild("container").asCom

    ---* 初始化天赋树容器大小
    g.comTreeViewContainer.width = g.containerWidth
    g.comTreeViewContainer.height = g.containerHeight
    g.comTreeView.scrollPane.percX = 0.5
    g.comTreeView.scrollPane.percY = 0.5

    local txt = g.comTree:GetChild("txt_talent_point")
    if txt ~= nil then
        g.labelTalentPoint = txt.asTextField
    end
    g.labelUnusedTalentPoint = g.comTree:GetChild("txt_total_talent_point").asTextField
    g.imgStarPiece = g.comTree:GetChild("star_piece").asImage

    local totalPointText = CS.GameCoreHelper.StringFormat(GetGameString("lua_script_str_313"), g.totalTalentPoint)
    g.labelUnusedTalentPoint.text = totalPointText
    if g.totalTalentPieceAmount > 0.05 then
        g.comTree:GetController("state").selectedIndex = 1
        g.imgStarPiece.fillAmount = g.totalTalentPieceAmount
    else
        g.comTree:GetController("state").selectedIndex = 0
    end

    g.btnSave = g.comTree:GetChild("btn_save").asButton
    g.btnSave.onClick:Add(onClickSave)

    g.btnReset = g.comTree:GetChild("btn_reset").asButton
    g.btnReset.onClick:Add(onClickReset)

    ---* 当前选中天赋
    ---@type talentInfo
    g.selectedTalent = nil

    bindTalentNodeByList(g.allTalents)
    bindTalentConnectionsByList(g.talentConnections)

    refreshAll()

    startAnimation()
end

function cacheTalentInfo()
    local nFullStars = WorldManager.Instance:GetIntVar(GameSettings.GLOBAL_STAR_ID);
    local nSubStars = WorldManager.Instance:GetIntVar(GameSettings.GLOBAL_STAR_PIECE_ID);
    g.totalTalentPoint = nFullStars
    g.totalTalentPieceAmount = Clamp(nSubStars / GameSettings.GLOBAL_STAR_PIECE_TO_STAR_COUNT, 0, 1)

    g.curTalentPoint = ArchiveData.Current.playerTalentPoint
    g.usedTalentPoint = 0
    ---@type table<string, talentInfo>
    g.allTalents = {}
    ---* 未保存的已激活天赋ID
    ---@type string[]
    g.tempActiveTalents = {}
    ---@type talentConnectionInfo[]
    g.talentConnections = {}

    local offsetX = 0
    local offsetY = 0

    local minX = 0
    local maxX = 0
    local minY = 0
    local maxY = 0

    ---@type table<string, GlobalTalentPojo>
    local allPojo = GameShared.Instance.CachedGlobalTalentPojo

    for key, value in pairs(allPojo) do
        if value.talent_type == -1 then
            offsetX = value.column
            offsetY = value.row
            goto cacheContinue
        end

        local id = value.talent_id
        local isPermanentActive = ArchiveData.Current.UnlockedTalentList:Contains(id)
        ---@class talentInfo
        local talentInfo = {
            ---* 天赋ID
            id = id,
            ---* pojo信息
            pojo = value,
            ---* 是否永久激活
            isPermanentActive = isPermanentActive,
            ---* 是否已激活
            isActive = isPermanentActive,
            ---* 前置天赋
            ---@type System.String[]
            preTalents = value.preTalentList,
            ---* 冲突天赋
            ---@type System.String[]
            mutexTalents = value.mutexTalentList,
            ---* 是否能激活
            canActive = false,
            ---* 是否启用
            enable = false,
            ---* 绑定节点选项
            bindNode = nil,
        }
        talentInfo.canActive = talentCanActive(talentInfo)
        talentInfo.enable = talentIsEnable(talentInfo)
        g.allTalents[id] = talentInfo

        if minX > value.column then minX = value.column end
        if maxX < value.column then maxX = value.column end
        if minY > value.row then minY = value.row end
        if maxY < value.row then maxY = value.row end

        ::cacheContinue::
    end

    for _, value in pairs(g.allTalents) do
        for i = 0, value.preTalents.Length - 1 do
            local preTalentId = value.preTalents[i]
            local left = value
            local right = g.allTalents[preTalentId]
            if right ~= nil then
                ---@class talentConnectionInfo
                local info = {
                    com = nil,
                    left = left,
                    right = right
                }
                table.insert(g.talentConnections, info)
            end
        end
    end

    g.containerWidth = maxX - minX + 400
    g.containerHeight = maxY - minY + 400

    g.startOffsetX = offsetX
    g.startOffsetY = offsetY

    g.centerX = g.containerWidth / 2
    g.centerY = g.containerHeight / 2
end

function resetTalentInfo()
    g.curTalentPoint = ArchiveData.Current.playerTalentPoint
    g.usedTalentPoint = 0
    g.tempActiveTalents = {}
    for key, value in pairs(g.allTalents) do
        value.isPermanentActive = ArchiveData.Current.UnlockedTalentList:Contains(value.id)
        value.isActive = value.isPermanentActive
        value.canActive = talentCanActive(value)
        value.enable = talentIsEnable(value)
    end
end

function refreshAll()
    refreshTalentInfo()
    refreshTalentLeftPanel()
    refreshTalentRightPanel()
end

function refreshTalentInfo()
    for key, value in pairs(g.allTalents) do
        value.canActive = talentCanActive(value)
        value.enable = talentIsEnable(value)
    end
end

function refreshTalentLeftPanel()
    local needSaveController = g.comTree:GetController("needSave")

    for key, value in pairs(g.allTalents) do
        refreshTalentNode(value)
    end

    for key, value in pairs(g.talentConnections) do
        refreshTalentConnection(value)
    end

    local pointText = GameTools.GetGameString("UIPageGlobalTalentTree_RefreshTalentPointText", getUnuseTalentPoint())

    if g.labelTalentPoint ~= nil then
        g.labelTalentPoint.text = pointText
    end

    if g.usedTalentPoint > 0 then
        needSaveController.selectedIndex = 1
    else
        needSaveController.selectedIndex = 0
    end
end

---* 刷新天赋列表
function refreshTalentRightPanel()
    if IsMobileMode then
        refreshTalentInfoPanel(g.comInfo, g.selectedTalent)
    end
end

---@param listTalentInfo table<string,talentInfo>
function bindTalentNodeByList(listTalentInfo)
    for index, value in pairs(listTalentInfo) do
        local btn = createTalentNode()
        local labelName = btn:GetChild("txt_name").asLabel
        local info = value
        info.bindNode = btn

        g.comTreeViewContainer:AddChild(btn)
        btn.pivotX = 0.5
        btn.pivotY = 0.5
        btn.x = info.pojo.column - g.startOffsetX + g.centerX
        btn.y = info.pojo.row - g.startOffsetY + g.centerY

        if info.pojo.talent_type == 1 or info.pojo.talent_type == 2 then
            btn.width = btn.width * 1.2
            btn.height = btn.height * 1.2
        end

        btn.onClick:Add(function()
            onClickTalentNode(info)
        end)

        labelName.title = info.pojo.talent_name

        if not IsMobileMode then
            if info.pojo.talent_type == 2 then
                btn.tooltips = CS.GameCoreHelper.StringFormat(GetLanString("[size=24]{0}[/size]\n{1}\n\n{2}"),
                    info.pojo.talent_name,
                    ConvertAllStrVal(info.pojo.talent_desc),
                    getTalentMutualExclusionDesc(info))
            else
                btn.tooltips = CS.GameCoreHelper.StringFormat(GetLanString("[size=24]{0}[/size]\n{1}"),
                    info.pojo.talent_name,
                    ConvertAllStrVal(info.pojo.talent_desc))
            end
        end
    end
end

function createTalentNode()
    local btn = UIPackage.CreateObject(packageName, btnGlobalTalentTreeNode).asButton
    return btn
end

---@param listTalentConnections talentConnectionInfo[]
function bindTalentConnectionsByList(listTalentConnections)
    local up = Vector2(0, 1)
    for key, value in pairs(listTalentConnections) do
        local connect = createTalentConnection()
        value.com = connect
        g.comTreeViewContainer:AddChildAt(connect, 0)
        local leftNode = value.left.bindNode
        local rightNode = value.right.bindNode
        local leftToRight = Vector2(rightNode.x - leftNode.x, (rightNode.y - leftNode.y))
        connect.pivotX = 0.5
        connect.pivotY = 0.5
        connect.x = (leftNode.x + rightNode.x) / 2
        connect.y = (leftNode.y + rightNode.y) / 2
        connect.rotation = Vector2.Angle(up, leftToRight)
        if leftToRight.x > 0 then
            connect.rotation = -connect.rotation
        end
        connect.height = leftToRight.magnitude - 45
    end
end

function createTalentConnection()
    local com = UIPackage.CreateObject(packageName, comGlobalTalentTreeConnection).asCom
    return com
end

---@param btnList FairyGUI.GButton[]
function addTalentListChildren(btnList)
    for index, btn in ipairs(btnList) do
        g.listTalent:AddChild(btn)
    end
end

---@param info talentInfo
function refreshTalentNode(info)
    local btn = info.bindNode
    local btnIcon = btn:GetChild("btn_icon").asButton
    local imgToggleFrame = btnIcon:GetChild("toggleFrame").asImage
    local comIcon = btnIcon:GetChild("icon").asCom
    local comIconLoader = comIcon:GetChild("icon").asLoader

    comIcon.icon = GetSkillPathByName(info.pojo.talent_icon)
    local enableColor = info.isActive
        and HSColorHelper.fromString("FFFFFFFF")
        or HSColorHelper.fromString("333333FF");

    comIconLoader.color = enableColor
    imgToggleFrame.color = enableColor

    setIconState(btnIcon, info)
end

---@param info talentConnectionInfo
function refreshTalentConnection(info)
    local state = info.com:GetController("active")
    if info.left.isActive and info.right.isActive then
        state.selectedIndex = 1
    else
        state.selectedIndex = 0
    end
end

---@param com FairyGUI.GComponent
---@param info talentInfo
function refreshTalentInfoPanel(com, info)
    local txtPoint = com:GetChild("txt_talentPoint")
    local selectTalentController = com:GetController("sel_talent")

    local pointText = GameTools.GetGameString("UIPageGlobalTalentTree_RefreshTalentPointText", getUnuseTalentPoint())
    txtPoint.text = pointText

    if info == nil then
        selectTalentController.selectedIndex = 0
        return
    end
    selectTalentController.selectedIndex = 1

    local txtName = com:GetChild("txt_name")
    local txtDesc = com:GetChild("txt_desc")
    local btnUnlock = com:GetChild("btn_unlock").asButton
    local btnEnable = com:GetChild("btn_enable").asButton
    local btnIcon = com:GetChild("btn_icon").asButton
    local comIcon = btnIcon:GetChild("icon").asCom

    local txtExtra = com:GetChild("txt_extra").asTextField

    btnUnlock.onClick:Set(function()
        onClickTalentActive(info)
    end)
    btnEnable.onClick:Set(function()
        onClickEnable(info)
    end)

    txtName.text = info.pojo.talent_name
    txtDesc.text = GUIHelper.ConvertUGUIStr(ConvertAllStrVal(info.pojo.talent_desc))
    comIcon.icon = GetSkillPathByName(info.pojo.talent_icon)
    setIconState(btnIcon, info)

    local cancelUnlockText = GetGameString("lua_script_str_314")
    local unlockText = GetGameString("lua_script_str_315")
    if info.isPermanentActive then
        btnUnlock.visible = false
    elseif info.isActive then
        btnUnlock.visible = true
        btnUnlock.enabled = true
        btnUnlock.title = cancelUnlockText
    elseif info.canActive then
        btnUnlock.visible = true
        btnUnlock.enabled = true
        btnUnlock.title = unlockText
    else
        btnUnlock.visible = true
        btnUnlock.enabled = false
        btnUnlock.title = unlockText
    end

    if info.pojo.talent_type == 2 and info.isPermanentActive then
        btnEnable.visible = true
        if info.enable then
            btnEnable.title = GetGameString("lua_script_str_316")
        else
            btnEnable.title = GetGameString("lua_script_str_317")
        end
    else
        btnEnable.visible = false
    end

    if info.pojo.talent_type == 2 and info.mutexTalents.Length > 0 then
        txtExtra.text = getTalentMutualExclusionDesc(info)
    else
        btnEnable.visible = false
        txtExtra.text = ""
    end
end

function startAnimation()
    for key, value in pairs(g.allTalents) do
        setComAnimation(value.bindNode)
    end
    for key, value in pairs(g.talentConnections) do
        setComAnimation(value.com)
    end
end

---@param com FairyGUI.GComponent
function setComAnimation(com)
    com.alpha = 0
    com:SetScale(1.5, 1.5)
    local lateTime = Vector2(com.x - g.centerX, com.y - g.centerY).magnitude / 500
    lateTime = math.max(0, lateTime - 0.5)
    Timers.inst:Add(lateTime, 1, function()
        if com == nil then
            return
        end
        com:TweenFade(1, 0.3)
        com:TweenScale(Vector2(1, 1), 0.3)
    end)
end

---@param comIcon FairyGUI.GComponent
---@param info talentInfo
function setIconState(btnIcon, info)
    local comIconState = btnIcon:GetController("state")
    local comIconToggle = btnIcon:GetController("toggle")

    if info.pojo.talent_type == 1 or info.pojo.talent_type == 2 then
        if info.isActive then
            comIconState.selectedIndex = 3
        else
            comIconState.selectedIndex = 2
        end
    else
        if info.isActive then
            comIconState.selectedIndex = 1
        else
            comIconState.selectedIndex = 0
        end
    end

    if info.pojo.talent_type == 2 then
        if info.enable then
            comIconToggle.selectedIndex = 2
        else
            comIconToggle.selectedIndex = 1
        end
    else
        comIconToggle.selectedIndex = 0
    end
end

---@param info talentInfo
---@return boolean
function talentCanActive(info)
    ---* 前置天赋全部满足可激活
    for preTalent in foreach(info.preTalents) do
        if preTalent ~= "初始" and
            not ArchiveData.Current.UnlockedTalentList:Contains(preTalent) and
            not table.contains(g.tempActiveTalents, preTalent) then
            return false
        end
    end
    return true
end

---@param info talentInfo
---@return boolean
function talentCanCancelActive(info)
    ---* 后置天赋全部未激活可取消激活
    for _, id in pairs(g.tempActiveTalents) do
        local activeInfo = g.allTalents[id]
        for i = 0, activeInfo.preTalents.Length - 1 do
            local preTalent = activeInfo.preTalents[i]
            if preTalent == info.id then
                return false
            end
        end
    end
    return true
end

---* infoB是否是infoA的前置天赋
---@param infoA talentInfo
---@param infoB talentInfo
---@return boolean
function isPreTalent(infoA, infoB)
    for i = 0, infoA.preTalents.Length - 1 do
        if infoA.preTalents[i] == infoB.id then
            return true
        end
    end
    return false
end

---* infoB是否是infoA的后继天赋
---@param infoA talentInfo
---@param infoB talentInfo
---@return boolean
function isSubTalent(infoA, infoB)
    for i = 0, infoB.preTalents.Length - 1 do
        if infoB.preTalents[i] == infoA.id then
            return true
        end
    end
    return false
end

---* 获取尚未使用的天赋点
---@return number
function getUnuseTalentPoint()
    return g.curTalentPoint - g.usedTalentPoint
end

---@param info talentInfo
---@return boolean
function talentIsEnable(info)
    return ArchiveData.Current:IsTalentEnable(info.pojo.talent_id);
end

---@param info talentInfo
function getTalentMutualExclusionDesc(info)
    local extraTalents = {}
    for i = 0, info.mutexTalents.Length - 1 do
        local id = info.mutexTalents[i]
        local tagTalent = g.allTalents[id]
        if tagTalent ~= nil then
            table.insert(extraTalents, tagTalent.pojo.talent_name)
        end
    end
    local desc = CS.GameCoreHelper.StringFormat(
            GetGameString("lua_script_str_318"),
            table.concat(extraTalents, GetGameString("lua_script_str_319"))
        )
    return desc
end

---@param info talentInfo
---@param isActive boolean
---@return boolean 设置是否成功
function setTalentActive(info, isActive)
    if info.isPermanentActive then
        return false
    end

    if isActive then
        if not info.isActive and getUnuseTalentPoint() > 0 and info.canActive then
            info.isActive = true
            table.insert(g.tempActiveTalents, info.id)
            g.usedTalentPoint = g.usedTalentPoint + 1
            return true
        end
    else
        if info.isActive and talentCanCancelActive(info) then
            info.isActive = false
            table.remove(g.tempActiveTalents, table.findIndex(g.tempActiveTalents, info.id))
            g.usedTalentPoint = g.usedTalentPoint - 1
            return true
        end
    end

    return false
end

---* 启用或禁用天赋
---@param info talentInfo
---@param enable boolean
function setTalentEnable(info, enable)
    info.pojo:SetEnable(enable)

    if enable then
        for i = 0, info.mutexTalents.Length - 1 do
            local tagTalent = g.allTalents[info.mutexTalents[i]]
            if tagTalent ~= nil then
                tagTalent.pojo:SetEnable(false)
            end
        end
    end
end

---* 设置节点的选中状态
---@param node FairyGUI.GButton
---@param selected boolean
function setTalentNodeSelected(node, selected)
    local btnIcon = node:GetChild("btn_icon").asButton
    local controller = btnIcon:GetController("selected")
    controller.selectedIndex = selected and 1 or 0
end

---@param info talentInfo
function onClickTalentActive(info)
    if info.isPermanentActive then
        return
    end

    if setTalentActive(info, not info.isActive) then
        refreshAll()
    end
end

---@param info talentInfo
function onClickTalentNode(info)
    if IsMobileMode then
        onSelectTalent(info)
    else
        onDoTalent(info)
    end
end

---@param info talentInfo
function onSelectTalent(info)
    if g.selectedTalent ~= nil then
        setTalentNodeSelected(g.selectedTalent.bindNode, false)
    end
    g.selectedTalent = info
    local bindNode = g.selectedTalent.bindNode
    setTalentNodeSelected(bindNode, true)
    g.comTreeView.scrollPane:ScrollToView(
        Rect(bindNode.x - g.comTreeView.width / 2,
            bindNode.y - g.comTreeView.height / 2,
            bindNode.width,
            bindNode.height),
        true, true)
    refreshTalentRightPanel()
end

---@param info talentInfo
function onDoTalent(info)
    if info.isPermanentActive then
        onClickEnable(info)
    elseif info.isActive or info.canActive then
        onClickTalentActive(info)
    end
    refreshAll()
end

---@param info talentInfo
function onClickEnable(info)
    ---* 仅永久解锁的天赋可以启用
    if not info.isPermanentActive then
        return
    end

    ---* 非主动技能不能激活
    if info.pojo.talent_type ~= 2 then
        return
    end

    setTalentEnable(info, not info.enable)
    refreshAll()
end

function onClickSave()
    PlayButtonSound()

    ArchiveData.Current:UnlockTalent(g.tempActiveTalents, onSaveSuccess);
end

function onSaveSuccess()
    -- 刷新地图外观
    GameShared.Instance:SendSceneMessage("player_status_updated", nil);

    -- 刷新数据
    resetTalentInfo()
    refreshAll()
end

function onClickReset()
    PlayButtonSound()

    -- 刷新数据
    resetTalentInfo()
    refreshAll()
end

function onClickClose()
    PlayButtonSound();
    if #g.tempActiveTalents > 0 then
        local _confirmInfo = GetGameString("lua_script_str_320")
        ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
            if ret == 1 then
                close()
            end
        end)
    else
        close()
    end
end

function close()
    self.CurDialogResult = -1;
    self:Hide();
end
