require("gui/WindowUtils")
require("GameUtils")

local GameCoreHelper = CS.GameCoreHelper

--页面访问控件
local contentPane

--显示模式  0：普通战斗  1：搏击战斗
local curMode = 0;

local btnBack;

local lvLeftList;
local lbSkillsTitle;
local lvSkillsList;
local lbItemsTitle;
local lvItemsList;
local ctlItemsList;

local compSkillInfo;
local compItemInfo;
local compBarWrapper;
local btnConfirm;
local btnReset;

local ctlItemDetail;
local ctlSkillDetail;

local ctlActionBar;

local playerRole;
local playerCard;
local gameWorld;

local listSkills;
local listItems;

--当前选中项类型 0:无选中对象 1：技能  2：物品
local curSeledType = 0;
local curSeledSlot;
local curSeledSkillInfo;
local curSeledItemInfo;

local savedQuikKeyInfo = nil;

local curActionBarSlots = nil;

local StringFormat = GameCoreHelper.StringFormat;

--窗体初始化时
function onInit()
	contentPane = self.contentPane

	playerRole = GameCoreHelper.GetPlayerRole();
	playerCard = playerRole.BindCard;
	gameWorld = GameCoreHelper.GetCurGameWorld();

	curMode = 0;
	if self:GetWindowArgVal("mode") == "1" then
		curMode = 1;
	end

	lvLeftList = contentPane:GetChild("content_list").asList;
	lbSkillsTitle = lvLeftList:GetChildAt(0).asLabel;
	lvSkillsList = lvLeftList:GetChildAt(1).asCom:GetChild("item_list").asList;
	lbItemsTitle = lvLeftList:GetChildAt(2).asLabel;
	lvItemsList = lvLeftList:GetChildAt(3).asCom:GetChild("item_list").asList;
	ctlItemsList = CS.GUIHelper.CreateSimpleItemsList(lvItemsList);
	ctlItemsList:SetClickCallback(OnClickItemSlot);

	compSkillInfo = contentPane:GetChild("skillinfo").asCom;
	compItemInfo = contentPane:GetChild("item_info").asCom;
	compBarWrapper = contentPane:GetChild("actionbar_wrapper").asCom;
	btnConfirm = contentPane:GetChild("btn_confirm").asCom;
	btnReset = contentPane:GetChild("btn_reset").asCom;
	btnBack = contentPane:GetChild("btn_close").asButton;

	ctlItemDetail = CS.GUIHelper.ShowItemDetailInComp(compItemInfo);
	ctlItemDetail:SetCurTagCard(playerCard);

	ctlSkillDetail = CreateSkillDetailByComp(compSkillInfo, nil, playerCard);

	if curMode == 1 then
		ctlActionBar = CS.GUIHelper.CreateMobileActionBarConfigPanelFight(compBarWrapper.asCom, 8);
		ctlActionBar:SetIsForbiddenDrag(true);
	else
		ctlActionBar = CS.GUIHelper.CreateMobileActionBarConfigPanel(compBarWrapper.asCom, 8);
	end
	if ctlActionBar ~= nil then
		ctlActionBar:SetActionBarOpMode(1);
		ctlActionBar:SetActionBarConfigClickCallback(OnActionBarClickEvent);
	end

	--绑定按钮事件
	btnBack.onClick:Set(onClickBackBtn);
	btnReset.onClick:Set(onClickResetBtn);
	btnConfirm.onClick:Set(onClickConfirmBtn);

	if curMode == 1 then
		savedQuikKeyInfo = GameCoreHelper.GetStrVar("all_fight_actionbar");
	else
		savedQuikKeyInfo = CS.GUIHelper.GetCurQuickSlotInfos();
	end

	UpdateCurList();
end

--窗体开始显示并播放显示动画时
function onDoShowAnimation()
	CommonShowWindowAnim(self, onShown)
end

--窗体播放完显示动画时
function onShown()
	--增加计时器事件
	--CS.FairyGUI.Timers.inst:Add(timerTickInterval, 0, onTimerTickUpdate);
end

--窗体开始播放关闭动画时
function onDoHideAnimation()
	CommonHideWindowAnim(self, onHideAnimationDone)
end

function onHideAnimationDone()
	self:HideImmediately();
end

--窗体隐藏时
function onHide()
	--移除计时器事件
	--CS.FairyGUI.Timers.inst:Remove(onTimerTickUpdate);
end

function onClickBackBtn()
	PlayButtonSound();

	OnApplyChange(false);
	self:Hide();
end

function onClickResetBtn()
	PlayButtonSound()

	OnApplyChange(false);
	if ctlActionBar ~= nil then
		UpdateFightActionBar();
	end
end

--按下完成按钮时
function onClickConfirmBtn()
	PlayButtonSound()

	OnApplyChange(true);
	self:Hide();
end

function OnApplyChange(_apply)
	if _apply then
		if curMode == 1 then
			--do nothing
		else
			--do nothing
		end
	else
		if curMode == 1 then
			local asStr = GameCoreHelper.GetStrVar("all_fight_actionbar");
			if savedQuikKeyInfo ~= asStr then
				GameCoreHelper.SetStrVar("all_fight_actionbar", savedQuikKeyInfo);
				GetFightActionBarSlots();
			end
		else
			local curInfo = CS.GUIHelper.GetCurQuickSlotInfos();
			if savedQuikKeyInfo ~= curInfo then
				CS.GUIHelper.SetQuickSlotsByInfo(savedQuikKeyInfo);
			end
		end
	end
end

function onTimerTickUpdate()

end

function UpdateCurList()
	if curMode == 1 then
		listSkills = GetAllFightSkillList();
		listItems = nil;
	else
		listSkills = GameCoreHelper.GetSkillsForActionBar();
		listItems = GameCoreHelper.GetItemsForActionBar();
	end
	if listSkills ~= nil and listSkills.Count > 0 then
        lvSkillsList.numItems = listSkills.Count;
        local tagSp;
        local tagBtn;
        for index=0,listSkills.Count-1 do
			tagSp = listSkills[index];
			tagBtn = lvSkillsList:GetChildAt(index);
			local _tagSlot;
            _tagSlot = UpdateSimpleSkillSlot(tagBtn, tagSp, playerCard, function()
				OnClickSkillSlot(_tagSlot);
			end);
		end
    else
        lvSkillsList.numItems = 0;
    end
	if (curMode == 1) then
		lvItemsList.visible = false;
		lbItemsTitle.visible = false;
	else
		ctlItemsList:SetItems(listItems);
		lvItemsList.visible = true;
		lbItemsTitle.visible = true;
	end
	lvSkillsList:ResizeToFit();

	UpdateCurSeledInfo();
end

function OnClickSkillSlot(_tagSlot)
	PlayButtonSound()

	SetCurSeledSlot(1, _tagSlot);
	if _tagSlot ~= nil then
		curSeledSkillInfo = _tagSlot.bindSp;
	else
		curSeledSkillInfo = nil;
	end
	UpdateCurSeledInfo();
end

function OnClickItemSlot(_tagSlot)
	PlayButtonSound()

	SetCurSeledSlot(2, _tagSlot);
	if _tagSlot ~= nil then
		curSeledItemInfo = _tagSlot.bindItemInfo;
	else
		curSeledItemInfo = nil;
	end
	UpdateCurSeledInfo();
end

function OnActionBarClickEvent(_tagSlot)
	if ctlActionBar == nil then
		return;
	end
	if curSeledType > 0 then
		if _tagSlot ~= nil then
			local _slotIndex = _tagSlot:GetSlotIndex();
			if curSeledType == 1 and curSeledSkillInfo ~= nil then
				if curMode == 1 then
					if IsFightActionSlotEnableFor(curSeledSkillInfo, _slotIndex) and curActionBarSlots ~= nil then
						SetFightActionBarSlot(curActionBarSlots, _slotIndex, curSeledSkillInfo.skillID);
					end
					UpdateFightActionBar();
				else
					CS.GUIHelper.SetQuickSlotBySkill(curSeledSkillInfo.skillID, _slotIndex);
					UpdateFightActionBar();
				end
			elseif curSeledType == 2 and curSeledItemInfo ~= nil then
				CS.GUIHelper.SetQuickSlotByItem(curSeledItemInfo.itemID, _slotIndex);
				UpdateFightActionBar();
			end
		end
	end
end

function IsFightActionSlotEnableFor(_tagSp, _slotIndex)
	if _tagSp == nil then
		return false;
	end
	local tagSkillInfo = _tagSp.SkillInfo;
	if tagSkillInfo == nil then
		return false;
	end
	local isFightSkill = false;
	local fightSkillType = 0;
	local strFightSkillTag = tagSkillInfo:GetTagValue("fight_skill_class");
	if not IsEmptyOrNil(strFightSkillTag) then
		isFightSkill = true;
		fsCostVal = tagSkillInfo:GetTagValueInt("fs_cost");
		fightSkillType = GetFightSkillType(strFightSkillTag);
	end
	if not isFightSkill then
		return false;
	end
	return IsFightSkillClassEnableForSlot(fightSkillType, _slotIndex);
end

function SetCurSeledSlot(_type, _slot)
	if curSeledSlot ~= nil then
		SetSlotSeledOn(curSeledSlot, false);
	end
	curSeledType = _type;
	curSeledSlot = _slot;
	if curSeledSlot ~= nil then
		SetSlotSeledOn(curSeledSlot, true);
	end
end

function SetSlotSeledOn(_slot, _isOn)
	if _slot ~= nil then
		if _slot.imgSelframe ~= nil then
			_slot.imgSelframe.visible = _isOn;
		end
	end
end

function UpdateCurSeledInfo()
	compSkillInfo.visible = false;
	compItemInfo.visible = false;

	if curSeledType == 2 then
		if curSeledItemInfo ~= nil then
			compItemInfo.visible = true;
			ctlItemDetail:SetGameItem(curSeledItemInfo, false);
		end
	elseif curSeledType == 1 then
		if curSeledSkillInfo ~= nil then
			compSkillInfo.visible = true;
			ctlSkillDetail:CallLuaFuncObj("ShowSkillInfo", curSeledSkillInfo);
		end
	end

	if ctlActionBar ~= nil then
		UpdateFightActionBar();
	end
end

function UpdateFightActionBar()
	if curMode == 1 then
		local asStr, actionSlots = GetFightActionBarInfoStr();
		curActionBarSlots = actionSlots;
		ctlActionBar:SetActionBar(asStr);
	else
		ctlActionBar:RefreshQuickSlots();
	end

	local nCount = ctlActionBar:GetSlotCount();
	local tagActionSlot;
	for index=0,nCount-1 do
		tagActionSlot = ctlActionBar:GetTagSlot(index);
		if tagActionSlot ~= nil then
			if curMode == 1 then

				if IsFightActionSlotEnableFor(curSeledSkillInfo, index) then
					tagActionSlot:SetIsEnablePlus(true);
					tagActionSlot.bindBtn.touchable = true;
				else
					tagActionSlot:SetIsEnablePlus(false);
					tagActionSlot.bindBtn.touchable = false;
				end
			else
				if curSeledType > 0 then
					tagActionSlot:SetIsEnablePlus(true);
				else
					tagActionSlot:SetIsEnablePlus(false);
				end
			end
			tagActionSlot:SetMpCostVisible(false)
		end
	end
end