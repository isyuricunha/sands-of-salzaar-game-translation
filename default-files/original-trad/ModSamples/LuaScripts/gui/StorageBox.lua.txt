require("gui/WindowUtils")

--页面访问控件
local contentPane
--玩家背包中的物品
local inventoryItemsList
--背包中移出的物品表
local inv2storageList
--目标仓库中的物品
local storageItemsList
--目标仓库中移出的物品表
local storage2invList

local txtTitle;
local btnOK;
local btnClose;

local btnMoveLeft
local btnMoveRight
local btnMoveLeftAll
local btnMoveRightAll

local txtLeftListTitle
local listLeftItemsLv
local txtRightListTitle
local listRightItemsLv

local curLeftItemsNum = 0
local curLeftCapicity = 30
local leftListTitleStr
local curRightItemsNum = 0
local curRightCapicity = 30
local rightShowCount = curRightCapicity;
local rightListTitleStr;
local txtBagTitle;
local imgHeadHolder;

local timerTickInterval = 0.05

local curSeledItem = nil
local curDbClickedItem = nil
local curClickItemTimer = 0

local curHoverItemTag = nil
local curHoverItemSlot = nil
local curHoverTickTimer = 0

local isTransitionCommitted = false

local curContainer = nil
local displayName = ""
local itemsFilter = nil

local playerRole;

--窗体初始化时
function onInit()
	contentPane = self.contentPane

	CS.GUIHelper.ForceClearItemDetailInfoWindow();	--防止物品信息窗口缓存的注册回调导致的引用BUG

	--绑定按钮事件
	local pObj;
	txtTitle = contentPane:GetChild("title").asTextField
	--btnOK = contentPane:GetChild("btn_ok").asButton
	--btnOK.onClick:Add(onClickOK);

	btnMoveLeft = contentPane:GetChild("btn_left").asButton
	btnMoveLeft.onClick:Add(onClickMoveLeft);
	btnMoveRight = contentPane:GetChild("btn_right").asButton
	btnMoveRight.onClick:Add(onClickMoveRight);
	btnMoveLeftAll = contentPane:GetChild("btn_leftbatch").asButton
	btnMoveLeftAll.onClick:Add(onClickMoveLeftAll);
	btnMoveRightAll = contentPane:GetChild("btn_rightbatch").asButton
	btnMoveRightAll.onClick:Add(onClickMoveRightAll);

	local leftListGroup = contentPane:GetChild("left_box").asGroup
	txtLeftListTitle = contentPane:GetChildInGroup(leftListGroup, "list_title1").asTextField
	leftListTitleStr = txtLeftListTitle.text
	listLeftItemsLv = contentPane:GetChildInGroup(leftListGroup, "tag_list1").asList
	bindListViewComponent(listLeftItemsLv, 0)

	local rightListGroup = contentPane:GetChild("right_box").asGroup
	txtRightListTitle = contentPane:GetChildInGroup(rightListGroup, "list_title2").asTextField
	rightListTitleStr = txtRightListTitle.text
	listRightItemsLv = contentPane:GetChildInGroup(rightListGroup, "tag_list2").asList
	bindListViewComponent(listRightItemsLv, 1);

	pObj = contentPane:GetChildInGroup(rightListGroup, "bag_title");
	if pObj ~= nil then
		txtBagTitle = pObj.asTextField;
	end
	pObj = contentPane:GetChildInGroup(rightListGroup, "head_cliper");
	if pObj ~= nil then
		imgHeadHolder = pObj:GetChild("head_holder").asImage;
	end

	--初始化变量
	inventoryItemsList = CS.GameCoreHelper.GetEmptyGameItemList();
	inv2storageList = CS.GameCoreHelper.GetEmptyGameItemList();
	storageItemsList = CS.GameCoreHelper.GetEmptyGameItemList();
	storage2invList = CS.GameCoreHelper.GetEmptyGameItemList();

	btnClose = nil;
	pObj = contentPane:GetChild("btn_close");
	if pObj ~= nil then
		btnClose = pObj.asButton
		btnClose.onClick:Add(onClickOK);

		self:SetBackkeyButton(btnClose);
	end
end

function SetContainer(_tagContainer)
	curContainer = _tagContainer;
	playerRole = CS.GameCoreHelper.GetPlayerRole();

	if curContainer ~= nil then
		inventoryItemsList = CS.GameCoreHelper.GetPlayerInventorySnapshot()
		storageItemsList = curContainer:GetGameItemsListSnapshot()
		displayName = curContainer:GetName()
		curLeftCapicity = curContainer.CurCapicity;
		curRightCapicity = CS.GameCoreHelper.GetPlayerInventoryCapicity()
		itemsFilter = curContainer:GetItemsFilterInfo()

		if txtTitle ~= nil then
			txtTitle.text = displayName;
		end
	end

	if txtBagTitle ~= nil then
		txtBagTitle.text = CS.GameCoreHelper.StringFormat(GetGameString("lua_script_str_292"), playerRole:GetRoleName());
	end
	if imgHeadHolder ~= nil then
		CS.GUIHelper.GenerateRoleHeadAvataImage(playerRole.HeadAvata, imgHeadHolder);
	end

	updateAll()
end

function bindListViewComponent(_list, _tagList)
	_list.onClickItem:Add(onClickListItem)
	_list.data = _tagList
	if _tagList == 1 then
		
	else
		
	end

	local gesture = CS.FairyGUI.LongPressGesture(_list);
	gesture.once = true;
	gesture.trigger = 0.3;
	gesture.onAction:Add(OnLongPress);
end

--窗体开始显示并播放显示动画时
function onDoShowAnimation()
	CommonShowWindowAnim(self, onShown)
end

--窗体播放完显示动画时
function onShown()
	--增加计时器事件
	CS.FairyGUI.Timers.inst:Add(timerTickInterval, 0, onTimerTickUpdate);
end

--窗体开始播放关闭动画时
function onDoHideAnimation()
	--检查是否有业务未完成
	if curContainer ~= nil and not isTransitionCommitted then
		if inv2storageList.Count > 0 or storage2invList.Count > 0 then
			ShowConfirmDlg(GetGameString("LUAStorageBoxAlertInfo3"), "yesno", function(ret)
				if ret == 1 then
					isTransitionCommitted = true
					self:Hide()
				end
			end)
			return
		end
	end
	CommonHideWindowAnim(self, onHideAnimationDone)
end

function onHideAnimationDone()
	self:HideImmediately();
end

--窗体隐藏时
function onHide()
	CS.GUIHelper.ForceClearItemDetailInfoWindow();
	--移除计时器事件
	CS.FairyGUI.Timers.inst:Remove(onTimerTickUpdate);
end

function onClickClose()
	PlayButtonSound();
	self.CurDialogResult = 0;
	self:Hide();
end

--按下完成按钮时
function onClickOK()
	PlayButtonSound();
	self.CurDialogResult = 1;
	if ComfirmTransition() then
		self:Hide()
	end
end

function ComfirmTransition()
	if curContainer ~= nil then
		if inv2storageList.Count > 0 then
			curContainer:AddItemsByList(inv2storageList)
			CS.GameCoreHelper.RemoveItemsFromPlayerInvByList(inv2storageList)
		end
		if storage2invList.Count > 0 then
			CS.GameCoreHelper.AddItemsToPlayerInvByList(storage2invList)
			curContainer:RemoveItemsByList(storage2invList)
		end
	end
	CS.GameCoreHelper.TransferFoodItems();
	isTransitionCommitted = true
	return true
end

function onClickMoveLeft()
	PlayButtonSound()

	if curSeledItem ~= nil then
		local bindData = curSeledItem.data
		if bindData.bindTag ~= 1 then
			return
		end
		if MoveItemToLeft(bindData.bindIndex) then
			updateAll()
		end
	end
end

function onClickMoveRight()
	PlayButtonSound()

	if curSeledItem ~= nil then
		local bindData = curSeledItem.data
		if bindData.bindTag ~= 0 then
			return
		end
		if MoveItemToRight(bindData.bindIndex) then
			updateAll()
		end
	end
end

function onClickMoveLeftAll()
	PlayButtonSound()

	if curRightItemsNum <= 0 then
		return
	end
	local curTagIndex = 0
	for index=0,curRightItemsNum do
		if not MoveItemToLeft(curTagIndex) then
			curTagIndex = curTagIndex + 1
		end
	end
	updateAll()
end

function onClickMoveRightAll()
	PlayButtonSound()

	if curLeftItemsNum <= 0 then
		return
	end
	local curTagIndex = 0
	for index=0,curLeftItemsNum do
		if not MoveItemToRight(curTagIndex) then
			curTagIndex = curTagIndex + 1
		end
	end
	updateAll()
end

function updateAll()
	UpdateLeftList()
	UpdateRightList()
	updateNumInfo()
	UpdateOperateBtnState()
end

function updateNumInfo()
	txtLeftListTitle.text = string.format(leftListTitleStr, displayName, curLeftItemsNum, curLeftCapicity)
	txtRightListTitle.text = string.format(rightListTitleStr,  curRightItemsNum, curRightCapicity)
end

--按下完成按钮时
function onClickListItem(context)
	local tagBtn = context.data.asButton

	if IsDoubleClick(tagBtn) then
		--双击操作
		local bindData = curDbClickedItem.data
		if bindData.bindTag ~= 1 then
			MoveItemToRight(bindData.bindIndex)
		else
			MoveItemToLeft(bindData.bindIndex)
		end
		updateAll()
		curDbClickedItem = nil
		SetFocusItem(nil)
		OnHideItemDetailInfo()
	else
		curDbClickedItem = tagBtn
		curClickItemTimer = 0
		SetFocusItem(tagBtn)

		local btnData = tagBtn.data
		if btnData ~= nil then
			local itemInfo = nil
			if btnData.bindTag == 1 then
				itemInfo = GetItemInfo(btnData.bindIndex, inventoryItemsList)
			else
				itemInfo = GetItemInfo(btnData.bindIndex, storageItemsList)
			end
			if itemInfo ~= nil then
				ShowItemDetailInfoUI(itemInfo, false, false)
				curHoverItemTag = nil
			end
		end
	end
end

function IsDoubleClick(tagBtn)
	if curDbClickedItem == tagBtn then
		return true
	end
	return false
end

function SetFocusItem(tagBtn)
	if (curSeledItem ~= nil) then
		SetListItemSelon(curSeledItem, false)
		curSeledItem = nil
	end
	curSeledItem = tagBtn
	if (curSeledItem ~= nil) then
		SetListItemSelon(curSeledItem, true)
		UpdateOperateBtnState()
	end
end

function UpdateLeftList()
	local curNum = 0
	listLeftItemsLv.numItems = curLeftCapicity
	for index=0,curLeftCapicity-1 do
		local obj = listLeftItemsLv:GetChildAt(index)
		local itemInfo = GetItemInfo(index, storageItemsList)
		RenderListItemLeft(obj, itemInfo, index)
		if itemInfo ~= nil then
			curNum = curNum + 1
		else
			if curSeledItem == obj then
				SetFocusItem(nil)
			end
		end
	end
	curLeftItemsNum = curNum
end

function UpdateRightList()
	local curNum = 0;
	rightShowCount = curRightCapicity + CS.GameTools.GetIgnorSpaceItemsCount(inventoryItemsList);
	listRightItemsLv.numItems = rightShowCount;
	for index=0,rightShowCount-1 do
		local obj = listRightItemsLv:GetChildAt(index)
		local itemInfo = GetItemInfo(index, inventoryItemsList)
		RenderListItemRight(obj, itemInfo, index)
		if itemInfo ~= nil then
			if not itemInfo.ItemInfo:IsIgnoreInventorySpace() then
				curNum = curNum + 1;
			end
		else
			if curSeledItem == obj then
				SetFocusItem(nil)
			end
		end
	end
	curRightItemsNum = curNum;
end

function RenderListItemLeft(obj, itemInfo, _index)
	local button = obj.asButton;
	if button.data == nil then
		InitBindListItemCommon(button)
		button.onDrop:Add(
		function (context)
			local fromBtn = context.data
			if fromBtn ~= nil then
				OnDropDragItem(fromBtn, button)
			end
		end)
	end
	UpdateListItemInfoCommon(button, itemInfo, _index, 0)
	SetListItemRollOverInfo(button, itemInfo,
	function ()
		DoShowItemDetailInfo(itemInfo, button)
	end,
	OnHideItemDetailInfo)
end

function RenderListItemRight(obj, itemInfo, _index)
	local button = obj.asButton;
	if button.data == nil then
		InitBindListItemCommon(button)
		button.onDrop:Add(
		function (context)
			local fromBtn = context.data
			if fromBtn ~= nil then
				OnDropDragItem(fromBtn, button)
			end
		end)
	end
	UpdateListItemInfoCommon(button, itemInfo, _index, 1)
	SetListItemRollOverInfo(button, itemInfo,
	function ()
		DoShowItemDetailInfo(itemInfo, button)
	end,
	OnHideItemDetailInfo)
end

function SetAllEmptyListEnabled(_isEnable)
	for index=curLeftItemsNum,curLeftCapicity-1 do
		local obj = listLeftItemsLv:GetChildAt(index)
		obj.asButton.enabled = _isEnable
	end
	for index=curRightItemsNum,curRightCapicity-1 do
		local obj = listRightItemsLv:GetChildAt(index)
		obj.asButton.enabled = _isEnable
	end
end

function GetItemInfo(_tindex, tagList)
	if _tindex >= tagList.Count then
		return nil
	else
		return tagList[_tindex]
	end
end

function onTimerTickUpdate()
	if curHoverItemTag ~= nil and curHoverItemSlot ~= nil then
		--当鼠标悬停一段时间后显示物品信息
		if curHoverTickTimer < ShowTooltipWindowDelay then
			curHoverTickTimer = curHoverTickTimer + timerTickInterval
		else
			ShowItemDetailInfoAtObj(curHoverItemTag, curHoverItemSlot, false, false, nil, nil, nil);
			curHoverItemTag = nil
		end
	end
	if curDbClickedItem ~= nil then
		--判断双击时间
		if curClickItemTimer < doubleClickTime then
			curClickItemTimer = curClickItemTimer + timerTickInterval
		else
			curDbClickedItem = nil
		end
	end
end

function DoShowItemDetailInfo(itemInfo, button)
	curHoverItemTag = itemInfo
	curHoverItemSlot = button;
	curHoverTickTimer = 0
end

function OnHideItemDetailInfo()
	CloseCurItemDetailInfoUI()
	curHoverItemTag = nil
end

function UpdateOperateBtnState()
	btnMoveLeft.enabled = false
	btnMoveRight.enabled = false
	btnMoveLeftAll.enabled = false
	btnMoveRightAll.enabled = false
	if curLeftItemsNum < curLeftCapicity and curRightItemsNum > 0 then
		btnMoveLeftAll.enabled = true
	end
	if curRightItemsNum < curRightCapicity and curLeftItemsNum > 0 then
		btnMoveRightAll.enabled = true
	end
	if curSeledItem ~= nil then
		local bindData = curSeledItem.data
		if bindData.bindTag == 1 then
			if curLeftItemsNum < curLeftCapicity then
				btnMoveLeft.enabled = true
			end
		else
			if curRightItemsNum < curRightCapicity then
				btnMoveRight.enabled = true
			end
		end
	end
end

function MoveItemToLeft(tagIndex)
	if curLeftItemsNum < curLeftCapicity then
		local itemInfo = GetItemInfo(tagIndex, inventoryItemsList)
		if not IsEnablePutIn(itemInfo) then
			return false
		end
		if MoveGameItemFromList(tagIndex, inventoryItemsList, storageItemsList,
		 storage2invList, inv2storageList) then
			curLeftItemsNum = curLeftItemsNum + 1
			curRightItemsNum = curRightItemsNum - 1
			return true
		end
	end
	return false
end

function IsEnablePutIn(itemInfo)
	if itemInfo == nil then
		return false
	end
	if not IsEmptyOrNil(itemsFilter) then
		if not CS.GameCoreHelper.CheckItemByCondition(itemInfo, itemsFilter) then
			--不支持放入的物品
			ShowToastInfo(GetGameString("LUAStorageBoxAlertInfo1"), 2.0)
			return false
		end
	end
	if not itemInfo.ItemInfo:isEnableDrop() then
		--不可丢弃物品
		ShowToastInfo(GetGameString("LUAStorageBoxAlertInfo2"), 2.0)
		return false
	end
	return true
end

function MoveItemToRight(tagIndex)
	if curRightItemsNum < curRightCapicity then
		if MoveGameItemFromList(tagIndex, storageItemsList, inventoryItemsList,
		 inv2storageList,  storage2invList) then
			curRightItemsNum = curRightItemsNum + 1
			curLeftItemsNum = curLeftItemsNum - 1
			return true
		end
	end
	return false
end

function OnLongPress(context)
	local tagItem, tagList = GetCurTouchedListItem(listLeftItemsLv, listRightItemsLv)
	if tagItem == nil then
		return
	end
	local tagBtn = tagItem.asButton
	if tagBtn == nil then
		return
	end
	local btnData = tagBtn.data
	if btnData ~= nil then
		local itemInfo = nil
		if btnData.bindTag == 1 then
			itemInfo = GetItemInfo(btnData.bindIndex, inventoryItemsList)
		else
			itemInfo = GetItemInfo(btnData.bindIndex, storageItemsList)
		end
		if itemInfo ~= nil then
			local itemUrl = tagBtn:GetChild("icon").asLoader.url
			CS.FairyGUI.DragDropManager.inst:StartDrag(tagBtn, itemUrl, tagBtn);

			SetAllEmptyListEnabled(true)
		end
	end
end

function OnDropDragItem(fromBtn, tagBtn)
	SetAllEmptyListEnabled(false)
	if fromBtn == nil or tagBtn == nil then
		return
	end
	local fromBtnData = fromBtn.data
	local tagBtnData = tagBtn.data
	if fromBtnData == nil or tagBtnData == nil then
		return
	end
	local index1 = fromBtnData.bindIndex
	local index2 = tagBtnData.bindIndex
	local isOpDone = false
	if fromBtnData.bindTag == tagBtnData.bindTag then
		local tagList
		if fromBtnData.bindTag == 1 then
			tagList = inventoryItemsList
		else
			tagList = storageItemsList
		end
		isOpDone = SwapItemsInList(index1, index2, tagList)
	else
		if fromBtnData.bindTag == 1 then
			local itemInfo = GetItemInfo(index1, inventoryItemsList)
			if itemInfo ~= nil and not IsEnablePutIn(itemInfo) then
				return
			end
			isOpDone = SwapItemsWithOtherList(index1, index2, inventoryItemsList, storageItemsList,
				storage2invList, inv2storageList)
		else
			local itemInfo = GetItemInfo(index2, inventoryItemsList)
			if itemInfo ~= nil and not IsEnablePutIn(itemInfo) then
				return
			end
			isOpDone = SwapItemsWithOtherList(index1, index2, storageItemsList, inventoryItemsList,
				inv2storageList, storage2invList)
		end
	end
	if isOpDone then
		updateAll()
	end
end