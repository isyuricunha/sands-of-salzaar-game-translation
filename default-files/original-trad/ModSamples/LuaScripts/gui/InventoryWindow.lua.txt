require("gui/WindowUtils")
require("GameUtils")
require("gui/InventoryFoodsSubWin")

local GameCoreHelper = CS.GameCoreHelper;

local StringFormat = GameCoreHelper.StringFormat;

--页面访问控件
---@type FairyGUI.GComponent
local contentPane

local btnClose;
local btnDrop;

local tabItemCategory
local ctlItemsList
local ctlActionBar
local showFoodsWinCtl
local showActionVar

local sceneMsgHandler

local timerTickInterval = 0.05

local isInventoryUpdated = false

local isEquipUpdated = false
local updateInfoTagRole = nil

--当前窗体模式 0：大地图 1：战斗
local curWindowMode = 0

local curBattleScene = nil;

local curRole = nil;
local imgCurRoleHead;
local txtRoleEquipType;
local equipSlots;

local btnFoods;
local btnSort;

local equipBoxComp;
local equipBoxGroup;

local ctlFoodsWin;

local strFoodsBtnTitle;
local strSortBtnTitle;

--角色属性面板
local btnDetailAttr;
local txtHp;
local txtMp;
local txtStr;
local txtAgi;
local txtSpr;
local txtStm;
local txtAtk;
local txtMatk;
local txtDef;
local txtMdef;

local statPojoHp;
local statPojoMp;
local statPojoStr;
local statPojoAgi;
local statPojoSpr;
local statPojoStm;
local statPojoAtk;
local statPojoMatk;

--手柄操作相关
local navCtl = nil;
local listNavCtlRoles = nil;
local listNavCtlEquips = nil;
local listNavCtlTabs = nil;
local listNavCtlItems = nil;

local curKeyFocusSlot = nil;

local constBattleAlertMsg = GetGameString("lua_script_str_262");

local constNumShowEquipCount = 4;

local isMobileMode;

local groupKeyInfo = nil;
local txtKeyConfig;
local btnKeyConfig;

--窗体初始化时
function onInit()
    contentPane = self.contentPane

    CS.GUIHelper.ForceClearItemDetailInfoWindow(); --防止物品信息窗口缓存的注册回调导致的引用BUG

    isMobileMode = CS.GameTools.IsMobileMode();

    btnClose = contentPane:GetChild("btn_close").asButton;
    btnClose.onClick:Add(onClickBtnClose);

    btnDrop = contentPane:GetChild("btn_drop").asButton;
    btnDrop.onClick:Add(onClickBtnDrop);

    local tabListComp = contentPane:GetChild("tab_listbar").asCom
    tabItemCategory = CS.GUIHelper.CreateListHeaderTabsBar(tabListComp, true);

    local itemListComp = contentPane:GetChild("item_list").asCom
    ctlItemsList = CS.GUIHelper.CreateItemListBox(itemListComp, GameCoreHelper.GetPlayerInventoryList(),
        GameCoreHelper.GetPlayerInventoryCapicity(), 0)
    --ctlItemsList:SetListTitleText(contentPane:GetChild("txt_itemsinfo").asTextField)
    --ctlItemsList:SetAutoSortEnable(true)
    ctlItemsList:SetUseOpEnable(true, nil)
    ctlItemsList:SetEquipOpEnable(true)
    ctlItemsList:SetDropOpEnable(true)
    --ctlItemsList:SetSortItemListCallback(onSortItemListCallback)
    ctlItemsList:SetParentWindow(contentPane)
    ctlItemsList:SetOpTagSlotCallback(onOpTagItemSlotCallback)
    ctlItemsList:SetDropTagSlotCallback(onDropTagItemSlotCallback)

    if isMobileMode then
        ctlActionBar = nil;
        groupKeyInfo = contentPane:GetChild("g_keyconfig").asGroup;
        btnKeyConfig = contentPane:GetChildInGroup(groupKeyInfo, "btn_keyconfig").asButton;
        btnKeyConfig.onClick:Add(onClickBtnKeyConfig);
    else
        local actionBarComp = contentPane:GetChild("actionbar_wrapper"):GetChild("action_bar").asCom;
        ctlActionBar = CS.GUIHelper.CreateActionBarListUI(actionBarComp, "list_slots");

        showActionVar = contentPane:GetController("show_actionbar")
    end
    if ctlActionBar ~= nil then
        ctlActionBar:RefreshQuickSlots();
        ctlItemsList:SetActionBarUI(ctlActionBar);
    end
    if showActionVar ~= nil and not isMobileMode then
        showActionVar.selectedIndex = 1
    end

    showFoodsWinCtl = contentPane:GetController("show_foods");

    --绑定按钮事件
    tabItemCategory:ClearTabList()
    tabItemCategory:AddTabItem("all", nil, "ui://zuvkwb6nnobsim", GetGameString("lua_script_str02"))
    tabItemCategory:AddTabItem("equip", nil, "ui://zuvkwb6nnobsiq", GetGameString("lua_script_str03"))
    tabItemCategory:AddTabItem("cunsume", nil, "ui://zuvkwb6nnobsin", GetGameString("lua_script_str05"))
    tabItemCategory:AddTabItem("goods", nil, "ui://zuvkwb6nnobsir", GetGameString("lua_script_str04"))
    tabItemCategory:AddTabItem("present", nil, "ui://zuvkwb6nnobsip", GetGameString("lua_script_str06"))
    tabItemCategory:AddTabItem("gem", nil, "ui://zuvkwb6nnobsio", GetGameString("item_type_name_11"))

    tabItemCategory.OnSeledItemChanged = OnItemCategoryTabChanged

    --重置窗口位置及创建子窗口
    local pW = CS.FairyGUI.GRoot.inst.width
    --local pH = CS.FairyGUI.GRoot.inst.height
    if isMobileMode then
        contentPane:SetXY(pW / 2 - contentPane.width / 2 - 140, 0);
    else
        contentPane:SetXY(pW / 2 - contentPane.width / 2 - 12, 0);
    end
    --contentPane:SetXY(pW/2 - contentPane.width/2 - 12, pH/2 - contentPane.height/2 - 100)

    --创建装备信息窗口
    equipBoxComp = contentPane:GetChild("equip_box").asCom;
    equipBoxGroup = equipBoxComp:GetChild("slot_group").asGroup;
    imgCurRoleHead = equipBoxComp:GetChild("head_cliper"):GetChild("head_holder").asImage;
    txtRoleEquipType = equipBoxComp:GetChild("weapon_limit").asTextField;
    equipSlots = {}
    for i = 0, constNumShowEquipCount - 1, 1 do
        local tagBtn = equipBoxComp:GetChildInGroup(equipBoxGroup, "equip_slot_" .. i).asButton;
        local tagSlot = CS.GUIHelper.CreateItemSlot(tagBtn);
        tagSlot:SetSlotTagIndex(1, i);
        tagSlot:SetDefaultItemIconPath(GetEquipSlotDefaultIconPath(i));

        equipSlots[i] = tagSlot;
    end

    --初始化装备栏位
    if equipSlots ~= nil then
        for i = 0, constNumShowEquipCount - 1, 1 do
            ctlItemsList:SetEuipSlot(i, equipSlots[i])
        end
    end
    ctlItemsList:SetEquipBoxComponent(equipBoxComp);

    --初始化食物栏位
    ctlFoodsWin = InventoryFoodsSubWin:Create()
    ctlFoodsWin:Init(contentPane:GetChild("food_list").asCom)
    ctlFoodsWin:SetCloseCallback(function()
        SetShowFoodWin(false);
    end)

    --初始化角色面板
    local attrBox = contentPane:GetChild("attr_box").asCom;
    btnDetailAttr = attrBox:GetChild("btn_more").asButton;
    txtHp = attrBox:GetChild("txt_hp").asTextField;
    txtMp = attrBox:GetChild("txt_mp").asTextField;
    txtStr = attrBox:GetChild("txt_str").asTextField;
    txtAgi = attrBox:GetChild("txt_agi").asTextField;
    txtSpr = attrBox:GetChild("txt_spt").asTextField;
    txtStm = attrBox:GetChild("txt_stm").asTextField;
    txtAtk = attrBox:GetChild("txt_atk").asTextField;
    txtMatk = attrBox:GetChild("txt_matk").asTextField;
    txtDef = attrBox:GetChild("txt_def").asTextField;
    txtMdef = attrBox:GetChild("txt_mdef").asTextField;
    statPojoHp = GameCoreHelper.GetRoleStatuFieldInfo("s_生命");
    statPojoMp = GameCoreHelper.GetRoleStatuFieldInfo("s_气力");
    statPojoStr = GameCoreHelper.GetRoleStatuFieldInfo("b_臂力");
    statPojoAgi = GameCoreHelper.GetRoleStatuFieldInfo("b_身法");
    statPojoSpr = GameCoreHelper.GetRoleStatuFieldInfo("b_精神");
    statPojoStm = GameCoreHelper.GetRoleStatuFieldInfo("b_根骨");
    statPojoAtk = GameCoreHelper.GetRoleStatuFieldInfo("s_攻击");
    statPojoMatk = GameCoreHelper.GetRoleStatuFieldInfo("s_魔法攻击");

    --初始化角色选择控件
    ctlRoleList = CS.GUIHelper.CreateRoleSelectSideBox(contentPane:GetChild("role_list").asCom, function()
        onSeledRoleInTeam()
    end);

    btnFoods = contentPane:GetChild("btn_foods").asButton
    btnFoods.onClick:Set(onClickBtnFoods);
    strFoodsBtnTitle = btnFoods.title;

    btnSort = contentPane:GetChild("btn_sort").asButton
    btnSort.onClick:Set(onClickBtnSort);
    strSortBtnTitle = btnSort.title

    btnDetailAttr.onClick:Set(onClickRoleDetail);

    --设置物品栏交互逻辑
    ctlItemsList:SetExchangeList(ctlFoodsWin.ctlItemsList, function(slot1, slot2)
        ExchangeItemsFromInventoryToFoods(slot1, slot2);
    end);
    ctlFoodsWin.ctlItemsList:SetExchangeList(ctlItemsList, function(slot1, slot2)
        ExchangeItemsFromInventoryToFoods(slot2, slot1);
    end);

    --设置默认值
    self:SetCloseButton(btnClose);

    SetShowFoodWin(false);

    ctlRoleList:SetDefaultSel();

    --创建按键导航空间
    navCtl = self:GetOrCreateNavCtl();
    local thisNavObj = nil;
    local lastNavObj = nil;
    local tagBtn = nil;

    local navObjRoles = navCtl:AddNavObjSubSpace();
    listNavCtlRoles = navObjRoles.subNavSpace;

    local navObjEquips = navCtl:AddNavObjSubSpace();
    listNavCtlEquips = navObjEquips.subNavSpace;
    listNavCtlEquips:ClearNavObjects();
    local navObjEquip0 = listNavCtlEquips:AddNavObjByGButton(equipSlots[0].bindBtn);
    InitEquipSlotNavObj(equipSlots[0], navObjEquip0);
    local navObjEquip1 = listNavCtlEquips:AddNavObjByGButton(equipSlots[1].bindBtn);
    InitEquipSlotNavObj(equipSlots[1], navObjEquip1);
    local navObjEquip2 = listNavCtlEquips:AddNavObjByGButton(equipSlots[2].bindBtn);
    InitEquipSlotNavObj(equipSlots[2], navObjEquip2);
    local navObjEquip3 = listNavCtlEquips:AddNavObjByGButton(equipSlots[3].bindBtn);
    InitEquipSlotNavObj(equipSlots[3], navObjEquip3);
    navObjEquip1:SetNavDown(navObjEquip0);
    navObjEquip2:SetNavDown(navObjEquip1);
    navObjEquip2:SetNavRight(navObjEquip3);
    navObjEquip1:SetNavRight(navObjEquip3);
    navObjEquip0:SetNavRight(navObjEquip3);

    local navObjTabs = navCtl:AddNavObjSubSpace();
    listNavCtlTabs = navObjTabs.subNavSpace;
    navObjTabs:SetNavLeft(navObjRoles);

    local navObjDetail = navCtl:AddNavObjByGButton(btnDetailAttr);
    navObjDetail:SetNavDown(navObjTabs);
    navObjDetail:SetNavLeft(navObjEquips);
    navObjTabs:SetNavUp(navObjEquips);

    local navObjItems = navCtl:AddNavObjSubSpace();
    listNavCtlItems = navObjItems.subNavSpace;
    navObjItems:SetNavUp(navObjTabs);
    navObjItems:SetNavLeft(navObjRoles);

    thisNavObj = navCtl:AddNavObjByGButton(btnFoods);
    thisNavObj:SetNavUp(navObjItems);
    thisNavObj:SetNavLeft(navObjRoles);
    lastNavObj = thisNavObj;
    thisNavObj = navCtl:AddNavObjByGButton(btnSort);
    thisNavObj:SetNavUp(navObjItems);
    thisNavObj:SetNavLeft(lastNavObj);

    navObjEquips:SetNavLeft(navObjRoles);

    --定位按钮表导航方向
    listNavCtlRoles:ClearNavObjects();
    local allSlots = ctlRoleList:GetAllSlots();
    lastNavObj = nil;
    for index = 0, allSlots.Count - 1 do
        tagBtn = allSlots[index].bindBtn;
        --建立按键导航
        thisNavObj = listNavCtlRoles:AddNavObjByGButton(tagBtn);
        if lastNavObj ~= nil then
            thisNavObj:SetNavUp(lastNavObj);
        end
        lastNavObj = thisNavObj;
    end

    listNavCtlTabs:ClearNavObjects();
    local allTabItems = tabItemCategory:GetAllListItems();
    lastNavObj = nil;
    for index = 0, allTabItems.Count - 1 do
        tagBtn = allTabItems[index].bindBtn;
        --建立按键导航
        thisNavObj = listNavCtlTabs:AddNavObjByGButton(tagBtn);
        if lastNavObj ~= nil then
            thisNavObj:SetNavLeft(lastNavObj);
        end
        lastNavObj = thisNavObj;
    end

    self:RegJoystickQuickButton(btnDrop, JoystickButton.ButtonX, false, true);

    --手机端点击空白处关闭
    if IsMobileMode then
        local graph = CS.FairyGUI.GGraph()
        graph.alpha = 0
        contentPane.parent:AddChildAt(graph, 0)
        graph:SetSize(GRoot.inst.width, GRoot.inst.height)
        graph:DrawRect(graph.width, graph.height, 0,
            CS.GUIHelper.GetColor("FFFFFF"), CS.GUIHelper.GetColor("FFFFFF"))
        graph:SetPivot(1, 0, true)
        graph:SetXY(contentPane.width, 0)
        graph.onClick:Add(onClickBtnClose)
    end

    --刷新列表
    ResetItemCategory();

    --设置默认
    navCtl:SetDefaultFocus(navObjDetail);
end

function InitEquipSlotNavObj(tagSlot, tagNavObj)
    local btnSlot = tagSlot;
    tagNavObj:SetFocusEventCallback(function()
        ctlItemsList:ShowItemDetailInfoBySlot(btnSlot);
    end, function()
        btnSlot:DoRollOutOp();
    end);
    tagNavObj:SetPressedCallback(function()
        btnSlot:DoRightClickOp();
    end);
end

--设置窗口参数
function SetWindowParams(args)
    local categoryCode = args[0]
    SetItemCategory(categoryCode)
end

--设置绑定的战斗场景
function SetBattleScene(_bs)
    curBattleScene = _bs;
    if curBattleScene ~= nil then
        curWindowMode = 1;
        btnDetailAttr.visible = false;
    else
        curWindowMode = 0;
        btnDetailAttr.visible = true;
    end
    ctlItemsList:SetUseOpEnable(true, curBattleScene)
end

--窗体开始显示并播放显示动画时
function onDoShowAnimation()
    CommonShowWindowAnim(self, onShown)
end

--窗体播放完显示动画时
function onShown()
    sceneMsgHandler = CS.GUIHelper.RegSceneMsgHandler(OnSceneMsgHandler)
    --增加计时器事件
    CS.FairyGUI.Timers.inst:Add(timerTickInterval, 0, onTimerTickUpdate);
end

--窗体开始播放关闭动画时
function onDoHideAnimation()
    CommonHideWindowAnim(self, onHideAnimationDone)
end

function onHideAnimationDone()
    self:HideImmediately();
end

--窗体隐藏时
function onHide()
    CS.GUIHelper.ForceClearItemDetailInfoWindow();
    --移除计时器事件
    CS.FairyGUI.Timers.inst:Remove(onTimerTickUpdate);
    if sceneMsgHandler ~= nil then
        CS.GUIHelper.RemoveSceneMsgHandler(sceneMsgHandler)
    end
    --移除模糊背景

    --清理缓存
    CS.GUIHelper.ReleaseCachedGuiTexs();
end

--重载按键事件
function onKeyDown(_keyCode)
    local hotkeyCode = CS.GUIHelper.GetHotkeyValByKeycode(_keyCode, "common");
    if hotkeyCode > 0 then
        if hotkeyCode == 2 then
            onClickBtnClose();
            return true;
        end
    end
    return false
end

function onClickBtnClose()
    PlayButtonSound();

    self.CurDialogResult = -1;
    self:Hide();
end

function onClickBtnDrop()
    PlayButtonSound();

    if curKeyFocusSlot ~= nil then
        onDropTagItemSlotCallback(curKeyFocusSlot);
    end
end

function onClickBtnKeyConfig()
    PlayButtonSound();

    CS.GUIHelper.ShowActionBarConfigUI(0, nil);
end

function onTimerTickUpdate()
    if isInventoryUpdated then
        DoUpdateInventoryList()
    end
    if isEquipUpdated then
        DoUpdateRoleInfoStat()
    end
    ctlItemsList:RunUpdate(timerTickInterval)
    if ctlFoodsWin ~= nil then
        ctlFoodsWin:RunUpdate(timerTickInterval);
    end
end

function OnSceneMsgHandler(msgType, msgArg)
    if msgType == "update_infos" then
        UpdateInventoryList(false)
    elseif msgType == "player_status_updated" then
        UpdateRoleInfoStat(msgArg, false)
    end
end

function UpdateInventoryList(isImmed)
    if isImmed then
        DoUpdateInventoryList()
    else
        isInventoryUpdated = true
    end
end

function DoUpdateInventoryList()
    ctlItemsList:UpdateItemList()
    if ctlFoodsWin ~= nil then
        ctlFoodsWin:UpdateList();
    end
    if curWindowMode ~= 0 then
        --ctlResBox.bindView.visible = true;
        --ctlResBox:UpdateNums();
    else
        --ctlResBox.bindView.visible = false;
    end

    btnFoods.title = GameCoreHelper.StringFormat(strFoodsBtnTitle, GameCoreHelper.GetPlayerFoodsListCount(),
        GameCoreHelper.GetPlayerFoodsCapicity());
    btnSort.title = GameCoreHelper.StringFormat(strSortBtnTitle, GameCoreHelper.GetPlayerInvUsedCount(),
        GameCoreHelper.GetPlayerInventoryCapicity());

    --重建物品列表按键导航
    listNavCtlItems:ClearNavObjects();
    local thisRow = {};
    local lastRow;
    local colCount = ctlItemsList:GetCurColCount(77);
    local colIndex = 0;
    local thisNavObj = nil;
    local lastNavObj = nil;
    local tagSlot;
    for index = 0, ctlItemsList.curItemSlots.Count - 1 do
        tagSlot = ctlItemsList.curItemSlots[index];
        tagBtn = tagSlot.bindBtn;
        --建立按键导航
        thisNavObj = listNavCtlItems:AddNavObjByGButton(tagBtn);
        thisRow[colIndex] = thisNavObj;
        if lastNavObj ~= nil then
            thisNavObj:SetNavLeft(lastNavObj);
        end
        if lastRow ~= nil and lastRow[colIndex] ~= nil then
            thisNavObj:SetNavUp(lastRow[colIndex]);
        end
        local btnSlot = tagSlot;
        thisNavObj:SetFocusEventCallback(function()
            curKeyFocusSlot = btnSlot;
            ctlItemsList:ScrollToItemIndex(index);
            ctlItemsList:ShowItemDetailInfoBySlot(btnSlot);
        end, function()
            curKeyFocusSlot = nil;
            btnSlot:DoRollOutOp();
        end);
        thisNavObj:SetPressedCallback(function()
            btnSlot:DoRightClickOp();
        end);
        lastNavObj = thisNavObj;

        colIndex = colIndex + 1;
        if colIndex >= colCount then
            --换行
            colIndex = 0;
            lastRow = thisRow;
            lastNavObj = nil;
            thisRow = {};
        end
    end

    isInventoryUpdated = false
end

function UpdateRoleInfoStat(roleID, isImmed)
    updateInfoTagRole = roleID
    if isImmed then
        DoUpdateRoleInfoStat()
    else
        isEquipUpdated = true
    end
end

function DoUpdateRoleInfoStat()
    if curRole == nil then
        return
    end
    if curRole.roleID == updateInfoTagRole then
        UpdateRoleInfo()
    end
    isEquipUpdated = false
end

function OnItemCategoryTabChanged(_code)
    local limitCondition = ""
    if _code == "equip" then
        limitCondition = "[$tagitem:main_type$][=]1"
    elseif _code == "cunsume" then
        limitCondition = "[$tagitem:main_type$][=]2|[$tagitem:main_type$][=]8"
    elseif _code == "goods" then
        limitCondition = "[$tagitem:main_type$][=]3"
    elseif _code == "present" then
        limitCondition = "[$tagitem:tag=Present$][<>][$null$]"
    elseif _code == "gem" then
        limitCondition = "[$tagitem:main_type$][=]11"
    else
        limitCondition = ""
    end
    ctlItemsList:SetListFilter(limitCondition)
    UpdateInventoryList(true)
end

function ResetItemCategory()
    tabItemCategory:SetSeledItemByKey("all", true);
end

--设置物品过滤类型
function SetItemCategory(_category)
    tabItemCategory:SetSeledItemByKey(_category, true);
end

function onSortItemListCallback()
    GameCoreHelper.SortPlayerInventoryList()
    ResetItemCategory()
end

--操作目标回调
function onOpTagItemSlotCallback(tagSlot)
    local tagItem = tagSlot.bindItemInfo
    if tagItem == nil then
        return
    end
    if curRole == nil then
        return
    end
    local _isUpdateRoleInfo = false
    if tagSlot.bindTag == 1 then
        --卸下装备
        if curWindowMode == 1 then
            ShowToastInfo(constBattleAlertMsg, 2.0);
        else
            GameCoreHelper.UnequipTagItemToInventory(curRole, tagSlot.bindIndex);
        end
        _isUpdateRoleInfo = true
    elseif tagSlot.bindTag == 0 then
        if tagItem.ItemInfo.item_type == 1 then
            --装上装备
            if curWindowMode == 1 then
                ShowToastInfo(constBattleAlertMsg, 2.0);
            else
                GameCoreHelper.EquipTagItemInInventory(curRole, tagItem);
                _isUpdateRoleInfo = true;
            end
        else
            if curWindowMode == 1 then
                if tagItem.ItemInfo:IsBattleUseEnable() then
                    if curBattleScene ~= nil then
                        local instItem = curBattleScene:GetBattleItemInstance(tagItem.itemID, tagItem.itemCount)
                        curBattleScene:UseBattleItem(instItem)
                    end
                    _isUpdateRoleInfo = true
                end
            else
                if tagItem.ItemInfo:IsMapUseEnable() then
                    UseTagSlotItemInMap(tagSlot)
                    _isUpdateRoleInfo = true
                end
            end
        end
    end
    if _isUpdateRoleInfo then
        UpdateRoleInfoStat(curRole.roleID, false)
    end
end

--丢弃道具回调
function onDropTagItemSlotCallback(tagSlot)
    local tagItem = tagSlot.bindItemInfo
    if tagItem == nil then
        return;
    end
    if not tagItem.ItemInfo:isEnableDrop() then
        return;
    end

    local _confirmInfo = GameCoreHelper.StringFormat(GetGameString("UIPageInventory_OnConfirmDropItem"),
        tagItem:GetItemName(), tagItem.itemCount)
    ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
        if ret == 1 then
            if curBattleScene ~= nil then
                --战斗模式下丢到地上
                local dropList = GameCoreHelper.GetEmptyGameItemList()
                dropList:Add(tagItem)
                curBattleScene:PlayerDropItems(dropList)
            end

            GameCoreHelper.RemovePlayerSpecificItem(tagItem, -1, true);
            isInventoryUpdated = true
        end
    end)
end

--设置角色选择回调
function onSeledRoleCallback()
    ctlItemsList:SetCurRole(curRole)
end

--大地图上使用道具
function UseTagSlotItemInMap(tagSlot)
    if curWindowMode == 1 then
        return
    end
    if tagSlot.bindItemInfo == nil then
        return
    end
    local realIndex = GameCoreHelper.GetPlayerInventoryList():IndexOf(tagSlot.bindItemInfo);
    if realIndex < 0 then
        return;
    end
    local tagNum = tagSlot.bindItemInfo.itemCount
    if tagNum > 1 and tagSlot.bindItemInfo.ItemInfo:IsBatchUse() then
        CS.GUIHelper.ShowNumSelectorDialog(GetGameString("UIPageInventory_UseTagSlotItem"), 1, tagNum, tagNum, 0, "",
            function(count)
                if count > 0 then
                    GameCoreHelper.UseTagItemInSlotByCount(realIndex, count);
                else
                    return
                end
            end)
    else
        GameCoreHelper.UseTagItemInSlot(realIndex);
    end
end

function onSeledRoleInTeam()
    if ctlRoleList ~= nil then
        if ctlRoleList.CurSeledRole ~= nil then
            SetCurRole(ctlRoleList.CurSeledRole)
        end
    end
end

function SetCurRole(_tagRole)
    if curRole ~= _tagRole then
        curRole = _tagRole
        if curRole ~= nil then
            --txtRoleName.text = curRole:GetRoleName()
            --txtRoleLevel.text = CS.GameCoreHelper.StringFormat(GetGameString("RoleLevelFieldOpt1"), self.curRole.roleLevel)
            if not curRole:IsPlayer() then
                local useWeaponType = curRole:GetUsedWeaponType();
                txtRoleEquipType.text = CS.GameTools.GetWeaponName(useWeaponType);
            end
            UpdateRoleInfo()
        end
        onSeledRoleCallback();
    end
end

constrPhyDefFieldName = GetGameString("lua_script_str_191");
constrMagDefFieldName = GetGameString("lua_script_str_192");

function UpdateRoleInfo()
    if curRole ~= nil then
        --ctlRoleStatList:ShowRoleStat(curRole.curRealStatu)
        --modelCtl = CS.GUIHelper.CreateModelViewToTagGraphHolder(self.curRole:GetRoleMuModelInfo(), self.graphModelHolder, true)
        --UpdateModelDir()
        CS.GUIHelper.GenerateRoleHeadAvataImage(curRole.HeadAvata, imgCurRoleHead);
        --更新属性面板
        local sSplitStr = ": ";
        txtHp.text = statPojoHp.field_name .. sSplitStr .. curRole:GetRoleStat(statPojoHp.field_code);
        txtMp.text = statPojoMp.field_name .. sSplitStr .. curRole:GetRoleStat(statPojoMp.field_code);
        txtStr.text = statPojoStr.field_name .. sSplitStr .. curRole:GetRoleStat(statPojoStr.field_code);
        txtAgi.text = statPojoAgi.field_name .. sSplitStr .. curRole:GetRoleStat(statPojoAgi.field_code);
        txtSpr.text = statPojoSpr.field_name .. sSplitStr .. curRole:GetRoleStat(statPojoSpr.field_code);
        txtStm.text = statPojoStm.field_name .. sSplitStr .. curRole:GetRoleStat(statPojoStm.field_code);
        txtAtk.text = statPojoAtk.field_name .. sSplitStr .. curRole:GetRoleStat(statPojoAtk.field_code);
        txtMatk.text = statPojoMatk.field_name .. sSplitStr .. curRole:GetRoleStat(statPojoMatk.field_code);
        txtDef.text = constrPhyDefFieldName ..
        sSplitStr .. curRole:GetRoleStat("udatk_物理伤害减免") + curRole:GetRoleStat("udatk_伤害免除");
        txtMdef.text = constrMagDefFieldName ..
        sSplitStr .. curRole:GetRoleStat("udatk_巫术伤害减免") + curRole:GetRoleStat("udatk_伤害免除");
        --更新装备列表
        txtRoleEquipType.visible = false;
        local _tagEquipItem;
        if equipSlots ~= nil then
            for i = 0, constNumShowEquipCount - 1, 1 do
                _tagEquipItem = curRole:GetEquipSlotByIndex(i);
                equipSlots[i]:SetBindItem(_tagEquipItem);
                if i == 0 and not curRole:IsPlayer() and _tagEquipItem == nil then
                    txtRoleEquipType.visible = true;
                end
            end
        end
    end
end

function onClickBtnFoods()
    PlayButtonSound()

    SetShowFoodWin(not IsFoodWinShowed());
end

function onClickBtnSort()
    PlayButtonSound()

    CS.GUIHelper.ForceClearItemDetailInfoWindow();
    onSortItemListCallback();
end

function onClickRoleDetail()
    PlayButtonSound()

    if curRole == nil then
        return
    end
    CS.GUIHelper.ShowPartyPage(nil, "hero_detail/" .. curRole.roleID);
end

function SetShowFoodWin(_isShow)
    if _isShow then
        showFoodsWinCtl.selectedIndex = 1;
    else
        showFoodsWinCtl.selectedIndex = 0;
    end
end

function IsFoodWinShowed()
    return showFoodsWinCtl.selectedIndex == 1;
end

function ExchangeItemsFromInventoryToFoods(index1, index2)
    local playerList = GameCoreHelper.GetPlayerInventoryList();
    local foodList = GameCoreHelper.GetPlayerFoodsList();
    local _item1 = nil;
    local _item2 = nil;
    if index1 >= 0 and index1 < playerList.Count then
        _item1 = playerList[index1];
    end
    if index2 >= 0 and index2 < foodList.Count then
        _item2 = foodList[index2];
    end
    if _item1 == nil and _item2 == nil then
        return;
    end
    if _item1 ~= nil then
        if not (_item1.ItemInfo.item_type == 9 and _item1.currentDurability > 0) then
            return;
        end
        playerList:RemoveAt(index1);
        if _item2 ~= nil then
            foodList:RemoveAt(index2);
            foodList:Insert(index2, _item1);
            playerList:Insert(index1, _item2);
        else
            if GameCoreHelper.GetPlayerFoodsListCount() >= GameCoreHelper.GetPlayerFoodsCapicity() then
                return;
            end
            foodList:Add(_item1);
        end
    else
        playerList:Add(_item2);
        foodList:RemoveAt(index2);
    end

    UpdateInventoryList(false);
end
