require("gui/WindowUtils")
require("GameUtils")
require("GameMath")

local GameCoreHelper = CS.GameCoreHelper
local GUIHelper = CS.GUIHelper

SoldierDisposeSubWin = {
	curCard = nil,
	curSoldierInfo = nil,
	curModelInfo = nil,
	curSeledItemSlot = nil,
	curOpTagItem = nil,
	RefreshParentListCallback = nil,
}

SoldierDisposeSubWin.meta = {__index = SoldierDisposeSubWin}

function SoldierDisposeSubWin:Create()
	local tagClass = {}
    setmetatable(tagClass, self.meta)
    return tagClass
end

local curDragingOpSlot = nil;
constDefaultBagCapicity = 15;
function SoldierDisposeSubWin:Init(_tagComp)
	self.mainView = _tagComp;

	self.playerTeam = GameCoreHelper.GetPlayerTeam();

	self.unitBaseInfo = CreateUnitBaseAttrBox(_tagComp:GetChild("base_box").asCom);
	self.unitBaseInfo.OnGemSlotClick = function(_cardSlot, _gemItemSlot)
		_gemItemSlot.bindTag = 3;
		_gemItemSlot.bindItemInfo = _gemItemSlot.curItem;
		_gemItemSlot.slotType = 2;
		local tagItem = _gemItemSlot.bindItemInfo;
		if tagItem == nil then
			return
		end
		self:SetCurSeledItemSlot(_gemItemSlot);
	end;

	self.listPotionItems = GameCoreHelper.GetEmptyGameItemList();
	self.listGemItems = GameCoreHelper.GetEmptyGameItemList();

	local groupBag1 = _tagComp:GetChild("g_bag1").asGroup;
	self.compBag1 = _tagComp:GetChildInGroup(groupBag1, "bag_1").asCom;
	self.ctlPotionList = CS.GUIHelper.CreateItemListBox(self.compBag1, self.listPotionItems, constDefaultBagCapicity, 0);
	self.ctlPotionList:SetUseOpEnable(false, nil);
	self.ctlPotionList:SetEquipOpEnable(false);
	self.ctlPotionList:SetDropOpEnable(false);
	self.ctlPotionList:SetParentWindow(CS.GUIHelper.GetRoot());
	self.ctlPotionList:SetClickSlotCallback(function(_tagSlot)
		if IsMobileMode then
			self.ctlPotionList:SetFocusItem(_tagSlot)
			self.ctlPotionList:DoShowItemDetailInfoWindow(_tagSlot, true);
		end
		self:onClickTagItemSlotCallback(_tagSlot);
	end);
	self.ctlPotionList:SetOpTagSlotCallback(function(_tagSlot)
		self:onOpTagItemSlotCallback(_tagSlot);
	end);
	self.ctlPotionList:SetAutoCapicity(true);

	local groupBag2 = _tagComp:GetChild("g_bag2").asGroup;
	self.compBag2 = _tagComp:GetChildInGroup(groupBag2, "bag_2").asCom;
	self.ctlGemList = CS.GUIHelper.CreateItemListBox(self.compBag2, self.listGemItems, constDefaultBagCapicity, 2);
	self.ctlGemList:SetUseOpEnable(false, nil);
	self.ctlGemList:SetEquipOpEnable(false);
	self.ctlGemList:SetDropOpEnable(false);
	self.ctlGemList:SetParentWindow(CS.GUIHelper.GetRoot());
	self.ctlGemList:SetClickSlotCallback(function(_tagSlot)
		if IsMobileMode then
			self.ctlGemList:SetFocusItem(_tagSlot)
			self.ctlGemList:DoShowItemDetailInfoWindow(_tagSlot, true);
		end
		self:onClickTagItemSlotCallback(_tagSlot);
	end);
	self.ctlGemList:SetOpTagSlotCallback(function(_tagSlot)
		self:onOpTagItemSlotCallback(_tagSlot);
	end);
	self.ctlGemList:ClearCustomDragPutAreaObjs();
	self.ctlGemList:SetCustomDragPutCallback(function(_tagSlot, _slotIndex)
		self:onDragItemPutCallback(_tagSlot, _slotIndex);
	end);
	self.ctlGemList:SetAutoCapicity(true);

	for index=0,CONFIG_CARD_SLOTS_COUNT -1 do
		local tagGemSlot = self.unitBaseInfo.cardSlots[index];
		if tagGemSlot ~= nil and tagGemSlot.bindBtn ~= nil then
			self.ctlGemList:AddCustomDragPutAreaObj(tagGemSlot.bindBtn);
			tagGemSlot.bindBtn.draggable = true;
			tagGemSlot.bindBtn.onDragStart:Set(function(context)
				context:PreventDefault();
				if tagGemSlot.curItem == nil then
					return;
				end
                local iconSpt = CS.GUIHelper.GetItemIconSprite(tagGemSlot.curItem:GetItemIconFile());
				local iconRad = 64;
				curDragingOpSlot = tagGemSlot;
				CS.GUIHelper.StartDragCustomImg(iconSpt, iconRad, iconRad, function()
					local tagRootPos = CS.GUIHelper.GetCurCustomDragPos();
					if not (CS.GUIHelper.IsRootPosInComponentRect(tagGemSlot.bindBtn, tagRootPos)) then
						--卸下宝石
						if curDragingOpSlot ~= nil and curDragingOpSlot.slotIndex ~= nil then
							self:TryRemoveTagCardGem(curDragingOpSlot.slotIndex);
						end
					end
				end);
			end);
		end
	end

	self.curSeledItemSlot = nil;

	self.btnOp1 = _tagComp:GetChild("btn_func1").asButton;
	self.btnOp1.onClick:Add(function()
		self:onClickBtnOpFunc1();
	end);
	self.btnOp2 = _tagComp:GetChild("btn_func2").asButton;
	self.btnOp2.onClick:Add(function()
		self:onClickBtnOpFunc2();
	end);

	local groupBtns = _tagComp:GetChild("g_cmdbtns").asGroup;
	self.btnMoveUp = _tagComp:GetChildInGroup(groupBtns, "btn_moveup").asButton;
	self.btnMoveDown = _tagComp:GetChildInGroup(groupBtns, "btn_movedown").asButton;
	self.btnMerge = _tagComp:GetChildInGroup(groupBtns, "btn_merge").asButton;
	self.btnDismiss = _tagComp:GetChildInGroup(groupBtns, "btn_dismiss").asButton;

	self.btnMoveUp.onClick:Add(function()
		self:onClickBtnMoveUp();
	end);
	self.btnMoveDown.onClick:Add(function()
		self:onClickBtnMoveDown();
	end);
	self.btnMerge.onClick:Add(function()
		self:onClickBtnMerge();
	end);
	self.btnDismiss.onClick:Add(function()
		self:onClickBtnDismiss();
	end);

	self:RefreshItemList();
end

function SoldierDisposeSubWin:SetCurCard(_tagCard)
	self.curCard = _tagCard;
	self.curSoldierInfo = _tagCard.BindSoldier;

	self.ctlGemList:SetCurTagCard(self.curCard);

	self:UpdateStats();
end

function SoldierDisposeSubWin:UpdateStats()
	if self.curCard == nil then
		self.mainView.visible = false;
	else
		self.mainView.visible = true;

		local curCard = self.curCard;
		UpdateUnitBaseAttrBox(self.unitBaseInfo, curCard);

		if self.curSeledItemSlot ~= nil then
			if self.curSeledItemSlot.slotType == 2 then
				--当前选中卡牌插槽时取消显示
				self:SetCurSeledItemSlot(nil);
			end
		end

		self:UpdateFuncBtns();
	end
end

function SoldierDisposeSubWin:RunUpdate(ct)
	if self.ctlPotionList ~= nil then
		self.ctlPotionList:RunUpdate(ct);
	end
	if self.ctlGemList ~= nil then
		self.ctlGemList:RunUpdate(ct);
	end
end

--左键点击操作
function SoldierDisposeSubWin:onClickTagItemSlotCallback(tagSlot)
	local tagItem = tagSlot.bindItemInfo;
	if tagItem == nil then
		return
	end
	self:SetCurSeledItemSlot(tagSlot);
	if IsMobileMode then
		local _window = ShowItemDetailInfoAtObj(tagItem, tagSlot.bindBtn, false, false, nil, nil, self.curCard);
		if _window ~= nil then
			if self.btnOp1.visible or self.btnOp2.visible then
				local btnTxt1 = nil;
				local btnTxt2 = nil;
				if self.btnOp2.visible then
					btnTxt1 = self.btnOp2.text;
				end
				if self.btnOp1.visible then
					btnTxt2 = self.btnOp1.text;
				end
				if _window:GetCurFuncBtnRegObj() ~= self.mainView then
					_window:SetCurFuncBtnRegObj(self.mainView, function(_btnIndex)
						if _btnIndex == 0 then
							self:OnOpBtnFunc(1);
						elseif _btnIndex == 1 then
							self:OnOpBtnFunc(0);
						end
						CS.GUIHelper.HideItemDetailInfoWindow();
					end);
                end
				_window:SetFuncBtn(btnTxt1, btnTxt2);
			end
		end
	end
end

--右键点击操作
function SoldierDisposeSubWin:onOpTagItemSlotCallback(tagSlot)
	local tagItem = tagSlot.bindItemInfo;
	if tagItem == nil or self.curCard == nil then
		return
	end
	if tagSlot.bindTag == 2 then
		if tagItem.ItemInfo.sub_type == 0 then
			--使用宝石道具
			self:TryUseGemOpItem(tagItem);
		else
			--自动置入该宝石
			local tagIndex = self:GetAutoSetGemSlotIndex(self.curCard, tagItem);
			if tagIndex < 0 then
				self:ShowErrorIndfo(GetGameString("lua_script_str_219"));
			else
				self:TrySetGemToCardSlot(tagItem, tagIndex);
			end
		end
	elseif tagSlot.bindTag == 0 then
		--使用此道具
		self:TryUseCurItem(tagItem);
	elseif tagSlot.bindTag == 3 then
		--卸下选中宝石
		if tagSlot.slotIndex ~= nil then
			self:TryRemoveTagCardGem(tagSlot.slotIndex);
		end
	end
end

--拖拽放下操作
function SoldierDisposeSubWin:onDragItemPutCallback(tagSlot, _tagGemIndex)
	local tagItem = tagSlot.bindItemInfo
	if tagItem == nil or self.curCard == nil then
		return
	end
	if tagItem.ItemInfo.sub_type == 0 then
		--使用宝石道具
		--self:TryUseGemOpItem(tagItemInfo);
	else
		--置入插槽
		self:TrySetGemToCardSlot(tagItem, _tagGemIndex);
	end
end

function SoldierDisposeSubWin:GetAutoSetGemSlotIndex(_tagCard, _tagItem)
	if _tagCard == nil then
		return -1;
	end
	if not _tagCard:IsEnableSetGem(_tagItem) then
		return -1;
	end
	local tagGemColor = _tagItem.ItemInfo.sub_type;
	local cardSlots = _tagCard:GetGemSlotsCount();
	local defIndex = -1;
	local tagSlotItem;
	local tagSlotColor;
	for index=0,cardSlots-1 do
		tagSlotItem = _tagCard:GetGemItemInSlot(index);
		tagSlotColor = _tagCard:GetGemSlotColorType(index);
		if tagSlotColor == tagGemColor then
			defIndex = index;
			if tagSlotItem == nil then
				return index;
			end
		end
	end
	return defIndex;
end


function SoldierDisposeSubWin:ShowErrorIndfo(errMsg)
	ShowToastInfo(errMsg, 3);
end

function SoldierDisposeSubWin:RefreshItemList()
	local lastSeledItemInfo = self.curSeledItemInfo;
	self:SetCurSeledItemSlot(nil);

	self.listPotionItems:Clear();
	self.listGemItems:Clear();

	local curPlayerInvList = GameCoreHelper.GetPlayerInventoryList();
	local tagItem;
	for index=0,curPlayerInvList.Count-1 do
		tagItem = curPlayerInvList[index];
		if tagItem.ItemInfo.item_type == 11 then
			self.listGemItems:Add(tagItem);
		elseif tagItem.ItemInfo:GetTagIntValue("Recover") > 0 then
			self.listPotionItems:Add(tagItem);
		end
    end

	self.ctlPotionList:UpdateItemList();
	self.ctlGemList:UpdateItemList();
	local defSelItemSlot = nil;
	if self.ctlPotionList.curItemSlots ~= nil then
		local tagSlot;
		for index=0,self.ctlPotionList.curItemSlots.Count-1 do
			tagSlot = self.ctlPotionList.curItemSlots[index];
			if tagSlot.bindItemInfo ~= nil and tagSlot.bindItemInfo == lastSeledItemInfo then
				defSelItemSlot = tagSlot;
			end
		end
	end
	if self.ctlGemList.curItemSlots ~= nil then
		local tagSlot;
		for index=0,self.ctlGemList.curItemSlots.Count-1 do
			tagSlot = self.ctlGemList.curItemSlots[index];
			if tagSlot.bindItemInfo ~= nil and tagSlot.bindItemInfo == lastSeledItemInfo then
				defSelItemSlot = tagSlot;
			end
		end
	end
	if defSelItemSlot then
		self:SetCurSeledItemSlot(defSelItemSlot);
	else
		self:UpdateFuncBtns();
	end
end

function SetGemSlotSeled(_tagSlot, _isSelOn)
	_tagSlot.selFrame.visible = _isSelOn;
end

function SoldierDisposeSubWin:SetCurSeledItemSlot(_tagSlot)
	if self.curSeledItemSlot ~= nil then
		if self.curSeledItemSlot.slotType == 2 then
			SetGemSlotSeled(self.curSeledItemSlot, false)
		else
			self.curSeledItemSlot:SetIsSelected(false);
		end
	end
	self.curSeledItemSlot = _tagSlot;
	if self.curSeledItemSlot ~= nil then
		if self.curSeledItemSlot.slotType == 2 then
			SetGemSlotSeled(self.curSeledItemSlot, true)
		else
			self.curSeledItemSlot:SetIsSelected(true);
		end
	end
	self:UpdateFuncBtns();
end

function SoldierDisposeSubWin:UpdateFuncBtns()
	self.btnOp1.visible = false;
	self.btnOp2.visible = false;
	if self.curSeledItemSlot ~= nil and self.curCard ~= nil and self.curSeledItemSlot.bindItemInfo ~= nil then
		local tagItemInfo = self.curSeledItemSlot.bindItemInfo;
		local slotTag = self.curSeledItemSlot.bindTag;
		local cardSlotCount = self.curCard:GetGemSlotsCount();
		if slotTag == 2 then
			if tagItemInfo.ItemInfo.sub_type == 0 then
				self:ShowOpBtn1(GetGameString("lua_script_str_220"));
			else
				if cardSlotCount >= 2 then
					self:ShowOpBtn1(GetGameString("lua_script_str_221"));
				end
				if cardSlotCount >= 1 then
					self:ShowOpBtn2(GetGameString("lua_script_str_222"));
				end
			end
		elseif slotTag == 0 then
			self:ShowOpBtn1(GetGameString("lua_script_str_223"));
		elseif slotTag == 3 then
			self:ShowOpBtn1(GetGameString("lua_script_str_224"));
		end
	end

	self.btnMoveUp.enabled = false;
	self.btnMoveDown.enabled = false;
	self.btnMerge.enabled = false;
	if self.curCard ~= nil then
		local curCardIndex = self.playerTeam.soldierCardsInTeam:IndexOf(self.curCard);
		local allCount = self.playerTeam.soldierCardsInTeam.Count;
		if curCardIndex >= 0 then
			if curCardIndex > 0 then
				self.btnMoveUp.enabled = true;
			end
			if curCardIndex < allCount - 1 then
				self.btnMoveDown.enabled = true;
			end
		end

		if self.curCard:IsSyntheEnable() then
			self.btnMerge.enabled = true;
		end

		if self.curCard:IsEnableDismiss() then
			self.btnDismiss.enabled = true;
		else
			self.btnDismiss.enabled = false;
		end

	end
end

function SoldierDisposeSubWin:ShowOpBtn1(_title)
	self.btnOp1.visible = true;
	self.btnOp1.title = _title;
end

function SoldierDisposeSubWin:ShowOpBtn2(_title)
	self.btnOp2.visible = true;
	self.btnOp2.title = _title;
end

function SoldierDisposeSubWin:OnOpBtnFunc(_btnIndex)
	if self.curSeledItemSlot ~= nil and self.curCard ~= nil and self.curSeledItemSlot.bindItemInfo ~= nil then
		local tagItemInfo = self.curSeledItemSlot.bindItemInfo;
		local slotTag = self.curSeledItemSlot.bindTag;
		local cardSlotCount = self.curCard:GetGemSlotsCount();
		if slotTag == 2 then
			if tagItemInfo.ItemInfo.sub_type == 0 then
				if _btnIndex == 0 then
					--使用宝石道具
					self:TryUseGemOpItem(tagItemInfo);
				end
			else
				if _btnIndex == 1 then
					--置入插槽1
					self:TrySetGemToCardSlot(tagItemInfo, 0);
				elseif _btnIndex == 0 then
					--置入插槽2
					self:TrySetGemToCardSlot(tagItemInfo, 1);
				end
			end
		elseif slotTag == 0 then
			if _btnIndex == 0 then
				--使用秘药
				self:TryUseCurItem(tagItemInfo);
			end
		elseif slotTag == 3 then
			if _btnIndex == 0 then
				--卸下宝石
				if self.curSeledItemSlot.slotIndex ~= nil then
					self:TryRemoveTagCardGem(self.curSeledItemSlot.slotIndex);
				end
			end
		end
	end
end

function SoldierDisposeSubWin:onClickBtnOpFunc1()
	PlayButtonSound();

	self:OnOpBtnFunc(0);
end

function SoldierDisposeSubWin:onClickBtnOpFunc2()
	PlayButtonSound();

	self:OnOpBtnFunc(1);
end

function SoldierDisposeSubWin:TryUseGemOpItem(_gemOpItem)
	local _tagCard = self.curCard;
	if _gemOpItem == nil or _tagCard == nil then
		return false;
	end
	--宝石孔操作逻辑
	local gemSlotOpStr = _gemOpItem.ItemInfo:GetTagValue("GemSlotOp");
	if not IsEmptyOrNil(gemSlotOpStr) then
		local argLines = SplitStr(gemSlotOpStr, ",");
        local opType = 0;
        local opArg = 1;
        if #argLines >= 1 then
            opType = math.floor(tonumber(argLines[1]));
        end
        if #argLines >= 2 then
            opArg = math.floor(tonumber(argLines[2]));
        end
		local isUsed = false;
		if opType == 1 then
			isUsed = AddCardGemSlot(_tagCard, opArg);
		elseif opType == 2 then
			isUsed = ChangeCardGemSlotColor(_tagCard, opArg);
		end
		if isUsed then
			--使用结束后将当前的使用道具数量减一
			GameCoreHelper.RemovePlayerSpecificItem(_gemOpItem, 1, false);
			self:RequestUpdateUI();
			return true;
		end
	end
	return false;
end

function SoldierDisposeSubWin:TrySetGemToCardSlot(_gemItem, _slotIndex)
	local _tagCard = self.curCard;
	if _gemItem == nil or _tagCard == nil then
		return false;
	end
	--验证颜色
	local tagGemColor = _gemItem.ItemInfo.sub_type;
	local _tagSlotColor = _tagCard:GetGemSlotColorType(_slotIndex);
	if tagGemColor ~= _tagSlotColor then
		self:ShowErrorIndfo(GetGameString("lua_script_str_225"));
		return false;
	end
	--验证条件
	if not _tagCard:IsEnableSetGem(_gemItem) then
		self:ShowErrorIndfo(GetGameString("lua_script_str_226"));
		return false;
	end

	local curGemItem = _tagCard:GetGemItemInSlot(_slotIndex);
	if _gemItem ~= nil then
		if curGemItem ~= nil then
			--卸掉并返还已有宝石
			_tagCard:RemoveTagSlotGem(_slotIndex, true, false, false);
		end
		--从背包中移除该宝石
		GameCoreHelper.RemovePlayerSpecificItem(_gemItem, 1, false);
		--置入新宝石
		_tagCard:SetGemItemInSlot(_slotIndex, _gemItem, true);
	end

	self:RequestUpdateUI();
	return true;
end

function SoldierDisposeSubWin:TryUseCurItem(_tagItem)
	local _tagCard = self.curCard;
	if _tagItem == nil or _tagCard == nil then
		return false;
	end
	if _tagCard.CurAvailable >= _tagCard.MaxDurability then
		self:ShowErrorIndfo(GetGameString("lua_script_str_227"));
		return false;
	end
	self.curOpTagItem = _tagItem;
	local _confirmInfo = GameCoreHelper.StringFormat(GetGameString("lua_script_str_228"),
							_tagCard:GetDisplayName(), _tagItem:GetItemName());
	ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
		if ret == 1 then
			self:DoUseCurPotionItem();
		end
	end)
	return true;
end

function SoldierDisposeSubWin:DoUseCurPotionItem()
	local _tagCard = self.curCard;
	local _tagItem = self.curOpTagItem;
	if _tagItem == nil or _tagCard == nil then
		return false;
	end
	if _tagCard.CurAvailable >= _tagCard.MaxDurability then
		return false;
	end
	local recoverNum = _tagItem.ItemInfo:GetTagIntValue("Recover");
	if recoverNum <= 0 then
		return false;
	end

	_tagCard:RestoreDurability(recoverNum);
	--使用结束后将当前的使用道具数量减一
	GameCoreHelper.RemovePlayerSpecificItem(_tagItem, 1, false);

	self:RequestUpdateUI();
	return true;
end

function SoldierDisposeSubWin:TryRemoveTagCardGem(_tagSlotIndex)
	self.curOpTagGemIndex = _tagSlotIndex;
	local _confirmInfo = GetGameString("lua_script_str_229");
	ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
		if ret == 1 then
			self:DoRemoveCardGemOp();
		end
	end)
end

function SoldierDisposeSubWin:DoRemoveCardGemOp()
	local tagCard = self.curCard;
	if tagCard == nil then
		return;
	end

	local oldSlotCount = tagCard:GetGemSlotsCount();
	if oldSlotCount <= 0 then
		return;
	end

	--卸掉并返还已有宝石
	tagCard:RemoveTagSlotGem(self.curOpTagGemIndex, true, true, true);

	self:RequestUpdateUI();
end

--请求更新UI
function SoldierDisposeSubWin:RequestUpdateUI()
	self:RefreshItemList();
	self:UpdateStats();

	GameCoreHelper.SendSceneUIMessage("update_party_ui", "");
end

function SoldierDisposeSubWin:onClickBtnMoveUp()
	if self.curCard ~= nil then
		PlayButtonSound();

		if self.playerTeam:TryMoveSoldierCardPosInTeam(self.curCard, true) then
			self:UpdateParentPartyList(self.curCard);
		end
	end
end

function SoldierDisposeSubWin:onClickBtnMoveDown()
	if self.curCard ~= nil then
		PlayButtonSound();

		if self.playerTeam:TryMoveSoldierCardPosInTeam(self.curCard, false) then
			self:UpdateParentPartyList(self.curCard);
		end
	end
end

function SoldierDisposeSubWin:onClickBtnMerge()
	if self.curCard ~= nil then
		PlayButtonSound();

		local allEnableCards = CS.CardLogic.GetAllEnableCombineCardsInTeam(self.curCard, self.playerTeam);
		if allEnableCards == nil or allEnableCards.Count <= 0 then
			local _alertInfo = GetGameString("lua_script_str_252");
		    ShowToastInfo(_alertInfo, 3);
			return;
		end
		local _selTitle = GetGameString("lua_script_str_253");
		CS.GUIHelper.ShowCardsSelectorUI(_selTitle, 1, allEnableCards, nil, true, function(_retList)
			if _retList ~= nil and _retList.Count > 0 then
				local retCard,retCode = CS.CardLogic.TryCombineCard(self.curCard, _retList[0]);
				if retCard ~= nil then
					local curCamp = self.playerTeam.CurCamp;
					CS.CardLogic.TryRemoveCardFromTeam(curCamp, self.playerTeam, self.curCard);
					CS.CardLogic.TryRemoveCardFromTeam(curCamp, self.playerTeam, _retList[0]);
					CS.CardLogic.TryAddCardToTeam(curCamp, self.playerTeam, retCard, false);

					self:UpdateParentPartyList(retCard);
					return;
				else
					local _errMsg = "";
					if retCode == 1 then
						_errMsg = GetGameString("UICardSynthDlg_UpdateCurSynthInfo_3");
					elseif retCode == 2 then
						_errMsg = GetGameString("UICardSynthDlg_UpdateCurSynthInfo_4");
					elseif retCode == 5 then
						_errMsg = GetGameString("UICardSynthDlg_UpdateCurSynthInfo_5");
					else
						_errMsg = GetGameString("UICardSynthDlg_UpdateCurSynthInfo_6");
					end
					ShowToastInfo(_errMsg, 3);
					return;
				end
			end
		end, nil)
	end
end

function SoldierDisposeSubWin:onClickBtnDismiss()
	if self.curCard ~= nil then
		PlayButtonSound();

		if not self.curCard:IsEnableDismiss() then
			return;
		end

		local _selectorTitle = GetGameString("lua_SoldierDisposeSubWin_onClickBtnDismiss_1")
		local _dismissList = GameCoreHelper.GetPlayerUnitCardsSnapshot()

		for i = 0, _dismissList.Count - 1 do
			local card = self.curCard
			if not card:IsEnableDismiss() then
				_dismissList:RemoveAt(i)
				i = i - 1
			end
		end

		GUIHelper.ShowCardsSelectorUI(_selectorTitle, -1,
			_dismissList, nil, true, function(cardList)
				if cardList ~= nil and cardList.Count > 0 then
					local _cardsDesc = GetCardsDescription(cardList)
					local _confirmInfo = GetGameString("lua_SoldierDisposeSubWin_onClickBtnDismiss_2", _cardsDesc)
					ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
						if ret == 1 then
							local playerTeam = GameCoreHelper.GetPlayerTeam();
							playerTeam:RemoveSoldierCardsInTeam(cardList);
							playerTeam.isTeamNumUpdated = true;
							self:UpdateParentPartyList(nil);
						end
					end)
				end
			end)

		-- local _confirmInfo = GetGameString("lua_script_str_254");
		-- ShowConfirmDlg(_confirmInfo, "yesno", function(ret)
		-- 	if ret == 1 then
		-- 		local playerTeam = GameCoreHelper.GetPlayerTeam();
		-- 		playerTeam:RemoveSoldierCardsInTeam(self.curCard);
		-- 		playerTeam.isTeamNumUpdated = true;
		-- 		self:UpdateParentPartyList(nil);
		-- 	end
		-- end)
	end
end


function SoldierDisposeSubWin:UpdateParentPartyList(_tagCard)
	if self.RefreshParentListCallback == nil then
		self.curCard = _tagCard;
		self:RequestUpdateUI();
		local playerTeam = GameCoreHelper.GetPlayerTeam();
		playerTeam.isTeamUpdated = true;
	else
		if self.RefreshParentListCallback ~= nil then
			self.RefreshParentListCallback(_tagCard, true);
		end
	end
end