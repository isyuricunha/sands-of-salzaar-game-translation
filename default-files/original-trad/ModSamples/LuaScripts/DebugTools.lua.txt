---@class debugTools
local debugTools = {}

---* 获取DebugTools的实例
---@return debugTools
function debugTools.new()
    local self = {}
    self.metaTable = {}
    self.curNamespace = "default"
    self.localVariables = {}
    setmetatable(self, { __index = debugTools })
    return self
end

function debugTools:getFuncMetaTable()
    if self.funcMeta == nil then
        local funcCacheMeta = {
            __mode = "k"
        }
        local funcCache = {}
        setmetatable(funcCache, funcCacheMeta)
        self.funcMeta = funcCache
    end
    return self.funcMeta
end

function debugTools:resetFuncMetaTable()
    self.funcMeta = {}
end

---* 获取当前环境中所有局部变量
function debugTools:locals()
    local variables = {}
    local idx = 1
    while true do
        local ln, lv = debug.getlocal(2, idx)
        if ln ~= nil then
            variables[ln] = lv
        else
            break
        end
        idx = 1 + idx
    end
    self.localVariables = variables
end

---* 为一个函数添加前缀函数
---@param func function 原函数
---@param patch fun(args:table):boolean,any 补丁函数，参数为原函数参数的表，返回值分别为：是否打断原函数、替代返回值
---@param priority number 优先级，不填默认0
function debugTools:prefix(func, patch, priority)
    local patchMeta = self:getPatchMeta(func)
    priority = priority or 0
    table.insert(patchMeta.prefix, {
        func = patch,
        priority = priority,
    })
    table.sort(patchMeta.prefix, function(a, b) return a.priority > b.priority end)
    return patchMeta.patchFunction
end

---* 为一个函数添加前缀函数
---@param func function 原函数
---@param patch fun(args:table, ret:any):boolean,any 补丁函数，参数为原函数参数的表、原返回值，返回值分别为：是否替换返回值、替代返回值
---@param priority number 优先级，不填默认0
function debugTools:postfix(func, patch, priority)
    local patchMeta = self:getPatchMeta(func)
    priority = priority or 0
    table.insert(patchMeta.postfix, {
        func = patch,
        priority = priority,
    })
    table.sort(patchMeta.postfix, function(a, b) return a.priority > b.priority end)
    return patchMeta.patchFunction
end

function debugTools:getPatchMeta(func)
    local funcCache = self:getFuncMetaTable()
    local patchMeta = funcCache[func]
    if patchMeta == nil then
        patchMeta = {
            prefix = {},
            postfix = {},
            originalFunction = func,
        }
        patchMeta.patchFunction = self:makePatchFunction(patchMeta)
        funcCache[func] = patchMeta
        ---* 该补丁函数可被进行索引
        funcCache[patchMeta.patchFunction] = patchMeta
    end

    return patchMeta
end

function debugTools:makePatchFunction(patch)
    return function(...)
        local args = { ... }

        local isBreak, ret
        for _, prefix in ipairs(patch.prefix) do
            isBreak, ret = prefix.func(args)
            if isBreak == true then
                return ret
            end
        end

        local originalRet = patch.originalFunction(table.unpack(args))

        for _, postfix in ipairs(patch.postfix) do
            isBreak, ret = postfix.func(args, originalRet)
            if isBreak == true then
                originalRet = ret
            end
        end

        return originalRet
    end
end

return debugTools
